/*! For license information please see index.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("prop-types"),require("react")):"function"==typeof define&&define.amd?define(["prop-types","react"],t):"object"==typeof exports?exports["md3-react"]=t(require("prop-types"),require("react")):e["md3-react"]=t(e["prop-types"],e.react)}(this,((e,t)=>(()=>{var r={821:(e,t,r)=>{"use strict";r.r(t),r.d(t,{cache:()=>Be,css:()=>De,cx:()=>Oe,flush:()=>Se,getRegisteredStyles:()=>Ae,hydrate:()=>Me,injectGlobal:()=>Ie,keyframes:()=>Te,merge:()=>_e,sheet:()=>Fe});var n=function(){function e(e){var t=this;this._insertTag=function(e){var r;r=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,r),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{r.insertRule(e,r.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=Math.abs,a=String.fromCharCode,i=Object.assign;function s(e){return e.trim()}function c(e,t,r){return e.replace(t,r)}function u(e,t){return e.indexOf(t)}function l(e,t){return 0|e.charCodeAt(t)}function h(e,t,r){return e.slice(t,r)}function f(e){return e.length}function d(e){return e.length}function m(e,t){return t.push(e),e}var p=1,g=1,y=0,b=0,v=0,C="";function P(e,t,r,n,o,a,i){return{value:e,root:t,parent:r,type:n,props:o,children:a,line:p,column:g,length:i,return:""}}function w(e,t){return i(P("",null,null,"",null,null,0),e,{length:-e.length},t)}function k(){return v=b>0?l(C,--b):0,g--,10===v&&(g=1,p--),v}function x(){return v=b<y?l(C,b++):0,g++,10===v&&(g=1,p++),v}function S(){return l(C,b)}function M(){return b}function O(e,t){return h(C,e,t)}function _(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function A(e){return p=g=1,y=f(C=e),b=0,[]}function I(e){return C="",e}function T(e){return s(O(b-1,B(91===e?e+2:40===e?e+1:e)))}function D(e){for(;(v=S())&&v<33;)x();return _(e)>2||_(v)>3?"":" "}function F(e,t){for(;--t&&x()&&!(v<48||v>102||v>57&&v<65||v>70&&v<97););return O(e,M()+(t<6&&32==S()&&32==x()))}function B(e){for(;x();)switch(v){case e:return b;case 34:case 39:34!==e&&39!==e&&B(v);break;case 40:41===e&&B(e);break;case 92:x()}return b}function H(e,t){for(;x()&&e+v!==57&&(e+v!==84||47!==S()););return"/*"+O(t,b-1)+"*"+a(47===e?e:x())}function j(e){for(;!_(S());)x();return O(e,b)}var E="-ms-",R="-moz-",L="-webkit-",z="comm",$="rule",V="decl",N="@keyframes";function G(e,t){for(var r="",n=d(e),o=0;o<n;o++)r+=t(e[o],o,e,t)||"";return r}function q(e,t,r,n){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case V:return e.return=e.return||e.value;case z:return"";case N:return e.return=e.value+"{"+G(e.children,n)+"}";case $:e.value=e.props.join(",")}return f(r=G(e.children,n))?e.return=e.value+"{"+r+"}":""}function W(e){var t=d(e);return function(r,n,o,a){for(var i="",s=0;s<t;s++)i+=e[s](r,n,o,a)||"";return i}}function U(e){return I(Y("",null,null,null,[""],e=A(e),0,[0],e))}function Y(e,t,r,n,o,i,s,h,d){for(var p=0,g=0,y=s,b=0,v=0,C=0,P=1,w=1,O=1,_=0,A="",I=o,B=i,E=n,R=A;w;)switch(C=_,_=x()){case 40:if(108!=C&&58==l(R,y-1)){-1!=u(R+=c(T(_),"&","&\f"),"&\f")&&(O=-1);break}case 34:case 39:case 91:R+=T(_);break;case 9:case 10:case 13:case 32:R+=D(C);break;case 92:R+=F(M()-1,7);continue;case 47:switch(S()){case 42:case 47:m(X(H(x(),M()),t,r),d);break;default:R+="/"}break;case 123*P:h[p++]=f(R)*O;case 125*P:case 59:case 0:switch(_){case 0:case 125:w=0;case 59+g:-1==O&&(R=c(R,/\f/g,"")),v>0&&f(R)-y&&m(v>32?K(R+";",n,r,y-1):K(c(R," ","")+";",n,r,y-2),d);break;case 59:R+=";";default:if(m(E=J(R,t,r,p,g,o,h,A,I=[],B=[],y),i),123===_)if(0===g)Y(R,t,E,E,I,i,y,h,B);else switch(99===b&&110===l(R,3)?100:b){case 100:case 108:case 109:case 115:Y(e,E,E,n&&m(J(e,E,E,0,0,o,h,A,o,I=[],y),B),o,B,y,h,n?I:B);break;default:Y(R,E,E,E,[""],B,0,h,B)}}p=g=v=0,P=O=1,A=R="",y=s;break;case 58:y=1+f(R),v=C;default:if(P<1)if(123==_)--P;else if(125==_&&0==P++&&125==k())continue;switch(R+=a(_),_*P){case 38:O=g>0?1:(R+="\f",-1);break;case 44:h[p++]=(f(R)-1)*O,O=1;break;case 64:45===S()&&(R+=T(x())),b=S(),g=y=f(A=R+=j(M())),_++;break;case 45:45===C&&2==f(R)&&(P=0)}}return i}function J(e,t,r,n,a,i,u,l,f,m,p){for(var g=a-1,y=0===a?i:[""],b=d(y),v=0,C=0,w=0;v<n;++v)for(var k=0,x=h(e,g+1,g=o(C=u[v])),S=e;k<b;++k)(S=s(C>0?y[k]+" "+x:c(x,/&\f/g,y[k])))&&(f[w++]=S);return P(e,t,r,0===a?$:l,f,m,p)}function X(e,t,r){return P(e,t,r,z,a(v),h(e,2,-2),0)}function K(e,t,r,n){return P(e,t,r,V,h(e,0,n),h(e,n+1,-1),n)}function Z(e){var t=Object.create(null);return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}}var Q=function(e,t,r){for(var n=0,o=0;n=o,o=S(),38===n&&12===o&&(t[r]=1),!_(o);)x();return O(e,b)},ee=new WeakMap,te=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,r=e.parent,n=e.column===r.column&&e.line===r.line;"rule"!==r.type;)if(!(r=r.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ee.get(r))&&!n){ee.set(e,!0);for(var o=[],i=function(e,t){return I(function(e,t){var r=-1,n=44;do{switch(_(n)){case 0:38===n&&12===S()&&(t[r]=1),e[r]+=Q(b-1,t,r);break;case 2:e[r]+=T(n);break;case 4:if(44===n){e[++r]=58===S()?"&\f":"",t[r]=e[r].length;break}default:e[r]+=a(n)}}while(n=x());return e}(A(e),t))}(t,o),s=r.props,c=0,u=0;c<i.length;c++)for(var l=0;l<s.length;l++,u++)e.props[u]=o[c]?i[c].replace(/&\f/g,s[l]):s[l]+" "+i[c]}}},re=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ne(e,t){switch(function(e,t){return 45^l(e,0)?(((t<<2^l(e,0))<<2^l(e,1))<<2^l(e,2))<<2^l(e,3):0}(e,t)){case 5103:return L+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return L+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return L+e+R+e+E+e+e;case 6828:case 4268:return L+e+E+e+e;case 6165:return L+e+E+"flex-"+e+e;case 5187:return L+e+c(e,/(\w+).+(:[^]+)/,L+"box-$1$2"+E+"flex-$1$2")+e;case 5443:return L+e+E+"flex-item-"+c(e,/flex-|-self/,"")+e;case 4675:return L+e+E+"flex-line-pack"+c(e,/align-content|flex-|-self/,"")+e;case 5548:return L+e+E+c(e,"shrink","negative")+e;case 5292:return L+e+E+c(e,"basis","preferred-size")+e;case 6060:return L+"box-"+c(e,"-grow","")+L+e+E+c(e,"grow","positive")+e;case 4554:return L+c(e,/([^-])(transform)/g,"$1"+L+"$2")+e;case 6187:return c(c(c(e,/(zoom-|grab)/,L+"$1"),/(image-set)/,L+"$1"),e,"")+e;case 5495:case 3959:return c(e,/(image-set\([^]*)/,L+"$1$`$1");case 4968:return c(c(e,/(.+:)(flex-)?(.*)/,L+"box-pack:$3"+E+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+L+e+e;case 4095:case 3583:case 4068:case 2532:return c(e,/(.+)-inline(.+)/,L+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(f(e)-1-t>6)switch(l(e,t+1)){case 109:if(45!==l(e,t+4))break;case 102:return c(e,/(.+:)(.+)-([^]+)/,"$1"+L+"$2-$3$1"+R+(108==l(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?ne(c(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==l(e,t+1))break;case 6444:switch(l(e,f(e)-3-(~u(e,"!important")&&10))){case 107:return c(e,":",":"+L)+e;case 101:return c(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+L+(45===l(e,14)?"inline-":"")+"box$3$1"+L+"$2$3$1"+E+"$2box$3")+e}break;case 5936:switch(l(e,t+11)){case 114:return L+e+E+c(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return L+e+E+c(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return L+e+E+c(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return L+e+E+e+e}return e}var oe="undefined"!=typeof document,ae=oe?void 0:function(e){var t=new WeakMap;return function(e){if(t.has(e))return t.get(e);var r=Z((function(){var e={};return function(t){return e[t]}}));return t.set(e,r),r}}(),ie=[function(e,t,r,n){if(e.length>-1&&!e.return)switch(e.type){case V:e.return=ne(e.value,e.length);break;case N:return G([w(e,{value:c(e.value,"@","@"+L)})],n);case $:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return G([w(e,{props:[c(t,/:(read-\w+)/,":-moz-$1")]})],n);case"::placeholder":return G([w(e,{props:[c(t,/:(plac\w+)/,":"+L+"input-$1")]}),w(e,{props:[c(t,/:(plac\w+)/,":-moz-$1")]}),w(e,{props:[c(t,/:(plac\w+)/,E+"input-$1")]})],n)}return""}))}}],se=function(e){var t=e.key;if(oe&&"css"===t){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,a,i=e.stylisPlugins||ie,s={},c=[];oe&&(o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),r=1;r<t.length;r++)s[t[r]]=!0;c.push(e)})));var u,l=[te,re];if(oe){var h,f=[q,(u=function(e){h.insert(e)},function(e){e.root||(e=e.return)&&u(e)})],d=W(l.concat(i,f));a=function(e,t,r,n){h=r,G(U(e?e+"{"+t.styles+"}":t.styles),d),n&&(y.inserted[t.name]=!0)}}else{var m=[q],p=W(l.concat(i,m)),g=ae(i)(t);a=function(e,t,r,n){var o=t.name,a=function(e,t){var r=t.name;return void 0===g[r]&&(g[r]=G(U(e?e+"{"+t.styles+"}":t.styles),p)),g[r]}(e,t);return void 0===y.compat?(n&&(y.inserted[o]=!0),a):n?void(y.inserted[o]=a):a}}var y={key:t,sheet:new n({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:a};return y.sheet.hydrate(c),y},ce={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ue=/[A-Z]|^ms/g,le=/_EMO_([^_]+?)_([^]*?)_EMO_/g,he=function(e){return 45===e.charCodeAt(1)},fe=function(e){return null!=e&&"boolean"!=typeof e},de=Z((function(e){return he(e)?e:e.replace(ue,"-$&").toLowerCase()})),me=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(le,(function(e,t,r){return ge={name:t,styles:r,next:ge},t}))}return 1===ce[e]||he(e)||"number"!=typeof t||0===t?t:t+"px"};function pe(e,t,r){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return ge={name:r.name,styles:r.styles,next:ge},r.name;if(void 0!==r.styles){var n=r.next;if(void 0!==n)for(;void 0!==n;)ge={name:n.name,styles:n.styles,next:ge},n=n.next;return r.styles+";"}return function(e,t,r){var n="";if(Array.isArray(r))for(var o=0;o<r.length;o++)n+=pe(e,t,r[o])+";";else for(var a in r){var i=r[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?n+=a+"{"+t[i]+"}":fe(i)&&(n+=de(a)+":"+me(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var s=pe(e,t,i);switch(a){case"animation":case"animationName":n+=de(a)+":"+s+";";break;default:n+=a+"{"+s+"}"}}else for(var c=0;c<i.length;c++)fe(i[c])&&(n+=de(a)+":"+me(a,i[c])+";")}return n}(e,t,r);case"function":if(void 0!==e){var o=ge,a=r(e);return ge=o,pe(e,t,a)}}if(null==t)return r;var i=t[r];return void 0!==i?i:r}var ge,ye=/label:\s*([^\s;\n{]+)\s*(;|$)/g,be=function(e,t,r){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var n=!0,o="";ge=void 0;var a=e[0];null==a||void 0===a.raw?(n=!1,o+=pe(r,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=pe(r,t,e[i]),n&&(o+=a[i]);ye.lastIndex=0;for(var s,c="";null!==(s=ye.exec(o));)c+="-"+s[1];var u=function(e){for(var t,r=0,n=0,o=e.length;o>=4;++n,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(n)|(255&e.charCodeAt(++n))<<8|(255&e.charCodeAt(++n))<<16|(255&e.charCodeAt(++n))<<24))+(59797*(t>>>16)<<16),r=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(o){case 3:r^=(255&e.charCodeAt(n+2))<<16;case 2:r^=(255&e.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)}(o)+c;return{name:u,styles:o,next:ge}},ve="undefined"!=typeof document;function Ce(e,t,r){var n="";return r.split(" ").forEach((function(r){void 0!==e[r]?t.push(e[r]+";"):n+=r+" "})),n}function Pe(e,t){if(void 0===e.inserted[t.name])return e.insert("",t,e.sheet,!0)}function we(e,t,r){var n=[],o=Ce(e,n,r);return n.length<2?r:o+t(n)}var ke=function e(t){for(var r="",n=0;n<t.length;n++){var o=t[n];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"object":if(Array.isArray(o))a=e(o);else for(var i in a="",o)o[i]&&i&&(a&&(a+=" "),a+=i);break;default:a=o}a&&(r&&(r+=" "),r+=a)}}return r},xe=function(e){var t=se({key:"css"});t.sheet.speedy=function(e){this.isSpeedy=e},t.compat=!0;var r=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=be(r,t.registered,void 0);return function(e,t,r){!function(e,t,r){var n=e.key+"-"+t.name;(!1===r||!1===ve&&void 0!==e.compat)&&void 0===e.registered[n]&&(e.registered[n]=t.styles)}(e,t,r);var n=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o="",a=t;do{var i=e.insert(t===a?"."+n:"",a,e.sheet,!0);ve||void 0===i||(o+=i),a=a.next}while(void 0!==a);if(!ve&&0!==o.length);}}(t,o,!1),t.key+"-"+o.name};return{css:r,cx:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return we(t.registered,r,ke(n))},injectGlobal:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=be(r,t.registered);Pe(t,o)},keyframes:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=be(r,t.registered),a="animation-"+o.name;return Pe(t,{name:o.name,styles:"@keyframes "+a+"{"+o.styles+"}"}),a},hydrate:function(e){e.forEach((function(e){t.inserted[e]=!0}))},flush:function(){t.registered={},t.inserted={},t.sheet.flush()},sheet:t.sheet,cache:t,getRegisteredStyles:Ce.bind(null,t.registered),merge:we.bind(null,t.registered,r)}}(),Se=xe.flush,Me=xe.hydrate,Oe=xe.cx,_e=xe.merge,Ae=xe.getRegisteredStyles,Ie=xe.injectGlobal,Te=xe.keyframes,De=xe.css,Fe=xe.sheet,Be=xe.cache},849:(e,t,r)=>{e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t){e.exports=r(99)},function(e,t){e.exports=r(156)},function(e,t,r){"use strict";r.r(t);var n=r(1),o=r(0),a=function(){return(a=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=0,s=n.forwardRef((function(e,t){var r=e.title,o=void 0===r?null:r,s=e.description,c=void 0===s?null:s,u=e.size,l=void 0===u?null:u,h=e.color,f=void 0===h?"currentColor":h,d=e.horizontal,m=void 0===d?null:d,p=e.vertical,g=void 0===p?null:p,y=e.rotate,b=void 0===y?null:y,v=e.spin,C=void 0===v?null:v,P=e.style,w=void 0===P?{}:P,k=e.children,x=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}(e,["title","description","size","color","horizontal","vertical","rotate","spin","style","children"]);i++;var S,M=null!==C&&C,O=n.Children.map(k,(function(e){var t=e;!0!==M&&(M=!0===(null===C?t.props.spin:C));var r=t.props.size;"number"==typeof l&&"number"==typeof t.props.size&&(r=t.props.size/l);var o={size:r,color:null===f?t.props.color:f,horizontal:null===m?t.props.horizontal:m,vertical:null===g?t.props.vertical:g,rotate:null===b?t.props.rotate:b,spin:null===C?t.props.spin:C,inStack:!0};return n.cloneElement(t,o)}));null!==l&&(w.width="string"==typeof l?l:1.5*l+"rem");var _,A="stack_labelledby_"+i,I="stack_describedby_"+i;if(o)S=c?A+" "+I:A;else if(_="presentation",c)throw new Error("title attribute required when description is set");return n.createElement("svg",a({ref:t,viewBox:"0 0 24 24",style:w,role:_,"aria-labelledby":S},x),o&&n.createElement("title",{id:A},o),c&&n.createElement("desc",{id:I},c),M&&n.createElement("style",null,"@keyframes spin { from { transform: rotate(0deg) } to { transform: rotate(360deg) } }","@keyframes spin-inverse { from { transform: rotate(0deg) } to { transform: rotate(-360deg) } }"),O)}));s.displayName="Stack",s.propTypes={size:o.oneOfType([o.number,o.string]),color:o.string,horizontal:o.bool,vertical:o.bool,rotate:o.number,spin:o.oneOfType([o.bool,o.number]),children:o.oneOfType([o.arrayOf(o.node),o.node]).isRequired,className:o.string,style:o.object},s.defaultProps={size:null,color:null,horizontal:null,vertical:null,rotate:null,spin:null};var c=s;r.d(t,"Icon",(function(){return h})),r.d(t,"Stack",(function(){return c}));var u=function(){return(u=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},l=0,h=n.forwardRef((function(e,t){var r=e.path,o=e.id,a=void 0===o?++l:o,i=e.title,s=void 0===i?null:i,c=e.description,h=void 0===c?null:c,f=e.size,d=void 0===f?null:f,m=e.color,p=void 0===m?"currentColor":m,g=e.horizontal,y=void 0!==g&&g,b=e.vertical,v=void 0!==b&&b,C=e.rotate,P=void 0===C?0:C,w=e.spin,k=void 0!==w&&w,x=e.style,S=void 0===x?{}:x,M=e.inStack,O=void 0!==M&&M,_=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}(e,["path","id","title","description","size","color","horizontal","vertical","rotate","spin","style","inStack"]),A={},I=[];null!==d&&(O?I.push("scale("+d+")"):(S.width="string"==typeof d?d:1.5*d+"rem",S.height=S.width)),y&&I.push("scaleX(-1)"),v&&I.push("scaleY(-1)"),0!==P&&I.push("rotate("+P+"deg)"),null!==p&&(A.fill=p);var T=n.createElement("path",u({d:r,style:A},O?_:{})),D=T;I.length>0&&(S.transform=I.join(" "),S.transformOrigin="center",O&&(D=n.createElement("g",{style:S},T,n.createElement("rect",{width:"24",height:"24",fill:"transparent"}))));var F,B=D,H=!0===k||"number"!=typeof k?2:k,j=!O&&(y||v);if(H<0&&(j=!j),k&&(B=n.createElement("g",{style:{animation:"spin"+(j?"-inverse":"")+" linear "+Math.abs(H)+"s infinite",transformOrigin:"center"}},D,!(y||v||0!==P)&&n.createElement("rect",{width:"24",height:"24",fill:"transparent"}))),O)return B;var E,R="icon_labelledby_"+a,L="icon_describedby_"+a;if(s)F=h?R+" "+L:R;else if(E="presentation",h)throw new Error("title attribute required when description is set");return n.createElement("svg",u({ref:t,viewBox:"0 0 24 24",style:S,role:E,"aria-labelledby":F},_),s&&n.createElement("title",{id:R},s),h&&n.createElement("desc",{id:L},h),!O&&k&&(j?n.createElement("style",null,"@keyframes spin-inverse { from { transform: rotate(0deg) } to { transform: rotate(-360deg) } }"):n.createElement("style",null,"@keyframes spin { from { transform: rotate(0deg) } to { transform: rotate(360deg) } }")),B)}));h.displayName="Icon",h.propTypes={path:o.string.isRequired,size:o.oneOfType([o.number,o.string]),color:o.string,horizontal:o.bool,vertical:o.bool,rotate:o.number,spin:o.oneOfType([o.bool,o.number]),style:o.object,inStack:o.bool,className:o.string},h.defaultProps={size:null,color:"currentColor",horizontal:!1,vertical:!1,rotate:0,spin:!1},t.default=h}])},870:function(e,t,r){"use strict";var n=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0;const a=r(607),i=r(794),s=r(821),c=o(r(849)),u=o(r(156));t.Button=e=>{const{scheme:t}=(0,a.useTheme)(),{type:r="filled",icon:o}=e,l=n(e,["type","icon"]),h="filled"===r?(0,i.hexFromArgb)(t.primary):"tonal"===r?(0,i.hexFromArgb)(t.secondaryContainer):"transparent",f="filled"===r?(0,i.hexFromArgb)(t.onPrimary):"tonal"===r?(0,i.hexFromArgb)(t.onSecondaryContainer):(0,i.hexFromArgb)(t.primary),d=s.css`
		padding: 0px 24px;
		transition: background-color 300ms;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
		${o&&"padding-left: 16px;"}
		color: ${f}${e.disabled&&Math.round(97.28).toString(16).padStart(2,"0")};
		
		button:not(:disabled):hover & {
			background-color: ${f+Math.round(20.48).toString(16).padStart(2,"0")};
		}
		button:not(:disabled):active & {
			background-color: ${f+Math.round(30.72).toString(16).padStart(2,"0")};
		}
		button:not(:disabled):focus-visible & {
			background-color: ${f+Math.round(30.72).toString(16).padStart(2,"0")};
		}
		${(0,a.textStylesForType)("labelLarge")}
	`;return u.default.createElement("button",Object.assign({className:s.css`
				all: unset;
				cursor: ${!e.disabled&&"pointer"};
				overflow: hidden;
				width: fit-content;
				height: 36px;
				display: flex;
				border-radius: 999px;
				background-color: ${h}${e.disabled&&Math.round(97.28).toString(16).padStart(2,"0")};
				${"outline"===r&&`border: ${(0,i.hexFromArgb)(t.outline)}${e.disabled?Math.round(97.28).toString(16).padStart(2,"0"):""} 1px solid `}
			`},l),u.default.createElement("div",{className:d},o&&u.default.createElement(c.default,{path:o,size:"18px"}),e.children))}},31:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(870),t)},740:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(31),t),o(r(651),t),o(r(246),t)},838:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},i=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.NavigationBar=void 0;const c=a(r(156)),u=r(607),l=r(794),h=r(821),f=s(r(849)),d=e=>{const{scheme:t}=(0,u.useTheme)(),r=(e.activated,(0,l.hexFromArgb)(t.onPrimaryContainer));return c.default.createElement("div",{tabIndex:1,className:h.css`
				display: flex;
				flex-direction: column;
				gap: 4px;
				align-items: center;
				& div,
				span {
					transition: background-color 300ms ease-in-out, color 300ms ease-in-out;
				}
                &:focus-visible {
                    outline: unset;
                }
                
			`,onClick:e.onClick,onKeyDown:t=>{"Enter"===t.key&&e.onClick&&e.onClick(t)}},c.default.createElement("div",{className:h.css`
					display: flex;
					justify-content: center;
					align-items: center;
					border-radius: 99px;
					width: ${e.horizontal?"56px":"64px"};
					height: 32px;
					background-color: ${e.activated&&(0,l.hexFromArgb)(t.secondaryContainer)};
					color: ${e.activated?(0,l.hexFromArgb)(t.onSurface):(0,l.hexFromArgb)(t.onSurfaceVariant)};
					div:hover > & {
						background-color: ${r+Math.round(20.48).toString(16).padStart(2,"0")};
					}
					div:active > & {
						background-color: ${r+Math.round(30.72).toString(16).padStart(2,"0")};
					}
					div:focus-visible > & {
						background-color: ${r+Math.round(30.72).toString(16).padStart(2,"0")};
					}
				`},e.icon&&e.activated?c.default.createElement(f.default,{size:"24px",path:e.icon}):e.inActiveIcon&&!e.activated?c.default.createElement(f.default,{size:"24px",path:e.inActiveIcon}):e.icon&&c.default.createElement(f.default,{size:"24px",path:e.icon})),c.default.createElement(u.Text,{style:{textAlign:"center"},type:"labelMedium",color:e.activated?"onSurface":"onSurfaceVariant"},e.label))};t.NavigationBar=e=>{const{scheme:t}=(0,u.useTheme)(),[r,n]=(0,c.useState)(0),{horizontal:o,segments:a,handleSelected:s}=e,f=i(e,["horizontal","segments","handleSelected"]);return c.default.createElement("nav",Object.assign({className:h.css`
				display: flex;
				flex-direction: ${e.horizontal?"column":"row"};
				gap: 16px;
				background-color: ${(0,l.hexFromArgb)(t.surfaceContainer)};
				width: max-content;
                ${!o&&"justify-content: space-evenly;"};
				padding-top: 12px;
				padding-bottom: 16px;
				${!o&&"width: 100%;"};
				${o&&"width: 80px;"};
			`},f),e.segments.map(((t,o)=>c.default.createElement(d,Object.assign({},t,{title:r===o?"tak":"nie",activated:r===o,key:o,horizontal:e.horizontal,onClick:()=>{n(o),e.handleSelected&&e.handleSelected(o)}})))))}},246:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(838),t)},169:function(e,t,r){"use strict";var n=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Text=void 0;const a=o(r(156)),i=r(794),s=r(821),c=r(607),u=r(607);t.Text=e=>{var t=n(e,[]);const{color:r,type:o,children:l}=t,h=n(t,["color","type","children"]),{scheme:f}=(0,c.useTheme)();return a.default.createElement(a.default.Fragment,null,a.default.createElement("span",Object.assign({className:s.css`
					//color: #${f[r||"onBackground"].toString(16).slice(0,-2)};
					color: ${(0,i.hexFromArgb)(f[r||"onBackground"])};
					${(0,u.textStylesForType)(o||"bodyMedium")}
				`},h),l))}},651:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(169),t),o(r(684),t)},684:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.textStylesForType=t.typographySet=void 0,t.typographySet={displayLarge:{lineHeight:64,fontSize:57,letterSpacing:-.25,fontWeight:400},displayMedium:{lineHeight:52,fontSize:45,letterSpacing:0,fontWeight:400},displaySmall:{lineHeight:44,fontSize:36,letterSpacing:0,fontWeight:400},headlineLarge:{lineHeight:44,fontSize:36,letterSpacing:0,fontWeight:400},headlineMedium:{lineHeight:36,fontSize:28,letterSpacing:0,fontWeight:400},headlineSmall:{lineHeight:32,fontSize:24,letterSpacing:0,fontWeight:400},titleLarge:{lineHeight:28,fontSize:22,letterSpacing:0,fontWeight:400},titleMedium:{lineHeight:24,fontSize:16,letterSpacing:.15,fontWeight:500},titleSmall:{lineHeight:20,fontSize:14,letterSpacing:.1,fontWeight:500},labelLarge:{lineHeight:20,fontSize:14,letterSpacing:.1,fontWeight:500},labelMedium:{lineHeight:16,fontSize:12,letterSpacing:.5,fontWeight:500},labelSmall:{lineHeight:16,fontSize:11,letterSpacing:.5,fontWeight:500},bodyLarge:{lineHeight:24,fontSize:16,letterSpacing:.5,fontWeight:400},bodyMedium:{lineHeight:20,fontSize:14,letterSpacing:.25,fontWeight:400},bodySmall:{lineHeight:16,fontSize:12,letterSpacing:.4,fontWeight:400}},t.textStylesForType=function(e){const r=t.typographySet[e];return`\n  line-height: ${r.lineHeight}px;\n  font-size: ${r.fontSize}px;\n  letter-spacing: ${r.letterSpacing}px;\n  font-weight: ${r.fontWeight};`}},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(740),t),o(r(402),t),o(r(606),t)},434:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LayoutWithNavigationBar=void 0;const i=r(821),s=r(794),c=r(607),u=a(r(156));t.LayoutWithNavigationBar=function(e){const{updateSourceColor:t,scheme:r,toggleTheme:n}=(0,c.useTheme)(),[o,a]=(0,u.useState)(0),[l,h]=(0,u.useState)(!0);(0,u.useEffect)((()=>{window.matchMedia("(max-width: 600px)").addEventListener("change",(e=>h(e.matches)))}));let f=[];return f=Array.isArray(e.children)?e.children:[e.children],u.default.createElement("div",{className:i.css`
				background-color: ${(0,s.hexFromArgb)(r.background)};
				flex: 1;
				display: flex;
				flex-direction: ${l?"column-reverse":"row"};
				width: 100%;
				height: 100%;
				color: ${(0,s.hexFromArgb)(r.onBackground)};
			`},u.default.createElement(c.NavigationBar,{handleSelected:e=>{a(e)},horizontal:!l,segments:e.segments}),u.default.createElement("main",{className:i.css`
					flex: 1;
					display: flex;
					background-color: ${(0,s.hexFromArgb)(r.background)};
					overflow: auto;
				`},f[o]))}},402:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(434),t)},606:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.useTheme=t.ThemeProvider=void 0;const i=r(794),s=a(r(156)),c=r(450),u={theme:"light",sourceColor:"#4400ee",scheme:(0,c.themeFromSourceColor)((0,i.argbFromHex)("#4400ee")).schemes.light,toggleTheme:function(){},updateSourceColor:function(e){}},l=(0,s.createContext)(u);t.ThemeProvider=function({children:e}){const[t,r]=(0,s.useState)("light"),[n,o]=(0,s.useState)("#4400ee"),[a,u]=(0,s.useState)((0,c.themeFromSourceColor)((0,i.argbFromHex)("#4400ee"),[]).schemes.light);return s.default.createElement(l.Provider,{value:{theme:t,toggleTheme:e=>{const o=void 0!==e?e:"light"===t?"dark":"light";r(o),u((0,c.themeFromSourceColor)((0,i.argbFromHex)(n),[]).schemes[o])},sourceColor:n,updateSourceColor:e=>{o(e),u((0,c.themeFromSourceColor)((0,i.argbFromHex)(e),[]).schemes[t])},scheme:a}},e)},t.useTheme=function(){const e=(0,s.useContext)(l);if(!e)throw new Error("useTheme must be used within a ThemeProvider");return e}},99:t=>{"use strict";t.exports=e},156:e=>{"use strict";e.exports=t},794:(e,t,r)=>{"use strict";function n(e){return e<0?-1:0===e?0:1}function o(e,t,r){return(1-r)*e+r*t}function a(e,t,r){return r<e?e:r>t?t:r}function i(e,t,r){return r<e?e:r>t?t:r}function s(e){return(e%=360)<0&&(e+=360),e}function c(e){return(e%=360)<0&&(e+=360),e}function u(e,t){return c(t-e)<=180?1:-1}function l(e,t){return 180-Math.abs(Math.abs(e-t)-180)}function h(e,t){return[e[0]*t[0][0]+e[1]*t[0][1]+e[2]*t[0][2],e[0]*t[1][0]+e[1]*t[1][1]+e[2]*t[1][2],e[0]*t[2][0]+e[1]*t[2][1]+e[2]*t[2][2]]}r.r(t),r.d(t,{Blend:()=>V,Cam16:()=>L,Contrast:()=>N,CorePalette:()=>ee,DislikeAnalyzer:()=>G,DynamicColor:()=>q,DynamicScheme:()=>pe,Hct:()=>$,MaterialDynamicColors:()=>Z,QuantizerCelebi:()=>me,QuantizerMap:()=>oe,QuantizerWsmeans:()=>re,QuantizerWu:()=>le,Scheme:()=>ge,SchemeAndroid:()=>ye,SchemeContent:()=>ve,SchemeExpressive:()=>Ce,SchemeFidelity:()=>Pe,SchemeMonochrome:()=>we,SchemeNeutral:()=>ke,SchemeTonalSpot:()=>xe,SchemeVibrant:()=>Se,Score:()=>_e,TemperatureCache:()=>be,TonalPalette:()=>Q,ViewingConditions:()=>R,alphaFromArgb:()=>y,applyTheme:()=>je,argbFromHex:()=>Ie,argbFromLab:()=>x,argbFromLinrgb:()=>g,argbFromLstar:()=>M,argbFromRgb:()=>p,argbFromRgba:()=>B,argbFromXyz:()=>w,blueFromArgb:()=>C,clampDouble:()=>i,clampInt:()=>a,customColor:()=>He,delinearized:()=>T,differenceDegrees:()=>l,greenFromArgb:()=>v,hexFromArgb:()=>Ae,isOpaque:()=>P,labFromArgb:()=>S,lerp:()=>o,linearized:()=>I,lstarFromArgb:()=>O,lstarFromY:()=>A,matrixMultiply:()=>h,redFromArgb:()=>b,rgbaFromArgb:()=>F,rotationDirection:()=>u,sanitizeDegreesDouble:()=>c,sanitizeDegreesInt:()=>s,signum:()=>n,sourceColorFromImage:()=>De,themeFromImage:()=>Be,themeFromSourceColor:()=>Fe,whitePointD65:()=>D,xyzFromArgb:()=>k,yFromLstar:()=>_});const f=[[.41233895,.35762064,.18051042],[.2126,.7152,.0722],[.01932141,.11916382,.95034478]],d=[[3.2413774792388685,-1.5376652402851851,-.49885366846268053],[-.9691452513005321,1.8758853451067872,.04156585616912061],[.05562093689691305,-.20395524564742123,1.0571799111220335]],m=[95.047,100,108.883];function p(e,t,r){return(255<<24|(255&e)<<16|(255&t)<<8|255&r)>>>0}function g(e){return p(T(e[0]),T(e[1]),T(e[2]))}function y(e){return e>>24&255}function b(e){return e>>16&255}function v(e){return e>>8&255}function C(e){return 255&e}function P(e){return y(e)>=255}function w(e,t,r){const n=d,o=n[0][0]*e+n[0][1]*t+n[0][2]*r,a=n[1][0]*e+n[1][1]*t+n[1][2]*r,i=n[2][0]*e+n[2][1]*t+n[2][2]*r;return p(T(o),T(a),T(i))}function k(e){return h([I(b(e)),I(v(e)),I(C(e))],f)}function x(e,t,r){const n=m,o=(e+16)/116,a=o-r/200,i=E(t/500+o),s=E(o),c=E(a);return w(i*n[0],s*n[1],c*n[2])}function S(e){const t=I(b(e)),r=I(v(e)),n=I(C(e)),o=f,a=o[0][0]*t+o[0][1]*r+o[0][2]*n,i=o[1][0]*t+o[1][1]*r+o[1][2]*n,s=o[2][0]*t+o[2][1]*r+o[2][2]*n,c=m,u=a/c[0],l=i/c[1],h=s/c[2],d=j(u),p=j(l);return[116*p-16,500*(d-p),200*(p-j(h))]}function M(e){const t=T(_(e));return p(t,t,t)}function O(e){return 116*j(k(e)[1]/100)-16}function _(e){return 100*E((e+16)/116)}function A(e){return 116*j(e/100)-16}function I(e){const t=e/255;return t<=.040449936?t/12.92*100:100*Math.pow((t+.055)/1.055,2.4)}function T(e){const t=e/100;let r=0;return r=t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,a(0,255,Math.round(255*r))}function D(){return m}function F(e){return{r:b(e),g:v(e),b:C(e),a:y(e)}}function B({r:e,g:t,b:r,a:n}){const o=H(e),a=H(t),i=H(r);return H(n)<<24|o<<16|a<<8|i}function H(e){return e<0?0:e>255?255:e}function j(e){return e>216/24389?Math.pow(e,1/3):(903.2962962962963*e+16)/116}function E(e){const t=e*e*e;return t>216/24389?t:(116*e-16)/903.2962962962963}class R{static make(e=D(),t=200/Math.PI*_(50)/100,r=50,n=2,a=!1){const i=e,s=.401288*i[0]+.650173*i[1]+-.051461*i[2],c=-.250268*i[0]+1.204414*i[1]+.045854*i[2],u=-.002079*i[0]+.048952*i[1]+.953127*i[2],l=.8+n/10,h=l>=.9?o(.59,.69,10*(l-.9)):o(.525,.59,10*(l-.8));let f=a?1:l*(1-1/3.6*Math.exp((-t-42)/92));f=f>1?1:f<0?0:f;const d=l,m=[f*(100/s)+1-f,f*(100/c)+1-f,f*(100/u)+1-f],p=1/(5*t+1),g=p*p*p*p,y=1-g,b=g*t+.1*y*y*Math.cbrt(5*t),v=_(r)/e[1],C=1.48+Math.sqrt(v),P=.725/Math.pow(v,.2),w=P,k=[Math.pow(b*m[0]*s/100,.42),Math.pow(b*m[1]*c/100,.42),Math.pow(b*m[2]*u/100,.42)],x=[400*k[0]/(k[0]+27.13),400*k[1]/(k[1]+27.13),400*k[2]/(k[2]+27.13)];return new R(v,(2*x[0]+x[1]+.05*x[2])*P,P,w,h,d,m,b,Math.pow(b,.25),C)}constructor(e,t,r,n,o,a,i,s,c,u){this.n=e,this.aw=t,this.nbb=r,this.ncb=n,this.c=o,this.nc=a,this.rgbD=i,this.fl=s,this.fLRoot=c,this.z=u}}R.DEFAULT=R.make();class L{constructor(e,t,r,n,o,a,i,s,c){this.hue=e,this.chroma=t,this.j=r,this.q=n,this.m=o,this.s=a,this.jstar=i,this.astar=s,this.bstar=c}distance(e){const t=this.jstar-e.jstar,r=this.astar-e.astar,n=this.bstar-e.bstar,o=Math.sqrt(t*t+r*r+n*n);return 1.41*Math.pow(o,.63)}static fromInt(e){return L.fromIntInViewingConditions(e,R.DEFAULT)}static fromIntInViewingConditions(e,t){const r=(65280&e)>>8,o=255&e,a=I((16711680&e)>>16),i=I(r),s=I(o),c=.41233895*a+.35762064*i+.18051042*s,u=.2126*a+.7152*i+.0722*s,l=.01932141*a+.11916382*i+.95034478*s,h=.401288*c+.650173*u-.051461*l,f=-.250268*c+1.204414*u+.045854*l,d=-.002079*c+.048952*u+.953127*l,m=t.rgbD[0]*h,p=t.rgbD[1]*f,g=t.rgbD[2]*d,y=Math.pow(t.fl*Math.abs(m)/100,.42),b=Math.pow(t.fl*Math.abs(p)/100,.42),v=Math.pow(t.fl*Math.abs(g)/100,.42),C=400*n(m)*y/(y+27.13),P=400*n(p)*b/(b+27.13),w=400*n(g)*v/(v+27.13),k=(11*C+-12*P+w)/11,x=(C+P-2*w)/9,S=(20*C+20*P+21*w)/20,M=(40*C+20*P+w)/20,O=180*Math.atan2(x,k)/Math.PI,_=O<0?O+360:O>=360?O-360:O,A=_*Math.PI/180,T=M*t.nbb,D=100*Math.pow(T/t.aw,t.c*t.z),F=4/t.c*Math.sqrt(D/100)*(t.aw+4)*t.fLRoot,B=_<20.14?_+360:_,H=5e4/13*(.25*(Math.cos(B*Math.PI/180+2)+3.8))*t.nc*t.ncb*Math.sqrt(k*k+x*x)/(S+.305),j=Math.pow(H,.9)*Math.pow(1.64-Math.pow(.29,t.n),.73),E=j*Math.sqrt(D/100),R=E*t.fLRoot,z=50*Math.sqrt(j*t.c/(t.aw+4)),$=(1+100*.007)*D/(1+.007*D),V=1/.0228*Math.log(1+.0228*R),N=V*Math.cos(A),G=V*Math.sin(A);return new L(_,E,D,F,R,z,$,N,G)}static fromJch(e,t,r){return L.fromJchInViewingConditions(e,t,r,R.DEFAULT)}static fromJchInViewingConditions(e,t,r,n){const o=4/n.c*Math.sqrt(e/100)*(n.aw+4)*n.fLRoot,a=t*n.fLRoot,i=t/Math.sqrt(e/100),s=50*Math.sqrt(i*n.c/(n.aw+4)),c=r*Math.PI/180,u=(1+100*.007)*e/(1+.007*e),l=1/.0228*Math.log(1+.0228*a),h=l*Math.cos(c),f=l*Math.sin(c);return new L(r,t,e,o,a,s,u,h,f)}static fromUcs(e,t,r){return L.fromUcsInViewingConditions(e,t,r,R.DEFAULT)}static fromUcsInViewingConditions(e,t,r,n){const o=t,a=r,i=Math.sqrt(o*o+a*a),s=(Math.exp(.0228*i)-1)/.0228/n.fLRoot;let c=Math.atan2(a,o)*(180/Math.PI);c<0&&(c+=360);const u=e/(1-.007*(e-100));return L.fromJchInViewingConditions(u,s,c,n)}toInt(){return this.viewed(R.DEFAULT)}viewed(e){const t=0===this.chroma||0===this.j?0:this.chroma/Math.sqrt(this.j/100),r=Math.pow(t/Math.pow(1.64-Math.pow(.29,e.n),.73),1/.9),o=this.hue*Math.PI/180,a=.25*(Math.cos(o+2)+3.8),i=e.aw*Math.pow(this.j/100,1/e.c/e.z),s=a*(5e4/13)*e.nc*e.ncb,c=i/e.nbb,u=Math.sin(o),l=Math.cos(o),h=23*(c+.305)*r/(23*s+11*r*l+108*r*u),f=h*l,d=h*u,m=(460*c+451*f+288*d)/1403,p=(460*c-891*f-261*d)/1403,g=(460*c-220*f-6300*d)/1403,y=Math.max(0,27.13*Math.abs(m)/(400-Math.abs(m))),b=n(m)*(100/e.fl)*Math.pow(y,1/.42),v=Math.max(0,27.13*Math.abs(p)/(400-Math.abs(p))),C=n(p)*(100/e.fl)*Math.pow(v,1/.42),P=Math.max(0,27.13*Math.abs(g)/(400-Math.abs(g))),k=n(g)*(100/e.fl)*Math.pow(P,1/.42),x=b/e.rgbD[0],S=C/e.rgbD[1],M=k/e.rgbD[2];return w(1.86206786*x-1.01125463*S+.14918677*M,.38752654*x+.62144744*S-.00897398*M,-.0158415*x-.03412294*S+1.04996444*M)}static fromXyzInViewingConditions(e,t,r,o){const a=.401288*e+.650173*t-.051461*r,i=-.250268*e+1.204414*t+.045854*r,s=-.002079*e+.048952*t+.953127*r,c=o.rgbD[0]*a,u=o.rgbD[1]*i,l=o.rgbD[2]*s,h=Math.pow(o.fl*Math.abs(c)/100,.42),f=Math.pow(o.fl*Math.abs(u)/100,.42),d=Math.pow(o.fl*Math.abs(l)/100,.42),m=400*n(c)*h/(h+27.13),p=400*n(u)*f/(f+27.13),g=400*n(l)*d/(d+27.13),y=(11*m+-12*p+g)/11,b=(m+p-2*g)/9,v=(20*m+20*p+21*g)/20,C=(40*m+20*p+g)/20,P=180*Math.atan2(b,y)/Math.PI,w=P<0?P+360:P>=360?P-360:P,k=w*Math.PI/180,x=C*o.nbb,S=100*Math.pow(x/o.aw,o.c*o.z),M=4/o.c*Math.sqrt(S/100)*(o.aw+4)*o.fLRoot,O=w<20.14?w+360:w,_=5e4/13*(1/4*(Math.cos(O*Math.PI/180+2)+3.8))*o.nc*o.ncb*Math.sqrt(y*y+b*b)/(v+.305),A=Math.pow(_,.9)*Math.pow(1.64-Math.pow(.29,o.n),.73),I=A*Math.sqrt(S/100),T=I*o.fLRoot,D=50*Math.sqrt(A*o.c/(o.aw+4)),F=(1+100*.007)*S/(1+.007*S),B=Math.log(1+.0228*T)/.0228,H=B*Math.cos(k),j=B*Math.sin(k);return new L(w,I,S,M,T,D,F,H,j)}xyzInViewingConditions(e){const t=0===this.chroma||0===this.j?0:this.chroma/Math.sqrt(this.j/100),r=Math.pow(t/Math.pow(1.64-Math.pow(.29,e.n),.73),1/.9),o=this.hue*Math.PI/180,a=.25*(Math.cos(o+2)+3.8),i=e.aw*Math.pow(this.j/100,1/e.c/e.z),s=a*(5e4/13)*e.nc*e.ncb,c=i/e.nbb,u=Math.sin(o),l=Math.cos(o),h=23*(c+.305)*r/(23*s+11*r*l+108*r*u),f=h*l,d=h*u,m=(460*c+451*f+288*d)/1403,p=(460*c-891*f-261*d)/1403,g=(460*c-220*f-6300*d)/1403,y=Math.max(0,27.13*Math.abs(m)/(400-Math.abs(m))),b=n(m)*(100/e.fl)*Math.pow(y,1/.42),v=Math.max(0,27.13*Math.abs(p)/(400-Math.abs(p))),C=n(p)*(100/e.fl)*Math.pow(v,1/.42),P=Math.max(0,27.13*Math.abs(g)/(400-Math.abs(g))),w=n(g)*(100/e.fl)*Math.pow(P,1/.42),k=b/e.rgbD[0],x=C/e.rgbD[1],S=w/e.rgbD[2];return[1.86206786*k-1.01125463*x+.14918677*S,.38752654*k+.62144744*x-.00897398*S,-.0158415*k-.03412294*x+1.04996444*S]}}class z{static sanitizeRadians(e){return(e+8*Math.PI)%(2*Math.PI)}static trueDelinearized(e){const t=e/100;let r=0;return r=t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,255*r}static chromaticAdaptation(e){const t=Math.pow(Math.abs(e),.42);return 400*n(e)*t/(t+27.13)}static hueOf(e){const t=h(e,z.SCALED_DISCOUNT_FROM_LINRGB),r=z.chromaticAdaptation(t[0]),n=z.chromaticAdaptation(t[1]),o=z.chromaticAdaptation(t[2]),a=(11*r+-12*n+o)/11,i=(r+n-2*o)/9;return Math.atan2(i,a)}static areInCyclicOrder(e,t,r){return z.sanitizeRadians(t-e)<z.sanitizeRadians(r-e)}static intercept(e,t,r){return(t-e)/(r-e)}static lerpPoint(e,t,r){return[e[0]+(r[0]-e[0])*t,e[1]+(r[1]-e[1])*t,e[2]+(r[2]-e[2])*t]}static setCoordinate(e,t,r,n){const o=z.intercept(e[n],t,r[n]);return z.lerpPoint(e,o,r)}static isBounded(e){return 0<=e&&e<=100}static nthVertex(e,t){const r=z.Y_FROM_LINRGB[0],n=z.Y_FROM_LINRGB[1],o=z.Y_FROM_LINRGB[2],a=t%4<=1?0:100,i=t%2==0?0:100;if(t<4){const t=a,s=i,c=(e-t*n-s*o)/r;return z.isBounded(c)?[c,t,s]:[-1,-1,-1]}if(t<8){const t=a,s=i,c=(e-s*r-t*o)/n;return z.isBounded(c)?[s,c,t]:[-1,-1,-1]}{const t=a,s=i,c=(e-t*r-s*n)/o;return z.isBounded(c)?[t,s,c]:[-1,-1,-1]}}static bisectToSegment(e,t){let r=[-1,-1,-1],n=r,o=0,a=0,i=!1,s=!0;for(let c=0;c<12;c++){const u=z.nthVertex(e,c);if(u[0]<0)continue;const l=z.hueOf(u);i?(s||z.areInCyclicOrder(o,l,a))&&(s=!1,z.areInCyclicOrder(o,t,l)?(n=u,a=l):(r=u,o=l)):(r=u,n=u,o=l,a=l,i=!0)}return[r,n]}static midpoint(e,t){return[(e[0]+t[0])/2,(e[1]+t[1])/2,(e[2]+t[2])/2]}static criticalPlaneBelow(e){return Math.floor(e-.5)}static criticalPlaneAbove(e){return Math.ceil(e-.5)}static bisectToLimit(e,t){const r=z.bisectToSegment(e,t);let n=r[0],o=z.hueOf(n),a=r[1];for(let e=0;e<3;e++)if(n[e]!==a[e]){let r=-1,i=255;n[e]<a[e]?(r=z.criticalPlaneBelow(z.trueDelinearized(n[e])),i=z.criticalPlaneAbove(z.trueDelinearized(a[e]))):(r=z.criticalPlaneAbove(z.trueDelinearized(n[e])),i=z.criticalPlaneBelow(z.trueDelinearized(a[e])));for(let s=0;s<8&&!(Math.abs(i-r)<=1);s++){const s=Math.floor((r+i)/2),c=z.CRITICAL_PLANES[s],u=z.setCoordinate(n,c,a,e),l=z.hueOf(u);z.areInCyclicOrder(o,t,l)?(a=u,i=s):(n=u,o=l,r=s)}}return z.midpoint(n,a)}static inverseChromaticAdaptation(e){const t=Math.abs(e),r=Math.max(0,27.13*t/(400-t));return n(e)*Math.pow(r,1/.42)}static findResultByJ(e,t,r){let n=11*Math.sqrt(r);const o=R.DEFAULT,a=1/Math.pow(1.64-Math.pow(.29,o.n),.73),i=.25*(Math.cos(e+2)+3.8)*(5e4/13)*o.nc*o.ncb,s=Math.sin(e),c=Math.cos(e);for(let e=0;e<5;e++){const u=n/100,l=0===t||0===n?0:t/Math.sqrt(u),f=Math.pow(l*a,1/.9),d=o.aw*Math.pow(u,1/o.c/o.z)/o.nbb,m=23*(d+.305)*f/(23*i+11*f*c+108*f*s),p=m*c,y=m*s,b=(460*d+451*p+288*y)/1403,v=(460*d-891*p-261*y)/1403,C=(460*d-220*p-6300*y)/1403,P=h([z.inverseChromaticAdaptation(b),z.inverseChromaticAdaptation(v),z.inverseChromaticAdaptation(C)],z.LINRGB_FROM_SCALED_DISCOUNT);if(P[0]<0||P[1]<0||P[2]<0)return 0;const w=z.Y_FROM_LINRGB[0],k=z.Y_FROM_LINRGB[1],x=z.Y_FROM_LINRGB[2],S=w*P[0]+k*P[1]+x*P[2];if(S<=0)return 0;if(4===e||Math.abs(S-r)<.002)return P[0]>100.01||P[1]>100.01||P[2]>100.01?0:g(P);n-=(S-r)*n/(2*S)}return 0}static solveToInt(e,t,r){if(t<1e-4||r<1e-4||r>99.9999)return M(r);const n=(e=c(e))/180*Math.PI,o=_(r),a=z.findResultByJ(n,t,o);return 0!==a?a:g(z.bisectToLimit(o,n))}static solveToCam(e,t,r){return L.fromInt(z.solveToInt(e,t,r))}}z.SCALED_DISCOUNT_FROM_LINRGB=[[.001200833568784504,.002389694492170889,.0002795742885861124],[.0005891086651375999,.0029785502573438758,.0003270666104008398],[.00010146692491640572,.0005364214359186694,.0032979401770712076]],z.LINRGB_FROM_SCALED_DISCOUNT=[[1373.2198709594231,-1100.4251190754821,-7.278681089101213],[-271.815969077903,559.6580465940733,-32.46047482791194],[1.9622899599665666,-57.173814538844006,308.7233197812385]],z.Y_FROM_LINRGB=[.2126,.7152,.0722],z.CRITICAL_PLANES=[.015176349177441876,.045529047532325624,.07588174588720938,.10623444424209313,.13658714259697685,.16693984095186062,.19729253930674434,.2276452376616281,.2579979360165119,.28835063437139563,.3188300904430532,.350925934958123,.3848314933096426,.42057480301049466,.458183274052838,.4976837250274023,.5391024159806381,.5824650784040898,.6277969426914107,.6751227633498623,.7244668422128921,.775853049866786,.829304845476233,.8848452951698498,.942497089126609,1.0022825574869039,1.0642236851973577,1.1283421258858297,1.1946592148522128,1.2631959812511864,1.3339731595349034,1.407011200216447,1.4823302800086415,1.5599503113873272,1.6398909516233677,1.7221716113234105,1.8068114625156377,1.8938294463134073,1.9832442801866852,2.075074464868551,2.1693382909216234,2.2660538449872063,2.36523901573795,2.4669114995532007,2.5710888059345764,2.6777882626779785,2.7870270208169257,2.898822059350997,3.0131901897720907,3.1301480604002863,3.2497121605402226,3.3718988244681087,3.4967242352587946,3.624204428461639,3.754355295633311,3.887192587735158,4.022731918402185,4.160988767090289,4.301978482107941,4.445716283538092,4.592217266055746,4.741496401646282,4.893568542229298,5.048448422192488,5.20615066083972,5.3666897647573375,5.5300801301023865,5.696336044816294,5.865471690767354,6.037501145825082,6.212438385869475,6.390297286737924,6.571091626112461,6.7548350853498045,6.941541251256611,7.131223617812143,7.323895587840543,7.5195704746346665,7.7182615035334345,7.919981813454504,8.124744458384042,8.332562408825165,8.543448553206703,8.757415699253682,8.974476575321063,9.194643831691977,9.417930041841839,9.644347703669503,9.873909240696694,10.106627003236781,10.342513269534024,10.58158024687427,10.8238400726681,11.069304815507364,11.317986476196008,11.569896988756009,11.825048221409341,12.083451977536606,12.345119996613247,12.610063955123938,12.878295467455942,13.149826086772048,13.42466730586372,13.702830557985108,13.984327217668513,14.269168601521828,14.55736596900856,14.848930523210871,15.143873411576273,15.44220572664832,15.743938506781891,16.04908273684337,16.35764934889634,16.66964922287304,16.985093187232053,17.30399201960269,17.62635644741625,17.95219714852476,18.281524751807332,18.614349837764564,18.95068293910138,19.290534541298456,19.633915083172692,19.98083495742689,20.331304511189067,20.685334046541502,21.042933821039977,21.404114048223256,21.76888489811322,22.137256497705877,22.50923893145328,22.884842241736916,23.264076429332462,23.6469514538663,24.033477234264016,24.42366364919083,24.817520537484558,25.21505769858089,25.61628489293138,26.021211842414342,26.429848230738664,26.842203703840827,27.258287870275353,27.678110301598522,28.10168053274597,28.529008062403893,28.96010235337422,29.39497283293396,29.83362889318845,30.276079891419332,30.722335150426627,31.172403958865512,31.62629557157785,32.08401920991837,32.54558406207592,33.010999283389665,33.4802739966603,33.953417292456834,34.430438229418264,34.911345834551085,35.39614910352207,35.88485700094671,36.37747846067349,36.87402238606382,37.37449765026789,37.87891309649659,38.38727753828926,38.89959975977785,39.41588851594697,39.93615253289054,40.460400508064545,40.98864111053629,41.520882981230194,42.05713473317016,42.597404951718396,43.141702194811224,43.6900349931913,44.24241185063697,44.798841244188324,45.35933162437017,45.92389141541209,46.49252901546552,47.065252796817916,47.64207110610409,48.22299226451468,48.808024568002054,49.3971762874833,49.9904556690408,50.587870934119984,51.189430279724725,51.79514187861014,52.40501387947288,53.0190544071392,53.637271562750364,54.259673423945976,54.88626804504493,55.517063457223934,56.15206766869424,56.79128866487574,57.43473440856916,58.08241284012621,58.734331877617365,59.39049941699807,60.05092333227251,60.715611475655585,61.38457167773311,62.057811747619894,62.7353394731159,63.417162620860914,64.10328893648692,64.79372614476921,65.48848194977529,66.18756403501224,66.89098006357258,67.59873767827808,68.31084450182222,69.02730813691093,69.74813616640164,70.47333615344107,71.20291564160104,71.93688215501312,72.67524319850172,73.41800625771542,74.16517879925733,74.9167682708136,75.67278210128072,76.43322770089146,77.1981124613393,77.96744375590167,78.74122893956174,79.51947534912904,80.30219030335869,81.08938110306934,81.88105503125999,82.67721935322541,83.4778813166706,84.28304815182372,85.09272707154808,85.90692527145302,86.72564993000343,87.54890820862819,88.3767072518277,89.2090541872801,90.04595612594655,90.88742016217518,91.73345337380438,92.58406282226491,93.43925555268066,94.29903859396902,95.16341895893969,96.03240364439274,96.9059996312159,97.78421388448044,98.6670533535366,99.55452497210776];class ${static from(e,t,r){return new $(z.solveToInt(e,t,r))}static fromInt(e){return new $(e)}toInt(){return this.argb}get hue(){return this.internalHue}set hue(e){this.setInternalState(z.solveToInt(e,this.internalChroma,this.internalTone))}get chroma(){return this.internalChroma}set chroma(e){this.setInternalState(z.solveToInt(this.internalHue,e,this.internalTone))}get tone(){return this.internalTone}set tone(e){this.setInternalState(z.solveToInt(this.internalHue,this.internalChroma,e))}constructor(e){this.argb=e;const t=L.fromInt(e);this.internalHue=t.hue,this.internalChroma=t.chroma,this.internalTone=O(e),this.argb=e}setInternalState(e){const t=L.fromInt(e);this.internalHue=t.hue,this.internalChroma=t.chroma,this.internalTone=O(e),this.argb=e}inViewingConditions(e){const t=L.fromInt(this.toInt()).xyzInViewingConditions(e),r=L.fromXyzInViewingConditions(t[0],t[1],t[2],R.make());return $.from(r.hue,r.chroma,A(t[1]))}}class V{static harmonize(e,t){const r=$.fromInt(e),n=$.fromInt(t),o=l(r.hue,n.hue),a=Math.min(.5*o,15),i=c(r.hue+a*u(r.hue,n.hue));return $.from(i,r.chroma,r.tone).toInt()}static hctHue(e,t,r){const n=V.cam16Ucs(e,t,r),o=L.fromInt(n),a=L.fromInt(e);return $.from(o.hue,a.chroma,O(e)).toInt()}static cam16Ucs(e,t,r){const n=L.fromInt(e),o=L.fromInt(t),a=n.jstar,i=n.astar,s=n.bstar,c=a+(o.jstar-a)*r,u=i+(o.astar-i)*r,l=s+(o.bstar-s)*r;return L.fromUcs(c,u,l).toInt()}}class N{static ratioOfTones(e,t){return e=i(0,100,e),t=i(0,100,t),N.ratioOfYs(_(e),_(t))}static ratioOfYs(e,t){const r=e>t?e:t;return(r+5)/((r===t?e:t)+5)}static lighter(e,t){if(e<0||e>100)return-1;const r=_(e),n=t*(r+5)-5,o=N.ratioOfYs(n,r),a=Math.abs(o-t);if(o<t&&a>.04)return-1;const i=A(n)+.4;return i<0||i>100?-1:i}static darker(e,t){if(e<0||e>100)return-1;const r=_(e),n=(r+5)/t-5,o=N.ratioOfYs(r,n),a=Math.abs(o-t);if(o<t&&a>.04)return-1;const i=A(n)-.4;return i<0||i>100?-1:i}static lighterUnsafe(e,t){const r=N.lighter(e,t);return r<0?100:r}static darkerUnsafe(e,t){const r=N.darker(e,t);return r<0?0:r}}class G{static isDisliked(e){const t=Math.round(e.hue)>=90&&Math.round(e.hue)<=111,r=Math.round(e.chroma)>16,n=Math.round(e.tone)<65;return t&&r&&n}static fixIfDisliked(e){return G.isDisliked(e)?$.from(e.hue,e.chroma,70):e}}class q{static fromPalette(e){return new q(e.name??"",e.palette,e.tone,e.isBackground??!1,e.background,e.secondBackground,e.contrastCurve,e.toneDeltaPair)}constructor(e,t,r,n,o,a,i,s){if(this.name=e,this.palette=t,this.tone=r,this.isBackground=n,this.background=o,this.secondBackground=a,this.contrastCurve=i,this.toneDeltaPair=s,this.hctCache=new Map,!o&&a)throw new Error(`Color ${e} has secondBackgrounddefined, but background is not defined.`);if(!o&&i)throw new Error(`Color ${e} has contrastCurvedefined, but background is not defined.`);if(o&&!i)throw new Error(`Color ${e} has backgrounddefined, but contrastCurve is not defined.`)}getArgb(e){return this.getHct(e).toInt()}getHct(e){const t=this.hctCache.get(e);if(null!=t)return t;const r=this.getTone(e),n=this.palette(e).getHct(r);return this.hctCache.size>4&&this.hctCache.clear(),this.hctCache.set(e,n),n}getTone(e){const t=e.contrastLevel<0;if(this.toneDeltaPair){const r=this.toneDeltaPair(e),n=r.roleA,o=r.roleB,a=r.delta,s=r.polarity,c=r.stayTogether,u=this.background(e).getTone(e),l="nearer"===s||"lighter"===s&&!e.isDark||"darker"===s&&e.isDark,h=l?n:o,f=l?o:n,d=this.name===h.name,m=e.isDark?1:-1,p=h.contrastCurve.getContrast(e.contrastLevel),g=f.contrastCurve.getContrast(e.contrastLevel),y=h.tone(e);let b=N.ratioOfTones(u,y)>=p?y:q.foregroundTone(u,p);const v=f.tone(e);let C=N.ratioOfTones(u,v)>=g?v:q.foregroundTone(u,g);return t&&(b=q.foregroundTone(u,p),C=q.foregroundTone(u,g)),(C-b)*m>=a||(C=i(0,100,b+a*m),(C-b)*m>=a||(b=i(0,100,C-a*m))),50<=b&&b<60?m>0?(b=60,C=Math.max(C,b+a*m)):(b=49,C=Math.min(C,b+a*m)):50<=C&&C<60&&(c?m>0?(b=60,C=Math.max(C,b+a*m)):(b=49,C=Math.min(C,b+a*m)):C=m>0?60:49),d?b:C}{let r=this.tone(e);if(null==this.background)return r;const n=this.background(e).getTone(e),o=this.contrastCurve.getContrast(e.contrastLevel);if(N.ratioOfTones(n,r)>=o||(r=q.foregroundTone(n,o)),t&&(r=q.foregroundTone(n,o)),this.isBackground&&50<=r&&r<60&&(r=N.ratioOfTones(49,n)>=o?49:60),this.secondBackground){const[t,n]=[this.background,this.secondBackground],[a,i]=[t(e).getTone(e),n(e).getTone(e)],[s,c]=[Math.max(a,i),Math.min(a,i)];if(N.ratioOfTones(s,r)>=o&&N.ratioOfTones(c,r)>=o)return r;const u=N.lighter(s,o),l=N.darker(c,o),h=[];return-1!==u&&h.push(u),-1!==l&&h.push(l),q.tonePrefersLightForeground(a)||q.tonePrefersLightForeground(i)?u<0?100:u:1===h.length?h[0]:l<0?0:l}return r}}static foregroundTone(e,t){const r=N.lighterUnsafe(e,t),n=N.darkerUnsafe(e,t),o=N.ratioOfTones(r,e),a=N.ratioOfTones(n,e);if(q.tonePrefersLightForeground(e)){const e=Math.abs(o-a)<.1&&o<t&&a<t;return o>=t||o>=a||e?r:n}return a>=t||a>=o?n:r}static tonePrefersLightForeground(e){return Math.round(e)<60}static toneAllowsLightForeground(e){return Math.round(e)<=49}static enableLightForeground(e){return q.tonePrefersLightForeground(e)&&!q.toneAllowsLightForeground(e)?49:e}}var W;!function(e){e[e.MONOCHROME=0]="MONOCHROME",e[e.NEUTRAL=1]="NEUTRAL",e[e.TONAL_SPOT=2]="TONAL_SPOT",e[e.VIBRANT=3]="VIBRANT",e[e.EXPRESSIVE=4]="EXPRESSIVE",e[e.FIDELITY=5]="FIDELITY",e[e.CONTENT=6]="CONTENT",e[e.RAINBOW=7]="RAINBOW",e[e.FRUIT_SALAD=8]="FRUIT_SALAD"}(W||(W={}));class U{constructor(e,t,r,n){this.low=e,this.normal=t,this.medium=r,this.high=n}getContrast(e){return e<=-1?this.low:e<0?o(this.low,this.normal,(e- -1)/1):e<.5?o(this.normal,this.medium,(e-0)/.5):e<1?o(this.medium,this.high,(e-.5)/.5):this.high}}class Y{constructor(e,t,r,n,o){this.roleA=e,this.roleB=t,this.delta=r,this.polarity=n,this.stayTogether=o}}function J(e){return e.variant===W.FIDELITY||e.variant===W.CONTENT}function X(e){return e.variant===W.MONOCHROME}function K(e,t){const r=e.inViewingConditions(function(e){return R.make(void 0,void 0,e.isDark?30:80,void 0,void 0)}(t));return q.tonePrefersLightForeground(e.tone)&&!q.toneAllowsLightForeground(r.tone)?q.enableLightForeground(e.tone):q.enableLightForeground(r.tone)}class Z{static highestSurface(e){return e.isDark?Z.surfaceBright:Z.surfaceDim}}Z.contentAccentToneDelta=15,Z.primaryPaletteKeyColor=q.fromPalette({name:"primary_palette_key_color",palette:e=>e.primaryPalette,tone:e=>e.primaryPalette.keyColor.tone}),Z.secondaryPaletteKeyColor=q.fromPalette({name:"secondary_palette_key_color",palette:e=>e.secondaryPalette,tone:e=>e.secondaryPalette.keyColor.tone}),Z.tertiaryPaletteKeyColor=q.fromPalette({name:"tertiary_palette_key_color",palette:e=>e.tertiaryPalette,tone:e=>e.tertiaryPalette.keyColor.tone}),Z.neutralPaletteKeyColor=q.fromPalette({name:"neutral_palette_key_color",palette:e=>e.neutralPalette,tone:e=>e.neutralPalette.keyColor.tone}),Z.neutralVariantPaletteKeyColor=q.fromPalette({name:"neutral_variant_palette_key_color",palette:e=>e.neutralVariantPalette,tone:e=>e.neutralVariantPalette.keyColor.tone}),Z.background=q.fromPalette({name:"background",palette:e=>e.neutralPalette,tone:e=>e.isDark?6:98,isBackground:!0}),Z.onBackground=q.fromPalette({name:"on_background",palette:e=>e.neutralPalette,tone:e=>e.isDark?90:10,background:e=>Z.background,contrastCurve:new U(3,3,4.5,7)}),Z.surface=q.fromPalette({name:"surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?6:98,isBackground:!0}),Z.surfaceDim=q.fromPalette({name:"surface_dim",palette:e=>e.neutralPalette,tone:e=>e.isDark?6:87,isBackground:!0}),Z.surfaceBright=q.fromPalette({name:"surface_bright",palette:e=>e.neutralPalette,tone:e=>e.isDark?24:98,isBackground:!0}),Z.surfaceContainerLowest=q.fromPalette({name:"surface_container_lowest",palette:e=>e.neutralPalette,tone:e=>e.isDark?4:100,isBackground:!0}),Z.surfaceContainerLow=q.fromPalette({name:"surface_container_low",palette:e=>e.neutralPalette,tone:e=>e.isDark?10:96,isBackground:!0}),Z.surfaceContainer=q.fromPalette({name:"surface_container",palette:e=>e.neutralPalette,tone:e=>e.isDark?12:94,isBackground:!0}),Z.surfaceContainerHigh=q.fromPalette({name:"surface_container_high",palette:e=>e.neutralPalette,tone:e=>e.isDark?17:92,isBackground:!0}),Z.surfaceContainerHighest=q.fromPalette({name:"surface_container_highest",palette:e=>e.neutralPalette,tone:e=>e.isDark?22:90,isBackground:!0}),Z.onSurface=q.fromPalette({name:"on_surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?90:10,background:e=>Z.highestSurface(e),contrastCurve:new U(4.5,7,11,21)}),Z.surfaceVariant=q.fromPalette({name:"surface_variant",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?30:90,isBackground:!0}),Z.onSurfaceVariant=q.fromPalette({name:"on_surface_variant",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?80:30,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11)}),Z.inverseSurface=q.fromPalette({name:"inverse_surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?90:20}),Z.inverseOnSurface=q.fromPalette({name:"inverse_on_surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?20:95,background:e=>Z.inverseSurface,contrastCurve:new U(4.5,7,11,21)}),Z.outline=q.fromPalette({name:"outline",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?60:50,background:e=>Z.highestSurface(e),contrastCurve:new U(1.5,3,4.5,7)}),Z.outlineVariant=q.fromPalette({name:"outline_variant",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?30:80,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7)}),Z.shadow=q.fromPalette({name:"shadow",palette:e=>e.neutralPalette,tone:e=>0}),Z.scrim=q.fromPalette({name:"scrim",palette:e=>e.neutralPalette,tone:e=>0}),Z.surfaceTint=q.fromPalette({name:"surface_tint",palette:e=>e.primaryPalette,tone:e=>e.isDark?80:40,isBackground:!0}),Z.primary=q.fromPalette({name:"primary",palette:e=>e.primaryPalette,tone:e=>X(e)?e.isDark?100:0:e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.primaryContainer,Z.primary,15,"nearer",!1)}),Z.onPrimary=q.fromPalette({name:"on_primary",palette:e=>e.primaryPalette,tone:e=>X(e)?e.isDark?10:90:e.isDark?20:100,background:e=>Z.primary,contrastCurve:new U(4.5,7,11,21)}),Z.primaryContainer=q.fromPalette({name:"primary_container",palette:e=>e.primaryPalette,tone:e=>J(e)?K(e.sourceColorHct,e):X(e)?e.isDark?85:25:e.isDark?30:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.primaryContainer,Z.primary,15,"nearer",!1)}),Z.onPrimaryContainer=q.fromPalette({name:"on_primary_container",palette:e=>e.primaryPalette,tone:e=>J(e)?q.foregroundTone(Z.primaryContainer.tone(e),4.5):X(e)?e.isDark?0:100:e.isDark?90:10,background:e=>Z.primaryContainer,contrastCurve:new U(4.5,7,11,21)}),Z.inversePrimary=q.fromPalette({name:"inverse_primary",palette:e=>e.primaryPalette,tone:e=>e.isDark?40:80,background:e=>Z.inverseSurface,contrastCurve:new U(3,4.5,7,11)}),Z.secondary=q.fromPalette({name:"secondary",palette:e=>e.secondaryPalette,tone:e=>e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.secondaryContainer,Z.secondary,15,"nearer",!1)}),Z.onSecondary=q.fromPalette({name:"on_secondary",palette:e=>e.secondaryPalette,tone:e=>X(e)?e.isDark?10:100:e.isDark?20:100,background:e=>Z.secondary,contrastCurve:new U(4.5,7,11,21)}),Z.secondaryContainer=q.fromPalette({name:"secondary_container",palette:e=>e.secondaryPalette,tone:e=>{const t=e.isDark?30:90;if(X(e))return e.isDark?30:85;if(!J(e))return t;let r=function(e,t,r,n){let o=r,a=$.from(e,t,r);if(a.chroma<t){let r=a.chroma;for(;a.chroma<t;){o+=n?-1:1;const i=$.from(e,t,o);if(r>i.chroma)break;if(Math.abs(i.chroma-t)<.4)break;Math.abs(i.chroma-t)<Math.abs(a.chroma-t)&&(a=i),r=Math.max(r,i.chroma)}}return o}(e.secondaryPalette.hue,e.secondaryPalette.chroma,t,!e.isDark);return r=K(e.secondaryPalette.getHct(r),e),r},isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.secondaryContainer,Z.secondary,15,"nearer",!1)}),Z.onSecondaryContainer=q.fromPalette({name:"on_secondary_container",palette:e=>e.secondaryPalette,tone:e=>J(e)?q.foregroundTone(Z.secondaryContainer.tone(e),4.5):e.isDark?90:10,background:e=>Z.secondaryContainer,contrastCurve:new U(4.5,7,11,21)}),Z.tertiary=q.fromPalette({name:"tertiary",palette:e=>e.tertiaryPalette,tone:e=>X(e)?e.isDark?90:25:e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.tertiaryContainer,Z.tertiary,15,"nearer",!1)}),Z.onTertiary=q.fromPalette({name:"on_tertiary",palette:e=>e.tertiaryPalette,tone:e=>X(e)?e.isDark?10:90:e.isDark?20:100,background:e=>Z.tertiary,contrastCurve:new U(4.5,7,11,21)}),Z.tertiaryContainer=q.fromPalette({name:"tertiary_container",palette:e=>e.tertiaryPalette,tone:e=>{if(X(e))return e.isDark?60:49;if(!J(e))return e.isDark?30:90;const t=K(e.tertiaryPalette.getHct(e.sourceColorHct.tone),e),r=e.tertiaryPalette.getHct(t);return G.fixIfDisliked(r).tone},isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.tertiaryContainer,Z.tertiary,15,"nearer",!1)}),Z.onTertiaryContainer=q.fromPalette({name:"on_tertiary_container",palette:e=>e.tertiaryPalette,tone:e=>X(e)?e.isDark?0:100:J(e)?q.foregroundTone(Z.tertiaryContainer.tone(e),4.5):e.isDark?90:10,background:e=>Z.tertiaryContainer,contrastCurve:new U(4.5,7,11,21)}),Z.error=q.fromPalette({name:"error",palette:e=>e.errorPalette,tone:e=>e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.errorContainer,Z.error,15,"nearer",!1)}),Z.onError=q.fromPalette({name:"on_error",palette:e=>e.errorPalette,tone:e=>e.isDark?20:100,background:e=>Z.error,contrastCurve:new U(4.5,7,11,21)}),Z.errorContainer=q.fromPalette({name:"error_container",palette:e=>e.errorPalette,tone:e=>e.isDark?30:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.errorContainer,Z.error,15,"nearer",!1)}),Z.onErrorContainer=q.fromPalette({name:"on_error_container",palette:e=>e.errorPalette,tone:e=>e.isDark?90:10,background:e=>Z.errorContainer,contrastCurve:new U(4.5,7,11,21)}),Z.primaryFixed=q.fromPalette({name:"primary_fixed",palette:e=>e.primaryPalette,tone:e=>X(e)?40:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.primaryFixed,Z.primaryFixedDim,10,"lighter",!0)}),Z.primaryFixedDim=q.fromPalette({name:"primary_fixed_dim",palette:e=>e.primaryPalette,tone:e=>X(e)?30:80,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.primaryFixed,Z.primaryFixedDim,10,"lighter",!0)}),Z.onPrimaryFixed=q.fromPalette({name:"on_primary_fixed",palette:e=>e.primaryPalette,tone:e=>X(e)?100:10,background:e=>Z.primaryFixedDim,secondBackground:e=>Z.primaryFixed,contrastCurve:new U(4.5,7,11,21)}),Z.onPrimaryFixedVariant=q.fromPalette({name:"on_primary_fixed_variant",palette:e=>e.primaryPalette,tone:e=>X(e)?90:30,background:e=>Z.primaryFixedDim,secondBackground:e=>Z.primaryFixed,contrastCurve:new U(3,4.5,7,11)}),Z.secondaryFixed=q.fromPalette({name:"secondary_fixed",palette:e=>e.secondaryPalette,tone:e=>X(e)?80:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.secondaryFixed,Z.secondaryFixedDim,10,"lighter",!0)}),Z.secondaryFixedDim=q.fromPalette({name:"secondary_fixed_dim",palette:e=>e.secondaryPalette,tone:e=>X(e)?70:80,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.secondaryFixed,Z.secondaryFixedDim,10,"lighter",!0)}),Z.onSecondaryFixed=q.fromPalette({name:"on_secondary_fixed",palette:e=>e.secondaryPalette,tone:e=>10,background:e=>Z.secondaryFixedDim,secondBackground:e=>Z.secondaryFixed,contrastCurve:new U(4.5,7,11,21)}),Z.onSecondaryFixedVariant=q.fromPalette({name:"on_secondary_fixed_variant",palette:e=>e.secondaryPalette,tone:e=>X(e)?25:30,background:e=>Z.secondaryFixedDim,secondBackground:e=>Z.secondaryFixed,contrastCurve:new U(3,4.5,7,11)}),Z.tertiaryFixed=q.fromPalette({name:"tertiary_fixed",palette:e=>e.tertiaryPalette,tone:e=>X(e)?40:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.tertiaryFixed,Z.tertiaryFixedDim,10,"lighter",!0)}),Z.tertiaryFixedDim=q.fromPalette({name:"tertiary_fixed_dim",palette:e=>e.tertiaryPalette,tone:e=>X(e)?30:80,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.tertiaryFixed,Z.tertiaryFixedDim,10,"lighter",!0)}),Z.onTertiaryFixed=q.fromPalette({name:"on_tertiary_fixed",palette:e=>e.tertiaryPalette,tone:e=>X(e)?100:10,background:e=>Z.tertiaryFixedDim,secondBackground:e=>Z.tertiaryFixed,contrastCurve:new U(4.5,7,11,21)}),Z.onTertiaryFixedVariant=q.fromPalette({name:"on_tertiary_fixed_variant",palette:e=>e.tertiaryPalette,tone:e=>X(e)?90:30,background:e=>Z.tertiaryFixedDim,secondBackground:e=>Z.tertiaryFixed,contrastCurve:new U(3,4.5,7,11)});class Q{static fromInt(e){const t=$.fromInt(e);return Q.fromHct(t)}static fromHct(e){return new Q(e.hue,e.chroma,e)}static fromHueAndChroma(e,t){return new Q(e,t,Q.createKeyColor(e,t))}constructor(e,t,r){this.hue=e,this.chroma=t,this.keyColor=r,this.cache=new Map}static createKeyColor(e,t){let r=$.from(e,t,50),n=Math.abs(r.chroma-t);for(let o=1;o<50;o+=1){if(Math.round(t)===Math.round(r.chroma))return r;const a=$.from(e,t,50+o),i=Math.abs(a.chroma-t);i<n&&(n=i,r=a);const s=$.from(e,t,50-o),c=Math.abs(s.chroma-t);c<n&&(n=c,r=s)}return r}tone(e){let t=this.cache.get(e);return void 0===t&&(t=$.from(this.hue,this.chroma,e).toInt(),this.cache.set(e,t)),t}getHct(e){return $.fromInt(this.tone(e))}}class ee{static of(e){return new ee(e,!1)}static contentOf(e){return new ee(e,!0)}static fromColors(e){return ee.createPaletteFromColors(!1,e)}static contentFromColors(e){return ee.createPaletteFromColors(!0,e)}static createPaletteFromColors(e,t){const r=new ee(t.primary,e);if(t.secondary){const n=new ee(t.secondary,e);r.a2=n.a1}if(t.tertiary){const n=new ee(t.tertiary,e);r.a3=n.a1}if(t.error){const n=new ee(t.error,e);r.error=n.a1}if(t.neutral){const n=new ee(t.neutral,e);r.n1=n.n1}if(t.neutralVariant){const n=new ee(t.neutralVariant,e);r.n2=n.n2}return r}constructor(e,t){const r=$.fromInt(e),n=r.hue,o=r.chroma;t?(this.a1=Q.fromHueAndChroma(n,o),this.a2=Q.fromHueAndChroma(n,o/3),this.a3=Q.fromHueAndChroma(n+60,o/2),this.n1=Q.fromHueAndChroma(n,Math.min(o/12,4)),this.n2=Q.fromHueAndChroma(n,Math.min(o/6,8))):(this.a1=Q.fromHueAndChroma(n,Math.max(48,o)),this.a2=Q.fromHueAndChroma(n,16),this.a3=Q.fromHueAndChroma(n+60,24),this.n1=Q.fromHueAndChroma(n,4),this.n2=Q.fromHueAndChroma(n,8)),this.error=Q.fromHueAndChroma(25,84)}}class te{fromInt(e){return S(e)}toInt(e){return x(e[0],e[1],e[2])}distance(e,t){const r=e[0]-t[0],n=e[1]-t[1],o=e[2]-t[2];return r*r+n*n+o*o}}class re{static quantize(e,t,r){const n=new Map,o=new Array,a=new Array,i=new te;let s=0;for(let t=0;t<e.length;t++){const r=e[t],c=n.get(r);void 0===c?(s++,o.push(i.fromInt(r)),a.push(r),n.set(r,1)):n.set(r,c+1)}const c=new Array;for(let e=0;e<s;e++){const t=a[e],r=n.get(t);void 0!==r&&(c[e]=r)}let u=Math.min(r,s);t.length>0&&(u=Math.min(u,t.length));const l=new Array;for(let e=0;e<t.length;e++)l.push(i.fromInt(t[e]));const h=u-l.length;if(0===t.length&&h>0)for(let e=0;e<h;e++){const e=100*Math.random(),t=201*Math.random()-100,r=201*Math.random()-100;l.push(new Array(e,t,r))}const f=new Array;for(let e=0;e<s;e++)f.push(Math.floor(Math.random()*u));const d=new Array;for(let e=0;e<u;e++){d.push(new Array);for(let t=0;t<u;t++)d[e].push(0)}const m=new Array;for(let e=0;e<u;e++){m.push(new Array);for(let t=0;t<u;t++)m[e].push(new ne)}const p=new Array;for(let e=0;e<u;e++)p.push(0);for(let e=0;e<10;e++){for(let e=0;e<u;e++){for(let t=e+1;t<u;t++){const r=i.distance(l[e],l[t]);m[t][e].distance=r,m[t][e].index=e,m[e][t].distance=r,m[e][t].index=t}m[e].sort();for(let t=0;t<u;t++)d[e][t]=m[e][t].index}let t=0;for(let e=0;e<s;e++){const r=o[e],n=f[e],a=l[n],s=i.distance(r,a);let c=s,h=-1;for(let e=0;e<u;e++){if(m[n][e].distance>=4*s)continue;const t=i.distance(r,l[e]);t<c&&(c=t,h=e)}-1!==h&&Math.abs(Math.sqrt(c)-Math.sqrt(s))>3&&(t++,f[e]=h)}if(0===t&&0!==e)break;const r=new Array(u).fill(0),n=new Array(u).fill(0),a=new Array(u).fill(0);for(let e=0;e<u;e++)p[e]=0;for(let e=0;e<s;e++){const t=f[e],i=o[e],s=c[e];p[t]+=s,r[t]+=i[0]*s,n[t]+=i[1]*s,a[t]+=i[2]*s}for(let e=0;e<u;e++){const t=p[e];if(0===t){l[e]=[0,0,0];continue}const o=r[e]/t,i=n[e]/t,s=a[e]/t;l[e]=[o,i,s]}}const g=new Map;for(let e=0;e<u;e++){const t=p[e];if(0===t)continue;const r=i.toInt(l[e]);g.has(r)||g.set(r,t)}return g}}class ne{constructor(){this.distance=-1,this.index=-1}}class oe{static quantize(e){const t=new Map;for(let r=0;r<e.length;r++){const n=e[r];y(n)<255||t.set(n,(t.get(n)??0)+1)}return t}}const ae=33,ie=35937,se="red",ce="green",ue="blue";class le{constructor(e=[],t=[],r=[],n=[],o=[],a=[]){this.weights=e,this.momentsR=t,this.momentsG=r,this.momentsB=n,this.moments=o,this.cubes=a}quantize(e,t){this.constructHistogram(e),this.computeMoments();const r=this.createBoxes(t);return this.createResult(r.resultCount)}constructHistogram(e){this.weights=Array.from({length:ie}).fill(0),this.momentsR=Array.from({length:ie}).fill(0),this.momentsG=Array.from({length:ie}).fill(0),this.momentsB=Array.from({length:ie}).fill(0),this.moments=Array.from({length:ie}).fill(0);const t=oe.quantize(e);for(const[e,r]of t.entries()){const t=b(e),n=v(e),o=C(e),a=3,i=1+(t>>a),s=1+(n>>a),c=1+(o>>a),u=this.getIndex(i,s,c);this.weights[u]=(this.weights[u]??0)+r,this.momentsR[u]+=r*t,this.momentsG[u]+=r*n,this.momentsB[u]+=r*o,this.moments[u]+=r*(t*t+n*n+o*o)}}computeMoments(){for(let e=1;e<ae;e++){const t=Array.from({length:ae}).fill(0),r=Array.from({length:ae}).fill(0),n=Array.from({length:ae}).fill(0),o=Array.from({length:ae}).fill(0),a=Array.from({length:ae}).fill(0);for(let i=1;i<ae;i++){let s=0,c=0,u=0,l=0,h=0;for(let f=1;f<ae;f++){const d=this.getIndex(e,i,f);s+=this.weights[d],c+=this.momentsR[d],u+=this.momentsG[d],l+=this.momentsB[d],h+=this.moments[d],t[f]+=s,r[f]+=c,n[f]+=u,o[f]+=l,a[f]+=h;const m=this.getIndex(e-1,i,f);this.weights[d]=this.weights[m]+t[f],this.momentsR[d]=this.momentsR[m]+r[f],this.momentsG[d]=this.momentsG[m]+n[f],this.momentsB[d]=this.momentsB[m]+o[f],this.moments[d]=this.moments[m]+a[f]}}}}createBoxes(e){this.cubes=Array.from({length:e}).fill(0).map((()=>new he));const t=Array.from({length:e}).fill(0);this.cubes[0].r0=0,this.cubes[0].g0=0,this.cubes[0].b0=0,this.cubes[0].r1=32,this.cubes[0].g1=32,this.cubes[0].b1=32;let r=e,n=0;for(let o=1;o<e;o++){this.cut(this.cubes[n],this.cubes[o])?(t[n]=this.cubes[n].vol>1?this.variance(this.cubes[n]):0,t[o]=this.cubes[o].vol>1?this.variance(this.cubes[o]):0):(t[n]=0,o--),n=0;let e=t[0];for(let r=1;r<=o;r++)t[r]>e&&(e=t[r],n=r);if(e<=0){r=o+1;break}}return new fe(e,r)}createResult(e){const t=[];for(let r=0;r<e;++r){const e=this.cubes[r],n=this.volume(e,this.weights);if(n>0){const r=255<<24|(255&Math.round(this.volume(e,this.momentsR)/n))<<16|(255&Math.round(this.volume(e,this.momentsG)/n))<<8|255&Math.round(this.volume(e,this.momentsB)/n);t.push(r)}}return t}variance(e){const t=this.volume(e,this.momentsR),r=this.volume(e,this.momentsG),n=this.volume(e,this.momentsB);return this.moments[this.getIndex(e.r1,e.g1,e.b1)]-this.moments[this.getIndex(e.r1,e.g1,e.b0)]-this.moments[this.getIndex(e.r1,e.g0,e.b1)]+this.moments[this.getIndex(e.r1,e.g0,e.b0)]-this.moments[this.getIndex(e.r0,e.g1,e.b1)]+this.moments[this.getIndex(e.r0,e.g1,e.b0)]+this.moments[this.getIndex(e.r0,e.g0,e.b1)]-this.moments[this.getIndex(e.r0,e.g0,e.b0)]-(t*t+r*r+n*n)/this.volume(e,this.weights)}cut(e,t){const r=this.volume(e,this.momentsR),n=this.volume(e,this.momentsG),o=this.volume(e,this.momentsB),a=this.volume(e,this.weights),i=this.maximize(e,se,e.r0+1,e.r1,r,n,o,a),s=this.maximize(e,ce,e.g0+1,e.g1,r,n,o,a),c=this.maximize(e,ue,e.b0+1,e.b1,r,n,o,a);let u;const l=i.maximum,h=s.maximum,f=c.maximum;if(l>=h&&l>=f){if(i.cutLocation<0)return!1;u=se}else u=h>=l&&h>=f?ce:ue;switch(t.r1=e.r1,t.g1=e.g1,t.b1=e.b1,u){case se:e.r1=i.cutLocation,t.r0=e.r1,t.g0=e.g0,t.b0=e.b0;break;case ce:e.g1=s.cutLocation,t.r0=e.r0,t.g0=e.g1,t.b0=e.b0;break;case ue:e.b1=c.cutLocation,t.r0=e.r0,t.g0=e.g0,t.b0=e.b1;break;default:throw new Error("unexpected direction "+u)}return e.vol=(e.r1-e.r0)*(e.g1-e.g0)*(e.b1-e.b0),t.vol=(t.r1-t.r0)*(t.g1-t.g0)*(t.b1-t.b0),!0}maximize(e,t,r,n,o,a,i,s){const c=this.bottom(e,t,this.momentsR),u=this.bottom(e,t,this.momentsG),l=this.bottom(e,t,this.momentsB),h=this.bottom(e,t,this.weights);let f=0,d=-1,m=0,p=0,g=0,y=0;for(let b=r;b<n;b++){if(m=c+this.top(e,t,b,this.momentsR),p=u+this.top(e,t,b,this.momentsG),g=l+this.top(e,t,b,this.momentsB),y=h+this.top(e,t,b,this.weights),0===y)continue;let r=1*(m*m+p*p+g*g),n=1*y,v=r/n;m=o-m,p=a-p,g=i-g,y=s-y,0!==y&&(r=1*(m*m+p*p+g*g),n=1*y,v+=r/n,v>f&&(f=v,d=b))}return new de(d,f)}volume(e,t){return t[this.getIndex(e.r1,e.g1,e.b1)]-t[this.getIndex(e.r1,e.g1,e.b0)]-t[this.getIndex(e.r1,e.g0,e.b1)]+t[this.getIndex(e.r1,e.g0,e.b0)]-t[this.getIndex(e.r0,e.g1,e.b1)]+t[this.getIndex(e.r0,e.g1,e.b0)]+t[this.getIndex(e.r0,e.g0,e.b1)]-t[this.getIndex(e.r0,e.g0,e.b0)]}bottom(e,t,r){switch(t){case se:return-r[this.getIndex(e.r0,e.g1,e.b1)]+r[this.getIndex(e.r0,e.g1,e.b0)]+r[this.getIndex(e.r0,e.g0,e.b1)]-r[this.getIndex(e.r0,e.g0,e.b0)];case ce:return-r[this.getIndex(e.r1,e.g0,e.b1)]+r[this.getIndex(e.r1,e.g0,e.b0)]+r[this.getIndex(e.r0,e.g0,e.b1)]-r[this.getIndex(e.r0,e.g0,e.b0)];case ue:return-r[this.getIndex(e.r1,e.g1,e.b0)]+r[this.getIndex(e.r1,e.g0,e.b0)]+r[this.getIndex(e.r0,e.g1,e.b0)]-r[this.getIndex(e.r0,e.g0,e.b0)];default:throw new Error("unexpected direction $direction")}}top(e,t,r,n){switch(t){case se:return n[this.getIndex(r,e.g1,e.b1)]-n[this.getIndex(r,e.g1,e.b0)]-n[this.getIndex(r,e.g0,e.b1)]+n[this.getIndex(r,e.g0,e.b0)];case ce:return n[this.getIndex(e.r1,r,e.b1)]-n[this.getIndex(e.r1,r,e.b0)]-n[this.getIndex(e.r0,r,e.b1)]+n[this.getIndex(e.r0,r,e.b0)];case ue:return n[this.getIndex(e.r1,e.g1,r)]-n[this.getIndex(e.r1,e.g0,r)]-n[this.getIndex(e.r0,e.g1,r)]+n[this.getIndex(e.r0,e.g0,r)];default:throw new Error("unexpected direction $direction")}}getIndex(e,t,r){return(e<<10)+(e<<6)+e+(t<<5)+t+r}}class he{constructor(e=0,t=0,r=0,n=0,o=0,a=0,i=0){this.r0=e,this.r1=t,this.g0=r,this.g1=n,this.b0=o,this.b1=a,this.vol=i}}class fe{constructor(e,t){this.requestedCount=e,this.resultCount=t}}class de{constructor(e,t){this.cutLocation=e,this.maximum=t}}class me{static quantize(e,t){const r=(new le).quantize(e,t);return re.quantize(e,r,t)}}class pe{constructor(e){this.sourceColorArgb=e.sourceColorArgb,this.variant=e.variant,this.contrastLevel=e.contrastLevel,this.isDark=e.isDark,this.sourceColorHct=$.fromInt(e.sourceColorArgb),this.primaryPalette=e.primaryPalette,this.secondaryPalette=e.secondaryPalette,this.tertiaryPalette=e.tertiaryPalette,this.neutralPalette=e.neutralPalette,this.neutralVariantPalette=e.neutralVariantPalette,this.errorPalette=Q.fromHueAndChroma(25,84)}static getRotatedHue(e,t,r){const n=e.hue;if(t.length!==r.length)throw new Error(`mismatch between hue length ${t.length} & rotations ${r.length}`);if(1===r.length)return c(e.hue+r[0]);const o=t.length;for(let e=0;e<=o-2;e++){const o=t[e],a=t[e+1];if(o<n&&n<a)return c(n+r[e])}return n}}class ge{get primary(){return this.props.primary}get onPrimary(){return this.props.onPrimary}get primaryContainer(){return this.props.primaryContainer}get onPrimaryContainer(){return this.props.onPrimaryContainer}get secondary(){return this.props.secondary}get onSecondary(){return this.props.onSecondary}get secondaryContainer(){return this.props.secondaryContainer}get onSecondaryContainer(){return this.props.onSecondaryContainer}get tertiary(){return this.props.tertiary}get onTertiary(){return this.props.onTertiary}get tertiaryContainer(){return this.props.tertiaryContainer}get onTertiaryContainer(){return this.props.onTertiaryContainer}get error(){return this.props.error}get onError(){return this.props.onError}get errorContainer(){return this.props.errorContainer}get onErrorContainer(){return this.props.onErrorContainer}get background(){return this.props.background}get onBackground(){return this.props.onBackground}get surface(){return this.props.surface}get onSurface(){return this.props.onSurface}get surfaceVariant(){return this.props.surfaceVariant}get onSurfaceVariant(){return this.props.onSurfaceVariant}get outline(){return this.props.outline}get outlineVariant(){return this.props.outlineVariant}get shadow(){return this.props.shadow}get scrim(){return this.props.scrim}get inverseSurface(){return this.props.inverseSurface}get inverseOnSurface(){return this.props.inverseOnSurface}get inversePrimary(){return this.props.inversePrimary}static light(e){return ge.lightFromCorePalette(ee.of(e))}static dark(e){return ge.darkFromCorePalette(ee.of(e))}static lightContent(e){return ge.lightFromCorePalette(ee.contentOf(e))}static darkContent(e){return ge.darkFromCorePalette(ee.contentOf(e))}static lightFromCorePalette(e){return new ge({primary:e.a1.tone(40),onPrimary:e.a1.tone(100),primaryContainer:e.a1.tone(90),onPrimaryContainer:e.a1.tone(10),secondary:e.a2.tone(40),onSecondary:e.a2.tone(100),secondaryContainer:e.a2.tone(90),onSecondaryContainer:e.a2.tone(10),tertiary:e.a3.tone(40),onTertiary:e.a3.tone(100),tertiaryContainer:e.a3.tone(90),onTertiaryContainer:e.a3.tone(10),error:e.error.tone(40),onError:e.error.tone(100),errorContainer:e.error.tone(90),onErrorContainer:e.error.tone(10),background:e.n1.tone(99),onBackground:e.n1.tone(10),surface:e.n1.tone(99),onSurface:e.n1.tone(10),surfaceVariant:e.n2.tone(90),onSurfaceVariant:e.n2.tone(30),outline:e.n2.tone(50),outlineVariant:e.n2.tone(80),shadow:e.n1.tone(0),scrim:e.n1.tone(0),inverseSurface:e.n1.tone(20),inverseOnSurface:e.n1.tone(95),inversePrimary:e.a1.tone(80)})}static darkFromCorePalette(e){return new ge({primary:e.a1.tone(80),onPrimary:e.a1.tone(20),primaryContainer:e.a1.tone(30),onPrimaryContainer:e.a1.tone(90),secondary:e.a2.tone(80),onSecondary:e.a2.tone(20),secondaryContainer:e.a2.tone(30),onSecondaryContainer:e.a2.tone(90),tertiary:e.a3.tone(80),onTertiary:e.a3.tone(20),tertiaryContainer:e.a3.tone(30),onTertiaryContainer:e.a3.tone(90),error:e.error.tone(80),onError:e.error.tone(20),errorContainer:e.error.tone(30),onErrorContainer:e.error.tone(80),background:e.n1.tone(10),onBackground:e.n1.tone(90),surface:e.n1.tone(10),onSurface:e.n1.tone(90),surfaceVariant:e.n2.tone(30),onSurfaceVariant:e.n2.tone(80),outline:e.n2.tone(60),outlineVariant:e.n2.tone(30),shadow:e.n1.tone(0),scrim:e.n1.tone(0),inverseSurface:e.n1.tone(90),inverseOnSurface:e.n1.tone(20),inversePrimary:e.a1.tone(40)})}constructor(e){this.props=e}toJSON(){return{...this.props}}}class ye{get colorAccentPrimary(){return this.props.colorAccentPrimary}get colorAccentPrimaryVariant(){return this.props.colorAccentPrimaryVariant}get colorAccentSecondary(){return this.props.colorAccentSecondary}get colorAccentSecondaryVariant(){return this.props.colorAccentSecondaryVariant}get colorAccentTertiary(){return this.props.colorAccentTertiary}get colorAccentTertiaryVariant(){return this.props.colorAccentTertiaryVariant}get textColorPrimary(){return this.props.textColorPrimary}get textColorSecondary(){return this.props.textColorSecondary}get textColorTertiary(){return this.props.textColorTertiary}get textColorPrimaryInverse(){return this.props.textColorPrimaryInverse}get textColorSecondaryInverse(){return this.props.textColorSecondaryInverse}get textColorTertiaryInverse(){return this.props.textColorTertiaryInverse}get colorBackground(){return this.props.colorBackground}get colorBackgroundFloating(){return this.props.colorBackgroundFloating}get colorSurface(){return this.props.colorSurface}get colorSurfaceVariant(){return this.props.colorSurfaceVariant}get colorSurfaceHighlight(){return this.props.colorSurfaceHighlight}get surfaceHeader(){return this.props.surfaceHeader}get underSurface(){return this.props.underSurface}get offState(){return this.props.offState}get accentSurface(){return this.props.accentSurface}get textPrimaryOnAccent(){return this.props.textPrimaryOnAccent}get textSecondaryOnAccent(){return this.props.textSecondaryOnAccent}get volumeBackground(){return this.props.volumeBackground}get scrim(){return this.props.scrim}static light(e){const t=ee.of(e);return ye.lightFromCorePalette(t)}static dark(e){const t=ee.of(e);return ye.darkFromCorePalette(t)}static lightContent(e){const t=ee.contentOf(e);return ye.lightFromCorePalette(t)}static darkContent(e){const t=ee.contentOf(e);return ye.darkFromCorePalette(t)}static lightFromCorePalette(e){return new ye({colorAccentPrimary:e.a1.tone(90),colorAccentPrimaryVariant:e.a1.tone(40),colorAccentSecondary:e.a2.tone(90),colorAccentSecondaryVariant:e.a2.tone(40),colorAccentTertiary:e.a3.tone(90),colorAccentTertiaryVariant:e.a3.tone(40),textColorPrimary:e.n1.tone(10),textColorSecondary:e.n2.tone(30),textColorTertiary:e.n2.tone(50),textColorPrimaryInverse:e.n1.tone(95),textColorSecondaryInverse:e.n1.tone(80),textColorTertiaryInverse:e.n1.tone(60),colorBackground:e.n1.tone(95),colorBackgroundFloating:e.n1.tone(98),colorSurface:e.n1.tone(98),colorSurfaceVariant:e.n1.tone(90),colorSurfaceHighlight:e.n1.tone(100),surfaceHeader:e.n1.tone(90),underSurface:e.n1.tone(0),offState:e.n1.tone(20),accentSurface:e.a2.tone(95),textPrimaryOnAccent:e.n1.tone(10),textSecondaryOnAccent:e.n2.tone(30),volumeBackground:e.n1.tone(25),scrim:e.n1.tone(80)})}static darkFromCorePalette(e){return new ye({colorAccentPrimary:e.a1.tone(90),colorAccentPrimaryVariant:e.a1.tone(70),colorAccentSecondary:e.a2.tone(90),colorAccentSecondaryVariant:e.a2.tone(70),colorAccentTertiary:e.a3.tone(90),colorAccentTertiaryVariant:e.a3.tone(70),textColorPrimary:e.n1.tone(95),textColorSecondary:e.n2.tone(80),textColorTertiary:e.n2.tone(60),textColorPrimaryInverse:e.n1.tone(10),textColorSecondaryInverse:e.n1.tone(30),textColorTertiaryInverse:e.n1.tone(50),colorBackground:e.n1.tone(10),colorBackgroundFloating:e.n1.tone(10),colorSurface:e.n1.tone(20),colorSurfaceVariant:e.n1.tone(30),colorSurfaceHighlight:e.n1.tone(35),surfaceHeader:e.n1.tone(30),underSurface:e.n1.tone(0),offState:e.n1.tone(20),accentSurface:e.a2.tone(95),textPrimaryOnAccent:e.n1.tone(10),textSecondaryOnAccent:e.n2.tone(30),volumeBackground:e.n1.tone(25),scrim:e.n1.tone(80)})}constructor(e){this.props=e}toJSON(){return{...this.props}}}class be{constructor(e){this.input=e,this.hctsByTempCache=[],this.hctsByHueCache=[],this.tempsByHctCache=new Map,this.inputRelativeTemperatureCache=-1,this.complementCache=null}get hctsByTemp(){if(this.hctsByTempCache.length>0)return this.hctsByTempCache;const e=this.hctsByHue.concat([this.input]),t=this.tempsByHct;return e.sort(((e,r)=>t.get(e)-t.get(r))),this.hctsByTempCache=e,e}get warmest(){return this.hctsByTemp[this.hctsByTemp.length-1]}get coldest(){return this.hctsByTemp[0]}analogous(e=5,t=12){const r=Math.round(this.input.hue),n=this.hctsByHue[r];let o=this.relativeTemperature(n);const a=[n];let i=0;for(let e=0;e<360;e++){const t=s(r+e),n=this.hctsByHue[t],a=this.relativeTemperature(n),c=Math.abs(a-o);o=a,i+=c}let c=1;const u=i/t;let l=0;for(o=this.relativeTemperature(n);a.length<t;){const e=s(r+c),n=this.hctsByHue[e],i=this.relativeTemperature(n);l+=Math.abs(i-o);let h=l>=a.length*u,f=1;for(;h&&a.length<t;)a.push(n),h=l>=(a.length+f)*u,f++;if(o=i,c++,c>360){for(;a.length<t;)a.push(n);break}}const h=[this.input],f=Math.floor((e-1)/2);for(let e=1;e<f+1;e++){let t=0-e;for(;t<0;)t=a.length+t;t>=a.length&&(t%=a.length),h.splice(0,0,a[t])}const d=e-f-1;for(let e=1;e<d+1;e++){let t=e;for(;t<0;)t=a.length+t;t>=a.length&&(t%=a.length),h.push(a[t])}return h}get complement(){if(null!=this.complementCache)return this.complementCache;const e=this.coldest.hue,t=this.tempsByHct.get(this.coldest),r=this.warmest.hue,n=this.tempsByHct.get(this.warmest)-t,o=be.isBetween(this.input.hue,e,r),a=o?r:e,i=o?e:r;let s=1e3,u=this.hctsByHue[Math.round(this.input.hue)];const l=1-this.inputRelativeTemperature;for(let e=0;e<=360;e+=1){const r=c(a+1*e);if(!be.isBetween(r,a,i))continue;const o=this.hctsByHue[Math.round(r)],h=(this.tempsByHct.get(o)-t)/n,f=Math.abs(l-h);f<s&&(s=f,u=o)}return this.complementCache=u,this.complementCache}relativeTemperature(e){const t=this.tempsByHct.get(this.warmest)-this.tempsByHct.get(this.coldest),r=this.tempsByHct.get(e)-this.tempsByHct.get(this.coldest);return 0===t?.5:r/t}get inputRelativeTemperature(){return this.inputRelativeTemperatureCache>=0||(this.inputRelativeTemperatureCache=this.relativeTemperature(this.input)),this.inputRelativeTemperatureCache}get tempsByHct(){if(this.tempsByHctCache.size>0)return this.tempsByHctCache;const e=this.hctsByHue.concat([this.input]),t=new Map;for(const r of e)t.set(r,be.rawTemperature(r));return this.tempsByHctCache=t,t}get hctsByHue(){if(this.hctsByHueCache.length>0)return this.hctsByHueCache;const e=[];for(let t=0;t<=360;t+=1){const r=$.from(t,this.input.chroma,this.input.tone);e.push(r)}return this.hctsByHueCache=e,this.hctsByHueCache}static isBetween(e,t,r){return t<r?t<=e&&e<=r:t<=e||e<=r}static rawTemperature(e){const t=S(e.toInt()),r=c(180*Math.atan2(t[2],t[1])/Math.PI),n=Math.sqrt(t[1]*t[1]+t[2]*t[2]);return.02*Math.pow(n,1.07)*Math.cos(c(r-50)*Math.PI/180)-.5}}class ve extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.CONTENT,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,e.chroma),secondaryPalette:Q.fromHueAndChroma(e.hue,Math.max(e.chroma-32,.5*e.chroma)),tertiaryPalette:Q.fromInt(G.fixIfDisliked(new be(e).analogous(3,6)[2]).toInt()),neutralPalette:Q.fromHueAndChroma(e.hue,e.chroma/8),neutralVariantPalette:Q.fromHueAndChroma(e.hue,e.chroma/8+4)})}}class Ce extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.EXPRESSIVE,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(c(e.hue+240),40),secondaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Ce.hues,Ce.secondaryRotations),24),tertiaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Ce.hues,Ce.tertiaryRotations),32),neutralPalette:Q.fromHueAndChroma(e.hue+15,8),neutralVariantPalette:Q.fromHueAndChroma(e.hue+15,12)})}}Ce.hues=[0,21,51,121,151,191,271,321,360],Ce.secondaryRotations=[45,95,45,20,45,90,45,45,45],Ce.tertiaryRotations=[120,120,20,45,20,15,20,120,120];class Pe extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.FIDELITY,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,e.chroma),secondaryPalette:Q.fromHueAndChroma(e.hue,Math.max(e.chroma-32,.5*e.chroma)),tertiaryPalette:Q.fromInt(G.fixIfDisliked(new be(e).complement).toInt()),neutralPalette:Q.fromHueAndChroma(e.hue,e.chroma/8),neutralVariantPalette:Q.fromHueAndChroma(e.hue,e.chroma/8+4)})}}class we extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.MONOCHROME,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,0),secondaryPalette:Q.fromHueAndChroma(e.hue,0),tertiaryPalette:Q.fromHueAndChroma(e.hue,0),neutralPalette:Q.fromHueAndChroma(e.hue,0),neutralVariantPalette:Q.fromHueAndChroma(e.hue,0)})}}class ke extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.NEUTRAL,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,12),secondaryPalette:Q.fromHueAndChroma(e.hue,8),tertiaryPalette:Q.fromHueAndChroma(e.hue,16),neutralPalette:Q.fromHueAndChroma(e.hue,2),neutralVariantPalette:Q.fromHueAndChroma(e.hue,2)})}}class xe extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.TONAL_SPOT,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,36),secondaryPalette:Q.fromHueAndChroma(e.hue,16),tertiaryPalette:Q.fromHueAndChroma(c(e.hue+60),24),neutralPalette:Q.fromHueAndChroma(e.hue,6),neutralVariantPalette:Q.fromHueAndChroma(e.hue,8)})}}class Se extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.VIBRANT,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,200),secondaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Se.hues,Se.secondaryRotations),24),tertiaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Se.hues,Se.tertiaryRotations),32),neutralPalette:Q.fromHueAndChroma(e.hue,10),neutralVariantPalette:Q.fromHueAndChroma(e.hue,12)})}}Se.hues=[0,41,61,101,131,181,251,301,360],Se.secondaryRotations=[18,15,10,12,15,18,15,12,12],Se.tertiaryRotations=[35,30,20,25,30,35,30,25,25];const Me={desired:4,fallbackColorARGB:4282549748,filter:!0};function Oe(e,t){return e.score>t.score?-1:e.score<t.score?1:0}class _e{constructor(){}static score(e,t){const{desired:r,fallbackColorARGB:n,filter:o}={...Me,...t},a=[],i=new Array(360).fill(0);let c=0;for(const[t,r]of e.entries()){const e=$.fromInt(t);a.push(e),i[Math.floor(e.hue)]+=r,c+=r}const u=new Array(360).fill(0);for(let e=0;e<360;e++){const t=i[e]/c;for(let r=e-14;r<e+16;r++)u[s(r)]+=t}const h=new Array;for(const e of a){const t=u[s(Math.round(e.hue))];if(o&&(e.chroma<_e.CUTOFF_CHROMA||t<=_e.CUTOFF_EXCITED_PROPORTION))continue;const r=100*t*_e.WEIGHT_PROPORTION,n=e.chroma<_e.TARGET_CHROMA?_e.WEIGHT_CHROMA_BELOW:_e.WEIGHT_CHROMA_ABOVE,a=r+(e.chroma-_e.TARGET_CHROMA)*n;h.push({hct:e,score:a})}h.sort(Oe);const f=[];for(let e=90;e>=15;e--){f.length=0;for(const{hct:t}of h)if(f.find((r=>l(t.hue,r.hue)<e))||f.push(t),f.length>=r)break;if(f.length>=r)break}const d=[];0===f.length&&d.push(n);for(const e of f)d.push(e.toInt());return d}}function Ae(e){const t=b(e),r=v(e),n=C(e),o=[t.toString(16),r.toString(16),n.toString(16)];for(const[e,t]of o.entries())1===t.length&&(o[e]="0"+t);return"#"+o.join("")}function Ie(e){const t=3===(e=e.replace("#","")).length,r=6===e.length,n=8===e.length;if(!t&&!r&&!n)throw new Error("unexpected hex "+e);let o=0,a=0,i=0;return t?(o=Te(e.slice(0,1).repeat(2)),a=Te(e.slice(1,2).repeat(2)),i=Te(e.slice(2,3).repeat(2))):r?(o=Te(e.slice(0,2)),a=Te(e.slice(2,4)),i=Te(e.slice(4,6))):n&&(o=Te(e.slice(2,4)),a=Te(e.slice(4,6)),i=Te(e.slice(6,8))),(255<<24|(255&o)<<16|(255&a)<<8|255&i)>>>0}function Te(e){return parseInt(e,16)}async function De(e){const t=await new Promise(((t,r)=>{const n=document.createElement("canvas"),o=n.getContext("2d");if(!o)return void r(new Error("Could not get canvas context"));const a=()=>{n.width=e.width,n.height=e.height,o.drawImage(e,0,0);let r=[0,0,e.width,e.height];const a=e.dataset.area;a&&/^\d+(\s*,\s*\d+){3}$/.test(a)&&(r=a.split(/\s*,\s*/).map((e=>parseInt(e,10))));const[i,s,c,u]=r;t(o.getImageData(i,s,c,u).data)};e.complete?a():e.onload=a})),r=[];for(let e=0;e<t.length;e+=4){const n=t[e],o=t[e+1],a=t[e+2];if(t[e+3]<255)continue;const i=p(n,o,a);r.push(i)}const n=me.quantize(r,128);return _e.score(n)[0]}function Fe(e,t=[]){const r=ee.of(e);return{source:e,schemes:{light:ge.light(e),dark:ge.dark(e)},palettes:{primary:r.a1,secondary:r.a2,tertiary:r.a3,neutral:r.n1,neutralVariant:r.n2,error:r.error},customColors:t.map((t=>He(e,t)))}}async function Be(e,t=[]){return Fe(await De(e),t)}function He(e,t){let r=t.value;const n=r,o=e;t.blend&&(r=V.harmonize(n,o));const a=ee.of(r).a1;return{color:t,value:r,light:{color:a.tone(40),onColor:a.tone(100),colorContainer:a.tone(90),onColorContainer:a.tone(10)},dark:{color:a.tone(80),onColor:a.tone(20),colorContainer:a.tone(30),onColorContainer:a.tone(90)}}}function je(e,t){const r=t?.target||document.body;if(Ee(r,t?.dark?e.schemes.dark:e.schemes.light),t?.brightnessSuffix&&(Ee(r,e.schemes.dark,"-dark"),Ee(r,e.schemes.light,"-light")),t?.paletteTones){const n=t?.paletteTones??[];for(const[t,o]of Object.entries(e.palettes)){const e=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();for(const t of n){const n=`--md-ref-palette-${e}-${e}${t}`,a=Ae(o.tone(t));r.style.setProperty(n,a)}}}}function Ee(e,t,r=""){for(const[n,o]of Object.entries(t.toJSON())){const t=n.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),a=Ae(o);e.style.setProperty(`--md-sys-color-${t}${r}`,a)}}_e.TARGET_CHROMA=48,_e.WEIGHT_PROPORTION=.7,_e.WEIGHT_CHROMA_ABOVE=.3,_e.WEIGHT_CHROMA_BELOW=.1,_e.CUTOFF_CHROMA=5,_e.CUTOFF_EXCITED_PROPORTION=.01},450:(e,t,r)=>{"use strict";r.r(t),r.d(t,{CorePalette:()=>c,Scheme:()=>u,applyTheme:()=>s,themeFromImage:()=>h,themeFromSourceColor:()=>l});var n=r(794),o=Object.defineProperty,a=(e,t,r)=>(((e,t,r)=>{t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r})(e,"symbol"!=typeof t?t+"":t,r),r);const i=(e,t,r="",o)=>{for(const[a,i]of Object.entries(t.toJSON())){const t=a.replaceAll(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),s="rgb"===o?Object.values((0,n.rgbaFromArgb)(i)).slice(0,-1).join(" "):(0,n.hexFromArgb)(i);e.style.setProperty(`--md-sys-color-${t}${r}`,s)}},s=(e,t)=>{const r=(null==t?void 0:t.target)||document.body,o=(null==t?void 0:t.dark)?e.schemes.dark:e.schemes.light;if(null!=t&&t.brightnessSuffix?(i(r,e.schemes.dark,"-dark",null==t?void 0:t.colorFormat),i(r,e.schemes.light,"-light",null==t?void 0:t.colorFormat)):i(r,o,"",null==t?void 0:t.colorFormat),null!=t&&t.paletteTones){const o=(null==t?void 0:t.paletteTones)??[];for(const[a,i]of Object.entries(e.palettes)){const e=a.replaceAll(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();for(const a of o){const o=`--md-ref-palette-${e}${a}`,s="rgb"===(null==t?void 0:t.colorFormat)?Object.values((0,n.rgbaFromArgb)(i.tone(a))).slice(0,-1).join(" "):(0,n.hexFromArgb)(i.tone(a));r.style.setProperty(o,s)}}}};class c{constructor(e,t){a(this,"a1"),a(this,"a2"),a(this,"a3"),a(this,"n1"),a(this,"n2"),a(this,"error");const{hue:r,chroma:o}=n.Hct.fromInt(e);t?(this.a1=n.TonalPalette.fromHueAndChroma(r,o),this.a2=n.TonalPalette.fromHueAndChroma(r,o/3),this.a3=n.TonalPalette.fromHueAndChroma(r+60,o/2),this.n1=n.TonalPalette.fromHueAndChroma(r,Math.min(o/12,4)),this.n2=n.TonalPalette.fromHueAndChroma(r,Math.min(o/6,8))):(this.a1=n.TonalPalette.fromHueAndChroma(r,Math.max(48,o)),this.a2=n.TonalPalette.fromHueAndChroma(r,16),this.a3=n.TonalPalette.fromHueAndChroma(r+60,24),this.n1=n.TonalPalette.fromHueAndChroma(r,6),this.n2=n.TonalPalette.fromHueAndChroma(r,8)),this.error=n.TonalPalette.fromHueAndChroma(25,84)}static of(e){return new c(e,!1)}static contentOf(e){return new c(e,!0)}static fromColors(e){return c.createPaletteFromColors(!1,e)}static contentFromColors(e){return c.createPaletteFromColors(!0,e)}static createPaletteFromColors(e,t){const r=new c(t.primary,e);if(t.secondary){const n=new c(t.secondary,e);r.a2=n.a1}if(t.tertiary){const n=new c(t.tertiary,e);r.a3=n.a1}if(t.error){const n=new c(t.error,e);r.error=n.a1}if(t.neutral){const n=new c(t.neutral,e);r.n1=n.n1}if(t.neutralVariant){const n=new c(t.neutralVariant,e);r.n2=n.n2}return r}}class u{constructor(e){this.props=e}get primary(){return this.props.primary}get onPrimary(){return this.props.onPrimary}get primaryContainer(){return this.props.primaryContainer}get onPrimaryContainer(){return this.props.onPrimaryContainer}get secondary(){return this.props.secondary}get onSecondary(){return this.props.onSecondary}get secondaryContainer(){return this.props.secondaryContainer}get onSecondaryContainer(){return this.props.onSecondaryContainer}get tertiary(){return this.props.tertiary}get onTertiary(){return this.props.onTertiary}get tertiaryContainer(){return this.props.tertiaryContainer}get onTertiaryContainer(){return this.props.onTertiaryContainer}get error(){return this.props.error}get onError(){return this.props.onError}get errorContainer(){return this.props.errorContainer}get onErrorContainer(){return this.props.onErrorContainer}get background(){return this.props.background}get onBackground(){return this.props.onBackground}get surface(){return this.props.surface}get onSurface(){return this.props.onSurface}get surfaceVariant(){return this.props.surfaceVariant}get onSurfaceVariant(){return this.props.onSurfaceVariant}get outline(){return this.props.outline}get outlineVariant(){return this.props.outlineVariant}get shadow(){return this.props.shadow}get scrim(){return this.props.scrim}get inverseSurface(){return this.props.inverseSurface}get inverseOnSurface(){return this.props.inverseOnSurface}get inversePrimary(){return this.props.inversePrimary}get surfaceBright(){return this.props.surfaceBright}get surfaceContainer(){return this.props.surfaceContainer}get surfaceContainerHigh(){return this.props.surfaceContainerHigh}get surfaceContainerHighest(){return this.props.surfaceContainerHighest}get surfaceContainerLow(){return this.props.surfaceContainerLow}get surfaceContainerLowest(){return this.props.surfaceContainerLowest}get surfaceTint(){return this.props.surfaceTint}static light(e){return u.lightFromCorePalette(c.of(e))}static dark(e){return u.darkFromCorePalette(c.of(e))}static lightContent(e){return u.lightFromCorePalette(c.contentOf(e))}static darkContent(e){return u.darkFromCorePalette(c.contentOf(e))}static lightFromCorePalette(e){return new u({...n.Scheme.lightFromCorePalette(e).toJSON(),background:e.n1.tone(98),surface:e.n1.tone(98),surfaceBright:e.n1.tone(98),surfaceContainer:e.n1.tone(94),surfaceContainerHigh:e.n1.tone(92),surfaceContainerHighest:e.n1.tone(90),surfaceContainerLow:e.n1.tone(96),surfaceContainerLowest:e.n1.tone(100),surfaceDim:e.n1.tone(87),surfaceTint:e.a1.tone(40)})}static darkFromCorePalette(e){return new u({...n.Scheme.darkFromCorePalette(e).toJSON(),onErrorContainer:e.error.tone(90),background:e.n1.tone(6),surface:e.n1.tone(6),surfaceBright:e.n1.tone(24),surfaceContainer:e.n1.tone(12),surfaceContainerHigh:e.n1.tone(17),surfaceContainerHighest:e.n1.tone(22),surfaceContainerLow:e.n1.tone(10),surfaceContainerLowest:e.n1.tone(4),surfaceDim:e.n1.tone(6),surfaceTint:e.a1.tone(80)})}toJSON(){return this.props}}const l=(e,t=[])=>{const r=c.of(e);return{customColors:t.map((t=>(0,n.customColor)(e,t))),palettes:{error:r.error,neutral:r.n1,neutralVariant:r.n2,primary:r.a1,secondary:r.a2,tertiary:r.a3},schemes:{dark:u.dark(e),light:u.light(e)},source:e}},h=async(e,t=[])=>await(0,n.sourceColorFromImage)(e).then((e=>l(e,t)))}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={exports:{}};return r[e].call(a.exports,a,a.exports,o),a.exports}return o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLGNBQWVBLFFBQVEsVUFDL0IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxDQUFDLGFBQWMsU0FBVUosR0FDTixpQkFBWkMsUUFDZEEsUUFBUSxhQUFlRCxFQUFRRyxRQUFRLGNBQWVBLFFBQVEsVUFFOURKLEVBQUssYUFBZUMsRUFBUUQsRUFBSyxjQUFlQSxFQUFZLE1BQzdELENBVEQsQ0FTR08sTUFBTSxDQUFDQyxFQUFpQ0Msb05DNEMzQyxJQUFJQyxFQUEwQixXQUU1QixTQUFTQSxFQUFXQyxHQUNsQixJQUFJQyxFQUFRTCxLQUVaQSxLQUFLTSxXQUFhLFNBQVVDLEdBQzFCLElBQUlDLEVBSUFBLEVBRnNCLElBQXRCSCxFQUFNSSxLQUFLQyxPQUNUTCxFQUFNTSxlQUNDTixFQUFNTSxlQUFlQyxZQUNyQlAsRUFBTVEsUUFDTlIsRUFBTVMsVUFBVUMsV0FFaEJWLEVBQU1HLE9BR1JILEVBQU1JLEtBQUtKLEVBQU1JLEtBQUtDLE9BQVMsR0FBR0UsWUFHN0NQLEVBQU1TLFVBQVVFLGFBQWFULEVBQUtDLEdBRWxDSCxFQUFNSSxLQUFLUSxLQUFLVixFQUNsQixFQUVBUCxLQUFLa0IsY0FBOEJDLElBQW5CZixFQUFRZ0IsUUFBK0RoQixFQUFRZ0IsT0FDL0ZwQixLQUFLUyxLQUFPLEdBQ1pULEtBQUtxQixJQUFNLEVBQ1hyQixLQUFLc0IsTUFBUWxCLEVBQVFrQixNQUVyQnRCLEtBQUt1QixJQUFNbkIsRUFBUW1CLElBQ25CdkIsS0FBS2MsVUFBWVYsRUFBUVUsVUFDekJkLEtBQUthLFFBQVVULEVBQVFTLFFBQ3ZCYixLQUFLVyxlQUFpQlAsRUFBUU8sZUFDOUJYLEtBQUtRLE9BQVMsSUFDaEIsQ0FFQSxJQUFJZ0IsRUFBU3JCLEVBQVdzQixVQTREeEIsT0ExREFELEVBQU9FLFFBQVUsU0FBaUJDLEdBQ2hDQSxFQUFNQyxRQUFRNUIsS0FBS00sV0FDckIsRUFFQWtCLEVBQU9LLE9BQVMsU0FBZ0JDLEdBSTFCOUIsS0FBS3FCLEtBQU9yQixLQUFLa0IsU0FBVyxLQUFRLElBQU8sR0FDN0NsQixLQUFLTSxXQTdEWCxTQUE0QkYsR0FDMUIsSUFBSUcsRUFBTXdCLFNBQVNDLGNBQWMsU0FTakMsT0FSQXpCLEVBQUkwQixhQUFhLGVBQWdCN0IsRUFBUW1CLFVBRW5CSixJQUFsQmYsRUFBUWtCLE9BQ1ZmLEVBQUkwQixhQUFhLFFBQVM3QixFQUFRa0IsT0FHcENmLEVBQUkyQixZQUFZSCxTQUFTSSxlQUFlLEtBQ3hDNUIsRUFBSTBCLGFBQWEsU0FBVSxJQUNwQjFCLENBQ1QsQ0FrRHNCNkIsQ0FBbUJwQyxPQUdyQyxJQUFJTyxFQUFNUCxLQUFLUyxLQUFLVCxLQUFLUyxLQUFLQyxPQUFTLEdBY3ZDLEdBQUlWLEtBQUtrQixTQUFVLENBQ2pCLElBQUltQixFQWhHVixTQUFxQjlCLEdBQ25CLEdBQUlBLEVBQUk4QixNQUVOLE9BQU85QixFQUFJOEIsTUFNYixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSVAsU0FBU1EsWUFBWTdCLE9BQVE0QixJQUMvQyxHQUFJUCxTQUFTUSxZQUFZRCxHQUFHRSxZQUFjakMsRUFFeEMsT0FBT3dCLFNBQVNRLFlBQVlELEVBR2xDLENBaUZrQkcsQ0FBWWxDLEdBRXhCLElBR0U4QixFQUFNSyxXQUFXWixFQUFNTyxFQUFNTSxTQUFTakMsT0FDeEMsQ0FBRSxNQUFPa0MsR0FJVCxDQUNGLE1BQ0VyQyxFQUFJMkIsWUFBWUgsU0FBU0ksZUFBZUwsSUFHMUM5QixLQUFLcUIsS0FDUCxFQUVBRyxFQUFPcUIsTUFBUSxXQUViN0MsS0FBS1MsS0FBS21CLFNBQVEsU0FBVXJCLEdBQzFCLE9BQU9BLEVBQUl1QyxZQUFjdkMsRUFBSXVDLFdBQVdDLFlBQVl4QyxFQUN0RCxJQUNBUCxLQUFLUyxLQUFPLEdBQ1pULEtBQUtxQixJQUFNLENBS2IsRUFFT2xCLENBQ1QsQ0FsRzhCLEdDakRuQjZDLEVBQU1DLEtBQUtELElBTVgsRUFBT0UsT0FBT0MsYUFNZCxFQUFTQyxPQUFPQyxPQWVwQixTQUFTQyxFQUFNQyxHQUNyQixPQUFPQSxFQUFNRCxNQUNkLENBaUJPLFNBQVMsRUFBU0MsRUFBT0MsRUFBU0MsR0FDeEMsT0FBT0YsRUFBTUcsUUFBUUYsRUFBU0MsRUFDL0IsQ0FPTyxTQUFTRSxFQUFTSixFQUFPSyxHQUMvQixPQUFPTCxFQUFNTSxRQUFRRCxFQUN0QixDQU9PLFNBQVMsRUFBUUwsRUFBT08sR0FDOUIsT0FBaUMsRUFBMUJQLEVBQU1RLFdBQVdELEVBQ3pCLENBUU8sU0FBUyxFQUFRUCxFQUFPUyxFQUFPQyxHQUNyQyxPQUFPVixFQUFNVyxNQUFNRixFQUFPQyxFQUMzQixDQU1PLFNBQVMsRUFBUVYsR0FDdkIsT0FBT0EsRUFBTTdDLE1BQ2QsQ0FNTyxTQUFTLEVBQVE2QyxHQUN2QixPQUFPQSxFQUFNN0MsTUFDZCxDQU9PLFNBQVMsRUFBUTZDLEVBQU9ZLEdBQzlCLE9BQU9BLEVBQU1sRCxLQUFLc0MsR0FBUUEsQ0FDM0IsQ0N2R08sSUFBSWEsRUFBTyxFQUNQQyxFQUFTLEVBQ1QsRUFBUyxFQUNUQyxFQUFXLEVBQ1hDLEVBQVksRUFDWkMsRUFBYSxHQVdqQixTQUFTQyxFQUFNbEIsRUFBTzlELEVBQU1pRixFQUFRQyxFQUFNQyxFQUFPQyxFQUFVbkUsR0FDakUsTUFBTyxDQUFDNkMsTUFBT0EsRUFBTzlELEtBQU1BLEVBQU1pRixPQUFRQSxFQUFRQyxLQUFNQSxFQUFNQyxNQUFPQSxFQUFPQyxTQUFVQSxFQUFVVCxLQUFNQSxFQUFNQyxPQUFRQSxFQUFRM0QsT0FBUUEsRUFBUW9FLE9BQVEsR0FDckosQ0FPTyxTQUFTLEVBQU1yRixFQUFNbUYsR0FDM0IsT0FBTyxFQUFPSCxFQUFLLEdBQUksS0FBTSxLQUFNLEdBQUksS0FBTSxLQUFNLEdBQUloRixFQUFNLENBQUNpQixRQUFTakIsRUFBS2lCLFFBQVNrRSxFQUN0RixDQVlPLFNBQVNHLElBTWYsT0FMQVIsRUFBWUQsRUFBVyxFQUFJLEVBQU9FLElBQWNGLEdBQVksRUFFeERELElBQXdCLEtBQWRFLElBQ2JGLEVBQVMsRUFBR0QsS0FFTkcsQ0FDUixDQUtPLFNBQVNTLElBTWYsT0FMQVQsRUFBWUQsRUFBVyxFQUFTLEVBQU9FLEVBQVlGLEtBQWMsRUFFN0RELElBQXdCLEtBQWRFLElBQ2JGLEVBQVMsRUFBR0QsS0FFTkcsQ0FDUixDQUtPLFNBQVNVLElBQ2YsT0FBTyxFQUFPVCxFQUFZRixFQUMzQixDQUtPLFNBQVNZLElBQ2YsT0FBT1osQ0FDUixDQU9PLFNBQVNKLEVBQU9GLEVBQU9DLEdBQzdCLE9BQU8sRUFBT08sRUFBWVIsRUFBT0MsRUFDbEMsQ0FNTyxTQUFTa0IsRUFBT1IsR0FDdEIsT0FBUUEsR0FFUCxLQUFLLEVBQUcsS0FBSyxFQUFHLEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxHQUN0QyxPQUFPLEVBRVIsS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxJQUUzRCxLQUFLLEdBQUksS0FBSyxJQUFLLEtBQUssSUFDdkIsT0FBTyxFQUVSLEtBQUssR0FDSixPQUFPLEVBRVIsS0FBSyxHQUFJLEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxHQUMvQixPQUFPLEVBRVIsS0FBSyxHQUFJLEtBQUssR0FDYixPQUFPLEVBR1QsT0FBTyxDQUNSLENBTU8sU0FBU1MsRUFBTzdCLEdBQ3RCLE9BQU9hLEVBQU9DLEVBQVMsRUFBRyxFQUFTLEVBQU9HLEVBQWFqQixHQUFRZSxFQUFXLEVBQUcsRUFDOUUsQ0FNTyxTQUFTZSxFQUFTOUIsR0FDeEIsT0FBT2lCLEVBQWEsR0FBSWpCLENBQ3pCLENBTU8sU0FBUytCLEVBQVNYLEdBQ3hCLE9BQU9yQixFQUFLWSxFQUFNSSxFQUFXLEVBQUdpQixFQUFtQixLQUFUWixFQUFjQSxFQUFPLEVBQWEsS0FBVEEsRUFBY0EsRUFBTyxFQUFJQSxJQUM3RixDQWNPLFNBQVNhLEVBQVliLEdBQzNCLE1BQU9KLEVBQVlVLE1BQ2RWLEVBQVksSUFDZlMsSUFJRixPQUFPRyxFQUFNUixHQUFRLEdBQUtRLEVBQU1aLEdBQWEsRUFBSSxHQUFLLEdBQ3ZELENBd0JPLFNBQVNrQixFQUFVM0IsRUFBTzRCLEdBQ2hDLE9BQVNBLEdBQVNWLE9BRWJULEVBQVksSUFBTUEsRUFBWSxLQUFRQSxFQUFZLElBQU1BLEVBQVksSUFBUUEsRUFBWSxJQUFNQSxFQUFZLE1BRy9HLE9BQU9MLEVBQU1KLEVBQU9vQixLQUFXUSxFQUFRLEdBQWUsSUFBVlQsS0FBMEIsSUFBVkQsS0FDN0QsQ0FNTyxTQUFTTyxFQUFXWixHQUMxQixLQUFPSyxZQUNFVCxHQUVQLEtBQUtJLEVBQ0osT0FBT0wsRUFFUixLQUFLLEdBQUksS0FBSyxHQUNBLEtBQVRLLEdBQXdCLEtBQVRBLEdBQ2xCWSxFQUFVaEIsR0FDWCxNQUVELEtBQUssR0FDUyxLQUFUSSxHQUNIWSxFQUFVWixHQUNYLE1BRUQsS0FBSyxHQUNKSyxJQUlILE9BQU9WLENBQ1IsQ0FPTyxTQUFTcUIsRUFBV2hCLEVBQU1iLEdBQ2hDLEtBQU9rQixLQUVGTCxFQUFPSixJQUFjLEtBR2hCSSxFQUFPSixJQUFjLElBQXNCLEtBQVhVLE9BRzFDLE1BQU8sS0FBT2YsRUFBTUosRUFBT1EsRUFBVyxHQUFLLElBQU0sRUFBYyxLQUFUSyxFQUFjQSxFQUFPSyxJQUM1RSxDQU1PLFNBQVNZLEVBQVk5QixHQUMzQixNQUFRcUIsRUFBTUYsTUFDYkQsSUFFRCxPQUFPZCxFQUFNSixFQUFPUSxFQUNyQixDQ3JQTyxJQUFJLEVBQUssT0FDTCxFQUFNLFFBQ04sRUFBUyxXQUVUdUIsRUFBVSxPQUNWLEVBQVUsT0FDVixFQUFjLE9BVWQsRUFBWSxhQ1JoQixTQUFTLEVBQVdoQixFQUFVaUIsR0FJcEMsSUFIQSxJQUFJQyxFQUFTLEdBQ1RyRixFQUFTLEVBQU9tRSxHQUVYdkMsRUFBSSxFQUFHQSxFQUFJNUIsRUFBUTRCLElBQzNCeUQsR0FBVUQsRUFBU2pCLEVBQVN2QyxHQUFJQSxFQUFHdUMsRUFBVWlCLElBQWEsR0FFM0QsT0FBT0MsQ0FDUixDQVNPLFNBQVNDLEVBQVdDLEVBQVNuQyxFQUFPZSxFQUFVaUIsR0FDcEQsT0FBUUcsRUFBUXRCLE1BQ2YsSURQaUIsU0NPTCxHQUFJc0IsRUFBUXBCLFNBQVNuRSxPQUFRLE1BQ3pDLElEbEJrQixVQ2tCTCxLQUFLLEVBQWEsT0FBT3VGLEVBQVFuQixPQUFTbUIsRUFBUW5CLFFBQVVtQixFQUFRMUMsTUFDakYsS0FBS3NDLEVBQVMsTUFBTyxHQUNyQixLQUFLLEVBQVcsT0FBT0ksRUFBUW5CLE9BQVNtQixFQUFRMUMsTUFBUSxJQUFNLEVBQVUwQyxFQUFRcEIsU0FBVWlCLEdBQVksSUFDdEcsS0FBSyxFQUFTRyxFQUFRMUMsTUFBUTBDLEVBQVFyQixNQUFNc0IsS0FBSyxLQUdsRCxPQUFPLEVBQU9yQixFQUFXLEVBQVVvQixFQUFRcEIsU0FBVWlCLElBQWFHLEVBQVFuQixPQUFTbUIsRUFBUTFDLE1BQVEsSUFBTXNCLEVBQVcsSUFBTSxFQUMzSCxDQ3pCTyxTQUFTc0IsRUFBWUMsR0FDM0IsSUFBSTFGLEVBQVMsRUFBTzBGLEdBRXBCLE9BQU8sU0FBVUgsRUFBU25DLEVBQU9lLEVBQVVpQixHQUcxQyxJQUZBLElBQUlDLEVBQVMsR0FFSnpELEVBQUksRUFBR0EsRUFBSTVCLEVBQVE0QixJQUMzQnlELEdBQVVLLEVBQVc5RCxHQUFHMkQsRUFBU25DLEVBQU9lLEVBQVVpQixJQUFhLEdBRWhFLE9BQU9DLENBQ1IsQ0FDRCxDQ2JPLFNBQVNNLEVBQVM5QyxHQUN4QixPQUFPOEIsRUFBUWlCLEVBQU0sR0FBSSxLQUFNLEtBQU0sS0FBTSxDQUFDLElBQUsvQyxFQUFRNkIsRUFBTTdCLEdBQVEsRUFBRyxDQUFDLEdBQUlBLEdBQ2hGLENBY08sU0FBUytDLEVBQU8vQyxFQUFPOUQsRUFBTWlGLEVBQVE1QyxFQUFNeUUsRUFBT0MsRUFBVUMsRUFBUUMsRUFBUUMsR0FpQmxGLElBaEJBLElBQUk3QyxFQUFRLEVBQ1I4QyxFQUFTLEVBQ1RsRyxFQUFTK0YsRUFDVEksRUFBUyxFQUNUQyxFQUFXLEVBQ1hDLEVBQVcsRUFDWEMsRUFBVyxFQUNYQyxFQUFXLEVBQ1hDLEVBQVksRUFDWjNDLEVBQVksRUFDWkksRUFBTyxHQUNQQyxFQUFRMkIsRUFDUjFCLEVBQVcyQixFQUNYVyxFQUFZckYsRUFDWjBDLEVBQWFHLEVBRVZzQyxVQUNFRixFQUFXeEMsRUFBV0EsRUFBWVMsS0FFekMsS0FBSyxHQUNKLEdBQWdCLEtBQVorQixHQUFxRCxJQUFsQyxFQUFPdkMsRUFBWTlELEVBQVMsR0FBVSxFQUNrQixHQUExRWlELEVBQVFhLEdBQWMsRUFBUWMsRUFBUWYsR0FBWSxJQUFLLE9BQVEsU0FDbEUyQyxHQUFhLEdBQ2QsS0FDRCxDQUVELEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxHQUN0QjFDLEdBQWNjLEVBQVFmLEdBQ3RCLE1BRUQsS0FBSyxFQUFHLEtBQUssR0FBSSxLQUFLLEdBQUksS0FBSyxHQUM5QkMsR0FBY2dCLEVBQVd1QixHQUN6QixNQUVELEtBQUssR0FDSnZDLEdBQWNpQixFQUFTUCxJQUFVLEVBQUcsR0FDcEMsU0FFRCxLQUFLLEdBQ0osT0FBUUQsS0FDUCxLQUFLLEdBQUksS0FBSyxHQUNiLEVBQU9tQyxFQUFRekIsRUFBVVgsSUFBUUUsS0FBVXpGLEVBQU1pRixHQUFTaUMsR0FDMUQsTUFDRCxRQUNDbkMsR0FBYyxJQUVoQixNQUVELEtBQUssSUFBTXdDLEVBQ1ZOLEVBQU81QyxLQUFXLEVBQU9VLEdBQWMwQyxFQUV4QyxLQUFLLElBQU1GLEVBQVUsS0FBSyxHQUFJLEtBQUssRUFDbEMsT0FBUXpDLEdBRVAsS0FBSyxFQUFHLEtBQUssSUFBSzBDLEVBQVcsRUFFN0IsS0FBSyxHQUFLTCxHQUEwQixHQUFkTSxJQUFpQjFDLEVBQWEsRUFBUUEsRUFBWSxNQUFPLEtBQzFFc0MsRUFBVyxHQUFNLEVBQU90QyxHQUFjOUQsR0FDekMsRUFBT29HLEVBQVcsR0FBS08sRUFBWTdDLEVBQWEsSUFBSzFDLEVBQU00QyxFQUFRaEUsRUFBUyxHQUFLMkcsRUFBWSxFQUFRN0MsRUFBWSxJQUFLLElBQU0sSUFBSzFDLEVBQU00QyxFQUFRaEUsRUFBUyxHQUFJaUcsR0FDN0osTUFFRCxLQUFLLEdBQUluQyxHQUFjLElBRXZCLFFBR0MsR0FGQSxFQUFPMkMsRUFBWUcsRUFBUTlDLEVBQVkvRSxFQUFNaUYsRUFBUVosRUFBTzhDLEVBQVFMLEVBQU9HLEVBQVEvQixFQUFNQyxFQUFRLEdBQUlDLEVBQVcsR0FBSW5FLEdBQVM4RixHQUUzRyxNQUFkakMsRUFDSCxHQUFlLElBQVhxQyxFQUNITixFQUFNOUIsRUFBWS9FLEVBQU0wSCxFQUFXQSxFQUFXdkMsRUFBTzRCLEVBQVU5RixFQUFRZ0csRUFBUTdCLFFBRS9FLE9BQW1CLEtBQVhnQyxHQUEyQyxNQUExQixFQUFPckMsRUFBWSxHQUFhLElBQU1xQyxHQUU5RCxLQUFLLElBQUssS0FBSyxJQUFLLEtBQUssSUFBSyxLQUFLLElBQ2xDUCxFQUFNL0MsRUFBTzRELEVBQVdBLEVBQVdyRixHQUFRLEVBQU93RixFQUFRL0QsRUFBTzRELEVBQVdBLEVBQVcsRUFBRyxFQUFHWixFQUFPRyxFQUFRL0IsRUFBTTRCLEVBQU8zQixFQUFRLEdBQUlsRSxHQUFTbUUsR0FBVzBCLEVBQU8xQixFQUFVbkUsRUFBUWdHLEVBQVE1RSxFQUFPOEMsRUFBUUMsR0FDek0sTUFDRCxRQUNDeUIsRUFBTTlCLEVBQVkyQyxFQUFXQSxFQUFXQSxFQUFXLENBQUMsSUFBS3RDLEVBQVUsRUFBRzZCLEVBQVE3QixJQUlwRmYsRUFBUThDLEVBQVNFLEVBQVcsRUFBR0UsRUFBV0UsRUFBWSxFQUFHdkMsRUFBT0gsRUFBYSxHQUFJOUQsRUFBUytGLEVBQzFGLE1BRUQsS0FBSyxHQUNKL0YsRUFBUyxFQUFJLEVBQU84RCxHQUFhc0MsRUFBV0MsRUFDN0MsUUFDQyxHQUFJQyxFQUFXLEVBQ2QsR0FBaUIsS0FBYnpDLElBQ0R5QyxPQUNFLEdBQWlCLEtBQWJ6QyxHQUFrQyxHQUFkeUMsS0FBNkIsS0FBVmpDLElBQy9DLFNBRUYsT0FBUVAsR0FBYyxFQUFLRCxHQUFZQSxFQUFZeUMsR0FFbEQsS0FBSyxHQUNKRSxFQUFZTixFQUFTLEVBQUksR0FBS3BDLEdBQWMsTUFBTyxHQUNuRCxNQUVELEtBQUssR0FDSmtDLEVBQU81QyxNQUFZLEVBQU9VLEdBQWMsR0FBSzBDLEVBQVdBLEVBQVksRUFDcEUsTUFFRCxLQUFLLEdBRVcsS0FBWGpDLE1BQ0hULEdBQWNjLEVBQVFOLE1BRXZCNkIsRUFBUzVCLElBQVEyQixFQUFTbEcsRUFBUyxFQUFPaUUsRUFBT0gsR0FBY29CLEVBQVdWLE1BQVdYLElBQ3JGLE1BRUQsS0FBSyxHQUNhLEtBQWJ3QyxHQUF5QyxHQUF0QixFQUFPdkMsS0FDN0J3QyxFQUFXLElBSWpCLE9BQU9SLENBQ1IsQ0FnQk8sU0FBU2MsRUFBUy9ELEVBQU85RCxFQUFNaUYsRUFBUVosRUFBTzhDLEVBQVFMLEVBQU9HLEVBQVEvQixFQUFNQyxFQUFPQyxFQUFVbkUsR0FLbEcsSUFKQSxJQUFJNkcsRUFBT1gsRUFBUyxFQUNoQjlFLEVBQWtCLElBQVg4RSxFQUFlTCxFQUFRLENBQUMsSUFDL0JpQixFQUFPLEVBQU8xRixHQUVUUSxFQUFJLEVBQUdtRixFQUFJLEVBQUdDLEVBQUksRUFBR3BGLEVBQUl3QixJQUFTeEIsRUFDMUMsSUFBSyxJQUFJcUYsRUFBSSxFQUFHQyxFQUFJLEVBQU9yRSxFQUFPZ0UsRUFBTyxFQUFHQSxFQUFPdkUsRUFBSXlFLEVBQUlmLEVBQU9wRSxLQUFNdUYsRUFBSXRFLEVBQU9vRSxFQUFJSCxJQUFRRyxHQUMxRkUsRUFBSXZFLEVBQUttRSxFQUFJLEVBQUkzRixFQUFLNkYsR0FBSyxJQUFNQyxFQUFJLEVBQVFBLEVBQUcsT0FBUTlGLEVBQUs2RixRQUNoRS9DLEVBQU04QyxLQUFPRyxHQUVoQixPQUFPcEQsRUFBS2xCLEVBQU85RCxFQUFNaUYsRUFBbUIsSUFBWGtDLEVBQWUsRUFBVWpDLEVBQU1DLEVBQU9DLEVBQVVuRSxFQUNsRixDQVFPLFNBQVMwRyxFQUFTN0QsRUFBTzlELEVBQU1pRixHQUNyQyxPQUFPRCxFQUFLbEIsRUFBTzlELEVBQU1pRixFQUFRbUIsRUFBUyxFSi9JbkN0QixHSStJaUQsRUFBT2hCLEVBQU8sR0FBSSxHQUFJLEVBQy9FLENBU08sU0FBUzhELEVBQWE5RCxFQUFPOUQsRUFBTWlGLEVBQVFoRSxHQUNqRCxPQUFPK0QsRUFBS2xCLEVBQU85RCxFQUFNaUYsRUFBUSxFQUFhLEVBQU9uQixFQUFPLEVBQUc3QyxHQUFTLEVBQU82QyxFQUFPN0MsRUFBUyxHQUFJLEdBQUlBLEVBQ3hHLENDOUxBLFNBQVNvSCxFQUFRQyxHQUNmLElBQUlDLEVBQVE1RSxPQUFPNkUsT0FBTyxNQUMxQixPQUFPLFNBQVVDLEdBRWYsWUFEbUIvRyxJQUFmNkcsRUFBTUUsS0FBb0JGLEVBQU1FLEdBQU9ILEVBQUdHLElBQ3ZDRixFQUFNRSxFQUNmLENBQ0YsQ0NEQSxJQUFJQyxFQUE4QixTQUFxQ25FLEVBQU8wQyxFQUFRNUMsR0FJcEYsSUFIQSxJQUFJaUQsRUFBVyxFQUNYeEMsRUFBWSxFQUdkd0MsRUFBV3hDLEVBQ1hBLEVBQVlVLElBRUssS0FBYjhCLEdBQWlDLEtBQWR4QyxJQUNyQm1DLEVBQU81QyxHQUFTLElBR2RxQixFQUFNWixJQUlWUyxJQUdGLE9BQU9kLEVBQU1GLEVBQU9NLEVBQ3RCLEVBa0RJOEQsR0FBK0IsSUFBSUMsUUFDbkNDLEdBQVMsU0FBZ0JyQyxHQUMzQixHQUFxQixTQUFqQkEsRUFBUXRCLE1BQW9Cc0IsRUFBUXZCLFVBRXhDdUIsRUFBUXZGLE9BQVMsR0FGakIsQ0FVQSxJQUpBLElBQUk2QyxFQUFRMEMsRUFBUTFDLE1BQ2hCbUIsRUFBU3VCLEVBQVF2QixPQUNqQjZELEVBQWlCdEMsRUFBUTVCLFNBQVdLLEVBQU9MLFFBQVU0QixFQUFRN0IsT0FBU00sRUFBT04sS0FFMUQsU0FBaEJNLEVBQU9DLE1BRVosS0FEQUQsRUFBU0EsRUFBT0EsUUFDSCxPQUlmLElBQTZCLElBQXpCdUIsRUFBUXJCLE1BQU1sRSxRQUF3QyxLQUF4QjZDLEVBQU1RLFdBQVcsSUFFL0NxRSxHQUFjSSxJQUFJOUQsTUFNbEI2RCxFQUFKLENBSUFILEdBQWNLLElBQUl4QyxHQUFTLEdBSzNCLElBSkEsSUFBSVMsRUFBUyxHQUNUSCxFQXJDUyxTQUFrQmhELEVBQU9tRCxHQUN0QyxPQUFPckIsRUE1Q0ssU0FBaUJxRCxFQUFRaEMsR0FFckMsSUFBSTVDLEdBQVMsRUFDVFMsRUFBWSxHQUVoQixHQUNFLE9BQVFZLEVBQU1aLElBQ1osS0FBSyxFQUVlLEtBQWRBLEdBQStCLEtBQVhVLE1BS3RCeUIsRUFBTzVDLEdBQVMsR0FHbEI0RSxFQUFPNUUsSUFBVXFFLEVBQTRCN0QsRUFBVyxFQUFHb0MsRUFBUTVDLEdBQ25FLE1BRUYsS0FBSyxFQUNINEUsRUFBTzVFLElBQVV3QixFQUFRZixHQUN6QixNQUVGLEtBQUssRUFFSCxHQUFrQixLQUFkQSxFQUFrQixDQUVwQm1FLElBQVM1RSxHQUFvQixLQUFYbUIsSUFBZ0IsTUFBUSxHQUMxQ3lCLEVBQU81QyxHQUFTNEUsRUFBTzVFLEdBQU9wRCxPQUM5QixLQUNGLENBSUYsUUFDRWdJLEVBQU81RSxJQUFVLEVBQUtTLFVBRW5CQSxFQUFZUyxLQUVyQixPQUFPMEQsQ0FDVCxDQUdpQkMsQ0FBUXZELEVBQU03QixHQUFRbUQsR0FDdkMsQ0FtQ2NrQyxDQUFTckYsRUFBT21ELEdBQ3hCbUMsRUFBY25FLEVBQU9FLE1BRWhCdEMsRUFBSSxFQUFHb0YsRUFBSSxFQUFHcEYsRUFBSWlFLEVBQU03RixPQUFRNEIsSUFDdkMsSUFBSyxJQUFJbUYsRUFBSSxFQUFHQSxFQUFJb0IsRUFBWW5JLE9BQVErRyxJQUFLQyxJQUMzQ3pCLEVBQVFyQixNQUFNOEMsR0FBS2hCLEVBQU9wRSxHQUFLaUUsRUFBTWpFLEdBQUdvQixRQUFRLE9BQVFtRixFQUFZcEIsSUFBTW9CLEVBQVlwQixHQUFLLElBQU1sQixFQUFNakUsRUFUM0csQ0F0QkEsQ0FrQ0YsRUFDSXdHLEdBQWMsU0FBcUI3QyxHQUNyQyxHQUFxQixTQUFqQkEsRUFBUXRCLEtBQWlCLENBQzNCLElBQUlwQixFQUFRMEMsRUFBUTFDLE1BR0ksTUFBeEJBLEVBQU1RLFdBQVcsSUFDTyxLQUF4QlIsRUFBTVEsV0FBVyxLQUVma0MsRUFBZ0IsT0FBSSxHQUNwQkEsRUFBUTFDLE1BQVEsR0FFcEIsQ0FDRixFQWdIQSxTQUFTLEdBQU9BLEVBQU83QyxHQUNyQixPUDFOSyxTQUFlNkMsRUFBTzdDLEdBQzVCLE9BQTBCLEdBQW5CLEVBQU82QyxFQUFPLE1BQWlCN0MsR0FBVSxFQUFLLEVBQU82QyxFQUFPLEtBQU8sRUFBSyxFQUFPQSxFQUFPLEtBQU8sRUFBSyxFQUFPQSxFQUFPLEtBQU8sRUFBSyxFQUFPQSxFQUFPLEdBQUssQ0FDdkosQ093TlV3RixDQUFLeEYsRUFBTzdDLElBRWxCLEtBQUssS0FDSCxPQUFPLEVBQVMsU0FBVzZDLEVBQVFBLEVBR3JDLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FFTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FFTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FFTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDSCxPQUFPLEVBQVNBLEVBQVFBLEVBRzFCLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0gsT0FBTyxFQUFTQSxFQUFRLEVBQU1BLEVBQVEsRUFBS0EsRUFBUUEsRUFHckQsS0FBSyxLQUNMLEtBQUssS0FDSCxPQUFPLEVBQVNBLEVBQVEsRUFBS0EsRUFBUUEsRUFHdkMsS0FBSyxLQUNILE9BQU8sRUFBU0EsRUFBUSxFQUFLLFFBQVVBLEVBQVFBLEVBR2pELEtBQUssS0FDSCxPQUFPLEVBQVNBLEVBQVEsRUFBUUEsRUFBTyxpQkFBa0IsRUFBUyxXQUFhLEVBQUssYUFBZUEsRUFHckcsS0FBSyxLQUNILE9BQU8sRUFBU0EsRUFBUSxFQUFLLGFBQWUsRUFBUUEsRUFBTyxjQUFlLElBQU1BLEVBR2xGLEtBQUssS0FDSCxPQUFPLEVBQVNBLEVBQVEsRUFBSyxpQkFBbUIsRUFBUUEsRUFBTyw0QkFBNkIsSUFBTUEsRUFHcEcsS0FBSyxLQUNILE9BQU8sRUFBU0EsRUFBUSxFQUFLLEVBQVFBLEVBQU8sU0FBVSxZQUFjQSxFQUd0RSxLQUFLLEtBQ0gsT0FBTyxFQUFTQSxFQUFRLEVBQUssRUFBUUEsRUFBTyxRQUFTLGtCQUFvQkEsRUFHM0UsS0FBSyxLQUNILE9BQU8sRUFBUyxPQUFTLEVBQVFBLEVBQU8sUUFBUyxJQUFNLEVBQVNBLEVBQVEsRUFBSyxFQUFRQSxFQUFPLE9BQVEsWUFBY0EsRUFHcEgsS0FBSyxLQUNILE9BQU8sRUFBUyxFQUFRQSxFQUFPLHFCQUFzQixLQUFPLEVBQVMsTUFBUUEsRUFHL0UsS0FBSyxLQUNILE9BQU8sRUFBUSxFQUFRLEVBQVFBLEVBQU8sZUFBZ0IsRUFBUyxNQUFPLGNBQWUsRUFBUyxNQUFPQSxFQUFPLElBQU1BLEVBR3BILEtBQUssS0FDTCxLQUFLLEtBQ0gsT0FBTyxFQUFRQSxFQUFPLG9CQUFxQixZQUc3QyxLQUFLLEtBQ0gsT0FBTyxFQUFRLEVBQVFBLEVBQU8sb0JBQXFCLEVBQVMsY0FBZ0IsRUFBSyxnQkFBaUIsYUFBYyxXQUFhLEVBQVNBLEVBQVFBLEVBR2hKLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDSCxPQUFPLEVBQVFBLEVBQU8sa0JBQW1CLEVBQVMsUUFBVUEsRUFHOUQsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssS0FDTCxLQUFLLEtBRUgsR0FBSSxFQUFPQSxHQUFTLEVBQUk3QyxFQUFTLEVBQUcsT0FBUSxFQUFPNkMsRUFBTzdDLEVBQVMsSUFFakUsS0FBSyxJQUVILEdBQWtDLEtBQTlCLEVBQU82QyxFQUFPN0MsRUFBUyxHQUFXLE1BR3hDLEtBQUssSUFDSCxPQUFPLEVBQVE2QyxFQUFPLG1CQUFvQixLQUFPLEVBQVAsVUFBaUMsR0FBb0MsS0FBN0IsRUFBT0EsRUFBTzdDLEVBQVMsR0FBWSxLQUFPLFVBQVk2QyxFQUcxSSxLQUFLLElBQ0gsT0FBUUksRUFBUUosRUFBTyxXQUFhLEdBQU8sRUFBUUEsRUFBTyxVQUFXLGtCQUFtQjdDLEdBQVU2QyxFQUFRQSxFQUU5RyxNQUdGLEtBQUssS0FFSCxHQUFrQyxNQUE5QixFQUFPQSxFQUFPN0MsRUFBUyxHQUFZLE1BR3pDLEtBQUssS0FDSCxPQUFRLEVBQU82QyxFQUFPLEVBQU9BLEdBQVMsSUFBTUksRUFBUUosRUFBTyxlQUFpQixNQUUxRSxLQUFLLElBQ0gsT0FBTyxFQUFRQSxFQUFPLElBQUssSUFBTSxHQUFVQSxFQUc3QyxLQUFLLElBQ0gsT0FBTyxFQUFRQSxFQUFPLHdCQUF5QixLQUFPLEdBQWdDLEtBQXRCLEVBQU9BLEVBQU8sSUFBYSxVQUFZLElBQXhELFVBQStFLEVBQS9FLFNBQXdHLEVBQUssV0FBYUEsRUFHN0ssTUFHRixLQUFLLEtBQ0gsT0FBUSxFQUFPQSxFQUFPN0MsRUFBUyxLQUU3QixLQUFLLElBQ0gsT0FBTyxFQUFTNkMsRUFBUSxFQUFLLEVBQVFBLEVBQU8scUJBQXNCLE1BQVFBLEVBRzVFLEtBQUssSUFDSCxPQUFPLEVBQVNBLEVBQVEsRUFBSyxFQUFRQSxFQUFPLHFCQUFzQixTQUFXQSxFQUcvRSxLQUFLLEdBQ0gsT0FBTyxFQUFTQSxFQUFRLEVBQUssRUFBUUEsRUFBTyxxQkFBc0IsTUFBUUEsRUFHOUUsT0FBTyxFQUFTQSxFQUFRLEVBQUtBLEVBQVFBLEVBR3pDLE9BQU9BLENBQ1QsQ0FFQSxJQXFDSXlGLEdBQWdDLG9CQUFiakgsU0FDbkJrSCxHQUF1QkQsUUFBWTdILEVDbmNyQixTQUFxQitILEdBRXJDLElBQUlsQixFQUFRLElBQUlLLFFBQ2hCLE9BQU8sU0FBVUgsR0FDZixHQUFJRixFQUFNbUIsSUFBSWpCLEdBRVosT0FBT0YsRUFBTVEsSUFBSU4sR0FHbkIsSUFBSWtCLEVEMmJDdEIsR0FBUSxXQUNiLElBQUlFLEVBQVEsQ0FBQyxFQUNiLE9BQU8sU0FBVXFCLEdBQ2YsT0FBT3JCLEVBQU1xQixFQUNmLENBQ0YsSUM5YkUsT0FEQXJCLEVBQU1TLElBQUlQLEVBQUtrQixHQUNSQSxDQUNULENBQ0YsQ0RzYm1ERSxHQVEvQ0MsR0FBdUIsQ0E5Q1osU0FBa0J0RCxFQUFTbkMsRUFBT2UsRUFBVWlCLEdBQ3pELEdBQUlHLEVBQVF2RixRQUFVLElBQVF1RixFQUFnQixPQUFHLE9BQVFBLEVBQVF0QixNQUMvRCxLQUFLLEVBQ0hzQixFQUFnQixPQUFJLEdBQU9BLEVBQVExQyxNQUFPMEMsRUFBUXZGLFFBQ2xELE1BRUYsS0FBSyxFQUNILE9BQU8sRUFBVSxDQUFDLEVBQUt1RixFQUFTLENBQzlCMUMsTUFBTyxFQUFRMEMsRUFBUTFDLE1BQU8sSUFBSyxJQUFNLE1BQ3RDdUMsR0FFUCxLQUFLLEVBQ0gsR0FBSUcsRUFBUXZGLE9BQVEsT1B6VG5CLFNBQWtCeUQsRUFBTzJCLEdBQy9CLE9BQU8zQixFQUFNcUYsSUFBSTFELEdBQVVJLEtBQUssR0FDakMsQ091VGlDLENBQVFELEVBQVFyQixPQUFPLFNBQVVyQixHQUMxRCxPUGxZRCxTQUFnQkEsRUFBT0MsR0FDN0IsT0FBUUQsRU9pWW9CLHdCUGpZSmtHLEtBQUtsRyxJQUFVQSxFQUFNLEdBQUtBLENBQ25ELENPZ1lnQixDQUFNQSxJQUVaLElBQUssYUFDTCxJQUFLLGNBQ0gsT0FBTyxFQUFVLENBQUMsRUFBSzBDLEVBQVMsQ0FDOUJyQixNQUFPLENBQUMsRUFBUXJCLEVBQU8sY0FBZSxnQkFDbkN1QyxHQUdQLElBQUssZ0JBQ0gsT0FBTyxFQUFVLENBQUMsRUFBS0csRUFBUyxDQUM5QnJCLE1BQU8sQ0FBQyxFQUFRckIsRUFBTyxhQUFjLElBQU0sRUFBUyxlQUNsRCxFQUFLMEMsRUFBUyxDQUNoQnJCLE1BQU8sQ0FBQyxFQUFRckIsRUFBTyxhQUFjLGVBQ25DLEVBQUswQyxFQUFTLENBQ2hCckIsTUFBTyxDQUFDLEVBQVFyQixFQUFPLGFBQWMsRUFBSyxnQkFDdkN1QyxHQUdULE1BQU8sRUFDVCxJQUVOLEdBYUk0RCxHQUFjLFNBQXFCdEosR0FDckMsSUFBSW1CLEVBQU1uQixFQUFRbUIsSUFNbEIsR0FBSXlILElBQXFCLFFBQVJ6SCxFQUFlLENBQzlCLElBQUlvSSxFQUFZNUgsU0FBUzZILGlCQUFpQixxQ0FLMUNDLE1BQU1wSSxVQUFVRyxRQUFRa0ksS0FBS0gsR0FBVyxTQUFVbEYsSUFTTCxJQUZoQkEsRUFBS3NGLGFBQWEsZ0JBRXBCbEcsUUFBUSxPQUdqQzlCLFNBQVNpSSxLQUFLOUgsWUFBWXVDLEdBQzFCQSxFQUFLeEMsYUFBYSxTQUFVLElBQzlCLEdBQ0YsQ0FFQSxJQVVJbkIsRUFrQkFtSixFQTVCQUMsRUFBZ0I5SixFQUFROEosZUFBaUJYLEdBU3pDWSxFQUFXLENBQUMsRUFFWkMsRUFBaUIsR0FFakJwQixLQUNGbEksRUFBWVYsRUFBUVUsV0FBYWlCLFNBQVNpSSxLQUMxQ0gsTUFBTXBJLFVBQVVHLFFBQVFrSSxLQUV4Qi9ILFNBQVM2SCxpQkFBaUIsd0JBQTJCckksRUFBTSxRQUFTLFNBQVVrRCxHQUc1RSxJQUZBLElBQUk0RixFQUFTNUYsRUFBS3NGLGFBQWEsZ0JBQWdCTyxNQUFNLEtBRTVDaEksRUFBSSxFQUFHQSxFQUFJK0gsRUFBTzNKLE9BQVE0QixJQUNqQzZILEVBQVNFLEVBQU8vSCxLQUFNLEVBR3hCOEgsRUFBZW5KLEtBQUt3RCxFQUN0QixLQUtGLElIOWV5QnFCLEVHOGVyQnlFLEVBQXFCLENBQUNqQyxHQUFRUSxJQVdsQyxHQUFJRSxHQUFXLENBQ2IsSUFBSXdCLEVBQ0FDLEVBQW9CLENBQUN6RSxHSDNmRkYsRUdxZ0JULFNBQVVoRSxHQUN0QjBJLEVBQWEzSSxPQUFPQyxFQUN0QixFSHRnQkksU0FBVW1FLEdBQ1hBLEVBQVF4RyxPQUNSd0csRUFBVUEsRUFBUW5CLFNBQ3JCZ0IsRUFBU0csRUFDWixJR21nQk95RSxFQUFhdkUsRUFBV29FLEVBQW1CSSxPQUFPVCxFQUFlTyxJQU1yRVIsRUFBVSxTQUFnQlcsRUFBVUMsRUFBWXhJLEVBQU95SSxHQUNyRE4sRUFBZW5JLEVBSlIsRUFBVWdFLEVBY1Z1RSxFQUFXQSxFQUFXLElBQU1DLEVBQVdFLE9BQVMsSUFBTUYsRUFBV0UsUUFkdENMLEdBZ0I5QkksSUFDRjlDLEVBQU1tQyxTQUFTVSxFQUFXeEIsT0FBUSxFQUV0QyxDQUNGLEtBQU8sQ0FDTCxJQUFJMkIsRUFBcUIsQ0FBQ2hGLEdBRXRCaUYsRUFBYzlFLEVBQVdvRSxFQUFtQkksT0FBT1QsRUFBZWMsSUFPbEVFLEVBQW9CakMsR0FBcUJpQixFQUFyQmpCLENBQW9DMUgsR0FZNUQwSSxFQUFVLFNBQWlCVyxFQUFVQyxFQUFZeEksRUFBT3lJLEdBQ3RELElBQUl6QixFQUFPd0IsRUFBV3hCLEtBQ2xCOUMsRUFaUyxTQUFrQnFFLEVBQVVDLEdBQ3pDLElBQUl4QixFQUFPd0IsRUFBV3hCLEtBTXRCLFlBSmdDbEksSUFBNUIrSixFQUFrQjdCLEtBQ3BCNkIsRUFBa0I3QixHQVZiLEVBQVVoRCxFQVVtQnVFLEVBQVdBLEVBQVcsSUFBTUMsRUFBV0UsT0FBUyxJQUFNRixFQUFXRSxRQVZuRUUsSUFhM0JDLEVBQWtCN0IsRUFDM0IsQ0FJY1QsQ0FBU2dDLEVBQVVDLEdBRS9CLFlBQXFCMUosSUFBakI2RyxFQUFNTSxRQUlKd0MsSUFDRjlDLEVBQU1tQyxTQUFTZCxJQUFRLEdBU2xCOUMsR0FTSHVFLE9BQ0Y5QyxFQUFNbUMsU0FBU2QsR0FBUTlDLEdBRWhCQSxDQUdiLENBQ0YsQ0FFQSxJQUFJeUIsRUFBUSxDQUNWekcsSUFBS0EsRUFDTGMsTUFBTyxJQUFJbEMsRUFBVyxDQUNwQm9CLElBQUtBLEVBQ0xULFVBQVdBLEVBQ1hRLE1BQU9sQixFQUFRa0IsTUFDZkYsT0FBUWhCLEVBQVFnQixPQUNoQlAsUUFBU1QsRUFBUVMsUUFDakJGLGVBQWdCUCxFQUFRTyxpQkFFMUJXLE1BQU9sQixFQUFRa0IsTUFDZjZJLFNBQVVBLEVBQ1ZnQixXQUFZLENBQUMsRUFDYnRKLE9BQVFvSSxHQUdWLE9BREFqQyxFQUFNM0YsTUFBTVgsUUFBUTBJLEdBQ2JwQyxDQUNULEVFcm9CSW9ELEdBQWUsQ0FDakJDLHdCQUF5QixFQUN6QkMsWUFBYSxFQUNiQyxrQkFBbUIsRUFDbkJDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxRQUFTLEVBQ1RDLGFBQWMsRUFDZEMsZ0JBQWlCLEVBQ2pCQyxZQUFhLEVBQ2JDLFFBQVMsRUFDVEMsS0FBTSxFQUNOQyxTQUFVLEVBQ1ZDLGFBQWMsRUFDZEMsV0FBWSxFQUNaQyxhQUFjLEVBQ2RDLFVBQVcsRUFDWEMsUUFBUyxFQUNUQyxXQUFZLEVBQ1pDLFlBQWEsRUFDYkMsYUFBYyxFQUNkQyxXQUFZLEVBQ1pDLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixFQUNqQkMsVUFBVyxFQUNYQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMsaUJBQWtCLEVBQ2xCQyxXQUFZLEVBQ1pDLFdBQVksRUFDWkMsUUFBUyxFQUNUQyxNQUFPLEVBQ1BDLFFBQVMsRUFDVEMsUUFBUyxFQUNUQyxPQUFRLEVBQ1JDLE9BQVEsRUFDUkMsS0FBTSxFQUNOQyxnQkFBaUIsRUFFakJDLFlBQWEsRUFDYkMsYUFBYyxFQUNkQyxZQUFhLEVBQ2JDLGdCQUFpQixFQUNqQkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLGNBQWUsRUFDZkMsWUFBYSxHQ3pDWEMsR0FBaUIsYUFDakJDLEdBQWlCLDhCQUVqQkMsR0FBbUIsU0FBMEJ2SCxHQUMvQyxPQUFrQyxLQUEzQkEsRUFBUy9DLFdBQVcsRUFDN0IsRUFFSXVLLEdBQXFCLFNBQTRCL0ssR0FDbkQsT0FBZ0IsTUFBVEEsR0FBa0Msa0JBQVZBLENBQ2pDLEVBRUlnTCxHQUFrQ3pHLEdBQVEsU0FBVTBHLEdBQ3RELE9BQU9ILEdBQWlCRyxHQUFhQSxFQUFZQSxFQUFVOUssUUFBUXlLLEdBQWdCLE9BQU9NLGFBQzVGLElBRUlDLEdBQW9CLFNBQTJCbk4sRUFBS2dDLEdBQ3RELE9BQVFoQyxHQUNOLElBQUssWUFDTCxJQUFLLGdCQUVELEdBQXFCLGlCQUFWZ0MsRUFDVCxPQUFPQSxFQUFNRyxRQUFRMEssSUFBZ0IsU0FBVU8sRUFBT0MsRUFBSUMsR0FNeEQsT0FMQUMsR0FBUyxDQUNQekYsS0FBTXVGLEVBQ043RCxPQUFROEQsRUFDUjdKLEtBQU04SixJQUVERixDQUNULElBS1IsT0FBc0IsSUFBbEIsR0FBU3JOLElBQWU4TSxHQUFpQjlNLElBQXlCLGlCQUFWZ0MsR0FBZ0MsSUFBVkEsRUFJM0VBLEVBSEVBLEVBQVEsSUFJbkIsRUFnQ0EsU0FBU3dMLEdBQW9CQyxFQUFhN0QsRUFBWThELEdBQ3BELEdBQXFCLE1BQWpCQSxFQUNGLE1BQU8sR0FHVCxRQUF1QzlOLElBQW5DOE4sRUFBY0MsaUJBS2hCLE9BQU9ELEVBR1QsY0FBZUEsR0FDYixJQUFLLFVBRUQsTUFBTyxHQUdYLElBQUssU0FFRCxHQUEyQixJQUF2QkEsRUFBY0UsS0FNaEIsT0FMQUwsR0FBUyxDQUNQekYsS0FBTTRGLEVBQWM1RixLQUNwQjBCLE9BQVFrRSxFQUFjbEUsT0FDdEIvRixLQUFNOEosSUFFREcsRUFBYzVGLEtBR3ZCLFFBQTZCbEksSUFBekI4TixFQUFjbEUsT0FBc0IsQ0FDdEMsSUFBSS9GLEVBQU9pSyxFQUFjakssS0FFekIsUUFBYTdELElBQVQ2RCxFQUdGLFVBQWdCN0QsSUFBVDZELEdBQ0w4SixHQUFTLENBQ1B6RixLQUFNckUsRUFBS3FFLEtBQ1gwQixPQUFRL0YsRUFBSytGLE9BQ2IvRixLQUFNOEosSUFFUjlKLEVBQU9BLEVBQUtBLEtBVWhCLE9BTmFpSyxFQUFjbEUsT0FBUyxHQU90QyxDQUVBLE9BMkNSLFNBQWdDaUUsRUFBYTdELEVBQVlpRSxHQUN2RCxJQUFJQyxFQUFTLEdBRWIsR0FBSXhGLE1BQU15RixRQUFRRixHQUNoQixJQUFLLElBQUk5TSxFQUFJLEVBQUdBLEVBQUk4TSxFQUFJMU8sT0FBUTRCLElBQzlCK00sR0FBVU4sR0FBb0JDLEVBQWE3RCxFQUFZaUUsRUFBSTlNLElBQU0sU0FHbkUsSUFBSyxJQUFJaU4sS0FBUUgsRUFBSyxDQUNwQixJQUFJN0wsRUFBUTZMLEVBQUlHLEdBRWhCLEdBQXFCLGlCQUFWaE0sRUFDUyxNQUFkNEgsUUFBNENoSyxJQUF0QmdLLEVBQVc1SCxHQUNuQzhMLEdBQVVFLEVBQU8sSUFBTXBFLEVBQVc1SCxHQUFTLElBQ2xDK0ssR0FBbUIvSyxLQUM1QjhMLEdBQVVkLEdBQWlCZ0IsR0FBUSxJQUFNYixHQUFrQmEsRUFBTWhNLEdBQVMsVUFPNUUsSUFBSXNHLE1BQU15RixRQUFRL0wsSUFBOEIsaUJBQWJBLEVBQU0sSUFBa0MsTUFBZDRILFFBQStDaEssSUFBekJnSyxFQUFXNUgsRUFBTSxJQU03RixDQUNMLElBQUlpTSxFQUFlVCxHQUFvQkMsRUFBYTdELEVBQVk1SCxHQUVoRSxPQUFRZ00sR0FDTixJQUFLLFlBQ0wsSUFBSyxnQkFFREYsR0FBVWQsR0FBaUJnQixHQUFRLElBQU1DLEVBQWUsSUFDeEQsTUFHSixRQU1JSCxHQUFVRSxFQUFPLElBQU1DLEVBQWUsSUFHOUMsTUF6QkUsSUFBSyxJQUFJQyxFQUFLLEVBQUdBLEVBQUtsTSxFQUFNN0MsT0FBUStPLElBQzlCbkIsR0FBbUIvSyxFQUFNa00sTUFDM0JKLEdBQVVkLEdBQWlCZ0IsR0FBUSxJQUFNYixHQUFrQmEsRUFBTWhNLEVBQU1rTSxJQUFPLElBeUJ4RixDQUdGLE9BQU9KLENBQ1QsQ0FqR2VLLENBQXVCVixFQUFhN0QsRUFBWThELEdBRzNELElBQUssV0FFRCxRQUFvQjlOLElBQWhCNk4sRUFBMkIsQ0FDN0IsSUFBSVcsRUFBaUJiLEdBQ2pCYyxFQUFTWCxFQUFjRCxHQUUzQixPQURBRixHQUFTYSxFQUNGWixHQUFvQkMsRUFBYTdELEVBQVl5RSxFQUN0RCxFQXlCTixHQUFrQixNQUFkekUsRUFDRixPQUFPOEQsRUFHVCxJQUFJWSxFQUFTMUUsRUFBVzhELEdBQ3hCLFlBQWtCOU4sSUFBWDBPLEVBQXVCQSxFQUFTWixDQUN6QyxDQTBEQSxJQVNJSCxHQVRBZ0IsR0FBZSxpQ0FVZkMsR0FBa0IsU0FBeUJDLEVBQU03RSxFQUFZNkQsR0FDL0QsR0FBb0IsSUFBaEJnQixFQUFLdFAsUUFBbUMsaUJBQVpzUCxFQUFLLElBQStCLE9BQVpBLEVBQUssU0FBa0M3TyxJQUFuQjZPLEVBQUssR0FBR2pGLE9BQ2xGLE9BQU9pRixFQUFLLEdBR2QsSUFBSUMsR0FBYSxFQUNibEYsRUFBUyxHQUNiK0QsUUFBUzNOLEVBQ1QsSUFBSStPLEVBQVVGLEVBQUssR0FFSixNQUFYRSxRQUFtQy9PLElBQWhCK08sRUFBUUMsS0FDN0JGLEdBQWEsRUFDYmxGLEdBQVVnRSxHQUFvQkMsRUFBYTdELEVBQVkrRSxJQU12RG5GLEdBQVVtRixFQUFRLEdBSXBCLElBQUssSUFBSTVOLEVBQUksRUFBR0EsRUFBSTBOLEVBQUt0UCxPQUFRNEIsSUFDL0J5SSxHQUFVZ0UsR0FBb0JDLEVBQWE3RCxFQUFZNkUsRUFBSzFOLElBRXhEMk4sSUFLRmxGLEdBQVVtRixFQUFRNU4sSUFjdEJ3TixHQUFhTSxVQUFZLEVBSXpCLElBSEEsSUFDSXpCLEVBREEwQixFQUFpQixHQUcwQixRQUF2QzFCLEVBQVFtQixHQUFhckcsS0FBS3NCLEtBQ2hDc0YsR0FBa0IsSUFDbEIxQixFQUFNLEdBR1IsSUFBSXRGLEVDbFNOLFNBQWlCaUgsR0FZZixJQU5BLElBRUk1SSxFQUZBNkksRUFBSSxFQUdKak8sRUFBSSxFQUNKa08sRUFBTUYsRUFBSTVQLE9BRVA4UCxHQUFPLElBQUtsTyxFQUFHa08sR0FBTyxFQUUzQjlJLEVBRWUsWUFBVixPQUhMQSxFQUF3QixJQUFwQjRJLEVBQUl2TSxXQUFXekIsSUFBbUMsSUFBdEJnTyxFQUFJdk0sYUFBYXpCLEtBQWMsR0FBMkIsSUFBdEJnTyxFQUFJdk0sYUFBYXpCLEtBQWMsSUFBNEIsSUFBdEJnTyxFQUFJdk0sYUFBYXpCLEtBQWMsTUFHOUYsT0FBWm9GLElBQU0sS0FBZ0IsSUFJcEQ2SSxFQUVlLFlBQVYsT0FMTDdJLEdBRUFBLElBQU0sTUFHb0MsT0FBWkEsSUFBTSxLQUFnQixJQUVyQyxZQUFWLE1BQUo2SSxJQUF5QyxPQUFaQSxJQUFNLEtBQWdCLElBSXRELE9BQVFDLEdBQ04sS0FBSyxFQUNIRCxJQUE4QixJQUF4QkQsRUFBSXZNLFdBQVd6QixFQUFJLEtBQWMsR0FFekMsS0FBSyxFQUNIaU8sSUFBOEIsSUFBeEJELEVBQUl2TSxXQUFXekIsRUFBSSxLQUFjLEVBRXpDLEtBQUssRUFFSGlPLEVBRWUsWUFBVixPQUhMQSxHQUF5QixJQUFwQkQsRUFBSXZNLFdBQVd6QixNQUdzQixPQUFaaU8sSUFBTSxLQUFnQixJQVN4RCxTQUhBQSxFQUVlLFlBQVYsT0FITEEsR0FBS0EsSUFBTSxNQUcrQixPQUFaQSxJQUFNLEtBQWdCLEtBQ3ZDQSxJQUFNLE1BQVEsR0FBR0UsU0FBUyxHQUN6QyxDRGlQYSxDQUFXMUYsR0FBVXNGLEVBZWhDLE1BQU8sQ0FDTGhILEtBQU1BLEVBQ04wQixPQUFRQSxFQUNSL0YsS0FBTThKLEdBRVYsRUV6VEksR0FBZ0Msb0JBQWIvTSxTQUN2QixTQUFTMk8sR0FBb0J2RixFQUFZd0YsRUFBa0JDLEdBQ3pELElBQUlDLEVBQWUsR0FRbkIsT0FQQUQsRUFBV3RHLE1BQU0sS0FBSzFJLFNBQVEsU0FBVWtQLFFBQ1IzUCxJQUExQmdLLEVBQVcyRixHQUNiSCxFQUFpQjFQLEtBQUtrSyxFQUFXMkYsR0FBYSxLQUU5Q0QsR0FBZ0JDLEVBQVksR0FFaEMsSUFDT0QsQ0FDVCxDQ1BBLFNBQVNFLEdBQXFCL0ksRUFBTzZDLEdBQ25DLFFBQXdDMUosSUFBcEM2RyxFQUFNbUMsU0FBU1UsRUFBV3hCLE1BQzVCLE9BQU9yQixFQUFNbkcsT0FBTyxHQUFJZ0osRUFBWTdDLEVBQU0zRixPQUFPLEVBRXJELENBRUEsU0FBUzJPLEdBQU03RixFQUFZOEYsRUFBS0gsR0FDOUIsSUFBSUgsRUFBbUIsR0FDbkJFLEVBQWVILEdBQW9CdkYsRUFBWXdGLEVBQWtCRyxHQUVyRSxPQUFJSCxFQUFpQmpRLE9BQVMsRUFDckJvUSxFQUdGRCxFQUFlSSxFQUFJTixFQUM1QixDQUVBLElBNkVJTyxHQUFhLFNBQVNBLEVBQVdsQixHQUduQyxJQUZBLElBQUltQixFQUFNLEdBRUQ3TyxFQUFJLEVBQUdBLEVBQUkwTixFQUFLdFAsT0FBUTRCLElBQUssQ0FDcEMsSUFBSTRGLEVBQU04SCxFQUFLMU4sR0FDZixHQUFXLE1BQVA0RixFQUFKLENBQ0EsSUFBSWtKLE9BQVEsRUFFWixjQUFlbEosR0FDYixJQUFLLFVBQ0gsTUFFRixJQUFLLFNBRUQsR0FBSTJCLE1BQU15RixRQUFRcEgsR0FDaEJrSixFQUFRRixFQUFXaEosUUFJbkIsSUFBSyxJQUFJUixLQUZUMEosRUFBUSxHQUVNbEosRUFDUkEsRUFBSVIsSUFBTUEsSUFDWjBKLElBQVVBLEdBQVMsS0FDbkJBLEdBQVMxSixHQUtmLE1BR0osUUFFSTBKLEVBQVFsSixFQUlWa0osSUFDRkQsSUFBUUEsR0FBTyxLQUNmQSxHQUFPQyxFQWpDZ0IsQ0FtQzNCLENBRUEsT0FBT0QsQ0FDVCxFQ3hJSUUsR0RnQmdCLFNBQXVCalIsR0FDekMsSUFBSTRILEVBQVEwQixHQ2pCcUIsQ0FDakNuSSxJQUFLLFFEa0JMeUcsRUFBTTNGLE1BQU1qQixPQUFTLFNBQVVtQyxHQUs3QnZELEtBQUtrQixTQUFXcUMsQ0FDbEIsRUFFQXlFLEVBQU1NLFFBQVMsRUFFZixJQUFJMkksRUFBTSxXQUNSLElBQUssSUFBSUssRUFBT0MsVUFBVTdRLE9BQVFzUCxFQUFPLElBQUluRyxNQUFNeUgsR0FBTy9CLEVBQU8sRUFBR0EsRUFBTytCLEVBQU0vQixJQUMvRVMsRUFBS1QsR0FBUWdDLFVBQVVoQyxHQUd6QixJQUFJMUUsRUFBYWtGLEdBQWdCQyxFQUFNaEksRUFBTW1ELGdCQUFZaEssR0FFekQsT0RiZSxTQUFzQjZHLEVBQU82QyxFQUFZMkcsSUFoQnZDLFNBQXdCeEosRUFBTzZDLEVBQVkyRyxHQUM5RCxJQUFJVixFQUFZOUksRUFBTXpHLElBQU0sSUFBTXNKLEVBQVd4QixPQU81QixJQUFoQm1JLElBSWEsSUFBZCxTQUF3Q3JRLElBQWpCNkcsRUFBTU0sY0FBeURuSCxJQUFoQzZHLEVBQU1tRCxXQUFXMkYsS0FDckU5SSxFQUFNbUQsV0FBVzJGLEdBQWFqRyxFQUFXRSxPQUU3QyxDQUVFMEcsQ0FBZXpKLEVBQU82QyxFQUFZMkcsR0FDbEMsSUFBSVYsRUFBWTlJLEVBQU16RyxJQUFNLElBQU1zSixFQUFXeEIsS0FFN0MsUUFBd0NsSSxJQUFwQzZHLEVBQU1tQyxTQUFTVSxFQUFXeEIsTUFBcUIsQ0FDakQsSUFBSXFJLEVBQWUsR0FDZkMsRUFBVTlHLEVBRWQsRUFBRyxDQUNELElBQUkrRyxFQUFjNUosRUFBTW5HLE9BQU9nSixJQUFlOEcsRUFBVSxJQUFNYixFQUFZLEdBQUlhLEVBQVMzSixFQUFNM0YsT0FBTyxHQUUvRixTQUE2QmxCLElBQWhCeVEsSUFDaEJGLEdBQWdCRSxHQUdsQkQsRUFBVUEsRUFBUTNNLElBQ3BCLFlBQXFCN0QsSUFBWndRLEdBRVQsSUFBSyxJQUFxQyxJQUF4QkQsRUFBYWhSLFFBR2pDLENBQ0YsQ0NWSW1SLENBQWE3SixFQUFPNkMsR0FBWSxHQUN6QjdDLEVBQU16RyxJQUFNLElBQU1zSixFQUFXeEIsSUFDdEMsRUFpQ0EsTUFBTyxDQUNMNEgsSUFBS0EsRUFDTGEsR0FWTyxXQUNQLElBQUssSUFBSUMsRUFBUVIsVUFBVTdRLE9BQVFzUCxFQUFPLElBQUluRyxNQUFNa0ksR0FBUUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUNwRmhDLEVBQUtnQyxHQUFTVCxVQUFVUyxHQUcxQixPQUFPaEIsR0FBTWhKLEVBQU1tRCxXQUFZOEYsRUFBS0MsR0FBV2xCLEdBQ2pELEVBS0VpQyxhQXBCaUIsV0FDakIsSUFBSyxJQUFJQyxFQUFRWCxVQUFVN1EsT0FBUXNQLEVBQU8sSUFBSW5HLE1BQU1xSSxHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BGbkMsRUFBS21DLEdBQVNaLFVBQVVZLEdBRzFCLElBQUl0SCxFQUFha0YsR0FBZ0JDLEVBQU1oSSxFQUFNbUQsWUFDN0M0RixHQUFxQi9JLEVBQU82QyxFQUM5QixFQWNFdUgsVUFuQ2MsV0FDZCxJQUFLLElBQUlDLEVBQVFkLFVBQVU3USxPQUFRc1AsRUFBTyxJQUFJbkcsTUFBTXdJLEdBQVFDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsSUFDcEZ0QyxFQUFLc0MsR0FBU2YsVUFBVWUsR0FHMUIsSUFBSXpILEVBQWFrRixHQUFnQkMsRUFBTWhJLEVBQU1tRCxZQUN6Q29ILEVBQVksYUFBZTFILEVBQVd4QixLQUsxQyxPQUpBMEgsR0FBcUIvSSxFQUFPLENBQzFCcUIsS0FBTXdCLEVBQVd4QixLQUNqQjBCLE9BQVEsY0FBZ0J3SCxFQUFZLElBQU0xSCxFQUFXRSxPQUFTLE1BRXpEd0gsQ0FDVCxFQXdCRTdRLFFBQVMsU0FBaUI4USxHQUN4QkEsRUFBSTVRLFNBQVEsU0FBVUwsR0FDcEJ5RyxFQUFNbUMsU0FBUzVJLElBQU8sQ0FDeEIsR0FDRixFQUNBc0IsTUFBTyxXQUNMbUYsRUFBTW1ELFdBQWEsQ0FBQyxFQUNwQm5ELEVBQU1tQyxTQUFXLENBQUMsRUFDbEJuQyxFQUFNM0YsTUFBTVEsT0FDZCxFQUVBUixNQUFPMkYsRUFBTTNGLE1BQ2IyRixNQUFPQSxFQUNQMEksb0JBQXFCQSxHQUFvQitCLEtBQUssS0FBTXpLLEVBQU1tRCxZQUMxRDZGLE1BQU9BLEdBQU15QixLQUFLLEtBQU16SyxFQUFNbUQsV0FBWThGLEdBRTlDLENDM0ZxQnlCLEdBR2pCN1AsR0FBUXdPLEdBQWV4TyxNQUN2Qm5CLEdBQVUyUCxHQUFlM1AsUUFDekJvUSxHQUFLVCxHQUFlUyxHQUNwQixHQUFRVCxHQUFlTCxNQUN2QixHQUFzQkssR0FBZVgsb0JBQ3JDdUIsR0FBZVosR0FBZVksYUFDOUJHLEdBQVlmLEdBQWVlLFVBQzNCbkIsR0FBTUksR0FBZUosSUFDckI1TyxHQUFRZ1AsR0FBZWhQLE1BQ3ZCMkYsR0FBUXFKLEdBQWVySixxQkNqQjNCcEksRUFBT0QsUUFBUSxTQUFTaUQsR0FBRyxJQUFJK1AsRUFBRSxDQUFDLEVBQUUsU0FBU0MsRUFBRUMsR0FBRyxHQUFHRixFQUFFRSxHQUFHLE9BQU9GLEVBQUVFLEdBQUdsVCxRQUFRLElBQUltVCxFQUFFSCxFQUFFRSxHQUFHLENBQUN2USxFQUFFdVEsRUFBRUUsR0FBRSxFQUFHcFQsUUFBUSxDQUFDLEdBQUcsT0FBT2lELEVBQUVpUSxHQUFHL0ksS0FBS2dKLEVBQUVuVCxRQUFRbVQsRUFBRUEsRUFBRW5ULFFBQVFpVCxHQUFHRSxFQUFFQyxHQUFFLEVBQUdELEVBQUVuVCxPQUFPLENBQUMsT0FBT2lULEVBQUVJLEVBQUVwUSxFQUFFZ1EsRUFBRUssRUFBRU4sRUFBRUMsRUFBRU0sRUFBRSxTQUFTdFEsRUFBRStQLEVBQUVFLEdBQUdELEVBQUVFLEVBQUVsUSxFQUFFK1AsSUFBSXZQLE9BQU8rUCxlQUFldlEsRUFBRStQLEVBQUUsQ0FBQ1MsWUFBVyxFQUFHNUssSUFBSXFLLEdBQUcsRUFBRUQsRUFBRUEsRUFBRSxTQUFTaFEsR0FBRyxvQkFBb0J5USxRQUFRQSxPQUFPQyxhQUFhbFEsT0FBTytQLGVBQWV2USxFQUFFeVEsT0FBT0MsWUFBWSxDQUFDL1AsTUFBTSxXQUFXSCxPQUFPK1AsZUFBZXZRLEVBQUUsYUFBYSxDQUFDVyxPQUFNLEdBQUksRUFBRXFQLEVBQUVELEVBQUUsU0FBUy9QLEVBQUUrUCxHQUFHLEdBQUcsRUFBRUEsSUFBSS9QLEVBQUVnUSxFQUFFaFEsSUFBSSxFQUFFK1AsRUFBRSxPQUFPL1AsRUFBRSxHQUFHLEVBQUUrUCxHQUFHLGlCQUFpQi9QLEdBQUdBLEdBQUdBLEVBQUUyUSxXQUFXLE9BQU8zUSxFQUFFLElBQUlpUSxFQUFFelAsT0FBTzZFLE9BQU8sTUFBTSxHQUFHMkssRUFBRUEsRUFBRUMsR0FBR3pQLE9BQU8rUCxlQUFlTixFQUFFLFVBQVUsQ0FBQ08sWUFBVyxFQUFHN1AsTUFBTVgsSUFBSSxFQUFFK1AsR0FBRyxpQkFBaUIvUCxFQUFFLElBQUksSUFBSWtRLEtBQUtsUSxFQUFFZ1EsRUFBRU0sRUFBRUwsRUFBRUMsRUFBRSxTQUFTSCxHQUFHLE9BQU8vUCxFQUFFK1AsRUFBRSxFQUFFRixLQUFLLEtBQUtLLElBQUksT0FBT0QsQ0FBQyxFQUFFRCxFQUFFQyxFQUFFLFNBQVNqUSxHQUFHLElBQUkrUCxFQUFFL1AsR0FBR0EsRUFBRTJRLFdBQVcsV0FBVyxPQUFPM1EsRUFBRTRRLE9BQU8sRUFBRSxXQUFXLE9BQU81USxDQUFDLEVBQUUsT0FBT2dRLEVBQUVNLEVBQUVQLEVBQUUsSUFBSUEsR0FBR0EsQ0FBQyxFQUFFQyxFQUFFRSxFQUFFLFNBQVNsUSxFQUFFK1AsR0FBRyxPQUFPdlAsT0FBTzNCLFVBQVVnUyxlQUFlM0osS0FBS2xILEVBQUUrUCxFQUFFLEVBQUVDLEVBQUVjLEVBQUUsR0FBR2QsRUFBRUEsRUFBRWUsRUFBRSxFQUFFLENBQW41QixDQUFxNUIsQ0FBQyxTQUFTL1EsRUFBRStQLEdBQUcvUCxFQUFFakQsUUFBUSxFQUFRLEdBQWEsRUFBRSxTQUFTaUQsRUFBRStQLEdBQUcvUCxFQUFFakQsUUFBUSxFQUFRLElBQVEsRUFBRSxTQUFTaUQsRUFBRStQLEVBQUVDLEdBQUcsYUFBYUEsRUFBRUEsRUFBRUQsR0FBRyxJQUFJRSxFQUFFRCxFQUFFLEdBQUdFLEVBQUVGLEVBQUUsR0FBR0csRUFBRSxXQUFXLE9BQU9BLEVBQUUzUCxPQUFPQyxRQUFRLFNBQVNULEdBQUcsSUFBSSxJQUFJK1AsRUFBRUMsRUFBRSxFQUFFQyxFQUFFdEIsVUFBVTdRLE9BQU9rUyxFQUFFQyxFQUFFRCxJQUFJLElBQUksSUFBSUUsS0FBS0gsRUFBRXBCLFVBQVVxQixHQUFHeFAsT0FBTzNCLFVBQVVnUyxlQUFlM0osS0FBSzZJLEVBQUVHLEtBQUtsUSxFQUFFa1EsR0FBR0gsRUFBRUcsSUFBSSxPQUFPbFEsQ0FBQyxHQUFHZ1IsTUFBTTVULEtBQUt1UixVQUFVLEVBQThVc0MsRUFBRSxFQUFFRixFQUFFZCxFQUFFaUIsWUFBVyxTQUFVbFIsRUFBRStQLEdBQUcsSUFBSUMsRUFBRWhRLEVBQUVtUixNQUFNakIsT0FBRSxJQUFTRixFQUFFLEtBQUtBLEVBQUVlLEVBQUUvUSxFQUFFb1IsWUFBWWYsT0FBRSxJQUFTVSxFQUFFLEtBQUtBLEVBQUVNLEVBQUVyUixFQUFFNEUsS0FBS2tNLE9BQUUsSUFBU08sRUFBRSxLQUFLQSxFQUFFQyxFQUFFdFIsRUFBRXVSLE1BQU1qQixPQUFFLElBQVNnQixFQUFFLGVBQWVBLEVBQUV0TSxFQUFFaEYsRUFBRXdSLFdBQVdDLE9BQUUsSUFBU3pNLEVBQUUsS0FBS0EsRUFBRTBNLEVBQUUxUixFQUFFMlIsU0FBU3ZCLE9BQUUsSUFBU3NCLEVBQUUsS0FBS0EsRUFBRS9ELEVBQUUzTixFQUFFNFIsT0FBT0MsT0FBRSxJQUFTbEUsRUFBRSxLQUFLQSxFQUFFbUUsRUFBRTlSLEVBQUUrUixLQUFLQyxPQUFFLElBQVNGLEVBQUUsS0FBS0EsRUFBRWpOLEVBQUU3RSxFQUFFaVMsTUFBTWhOLE9BQUUsSUFBU0osRUFBRSxDQUFDLEVBQUVBLEVBQUVxTixFQUFFbFMsRUFBRWlDLFNBQVNrUSxFQUFocUIsU0FBU25TLEVBQUUrUCxHQUFHLElBQUlDLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSUMsS0FBS2pRLEVBQUVRLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUtsSCxFQUFFaVEsSUFBSUYsRUFBRTlPLFFBQVFnUCxHQUFHLElBQUlELEVBQUVDLEdBQUdqUSxFQUFFaVEsSUFBSSxHQUFHLE1BQU1qUSxHQUFHLG1CQUFtQlEsT0FBTzRSLHNCQUFzQixDQUFDLElBQUlsQyxFQUFFLEVBQUUsSUFBSUQsRUFBRXpQLE9BQU80UixzQkFBc0JwUyxHQUFHa1EsRUFBRUQsRUFBRW5TLE9BQU9vUyxJQUFJSCxFQUFFOU8sUUFBUWdQLEVBQUVDLElBQUksR0FBRzFQLE9BQU8zQixVQUFVd1QscUJBQXFCbkwsS0FBS2xILEVBQUVpUSxFQUFFQyxNQUFNRixFQUFFQyxFQUFFQyxJQUFJbFEsRUFBRWlRLEVBQUVDLElBQUksQ0FBQyxPQUFPRixDQUFDLENBQTBWdFEsQ0FBRU0sRUFBRSxDQUFDLFFBQVEsY0FBYyxPQUFPLFFBQVEsYUFBYSxXQUFXLFNBQVMsT0FBTyxRQUFRLGFBQWFpUixJQUFJLElBQUlxQixFQUFFdk4sRUFBRSxPQUFPaU4sR0FBR0EsRUFBRU8sRUFBRXRDLEVBQUV1QyxTQUFTNUwsSUFBSXNMLEdBQUUsU0FBVWxTLEdBQUcsSUFBSStQLEVBQUUvUCxHQUFFLElBQUsrRSxJQUFJQSxHQUFFLEtBQU0sT0FBT2lOLEVBQUVqQyxFQUFFL04sTUFBTStQLEtBQUtDLElBQUksSUFBSWhDLEVBQUVELEVBQUUvTixNQUFNNEMsS0FBSyxpQkFBaUJrTSxHQUFHLGlCQUFpQmYsRUFBRS9OLE1BQU00QyxPQUFPb0wsRUFBRUQsRUFBRS9OLE1BQU00QyxLQUFLa00sR0FBRyxJQUFJWixFQUFFLENBQUN0TCxLQUFLb0wsRUFBRXVCLE1BQU0sT0FBT2pCLEVBQUVQLEVBQUUvTixNQUFNdVAsTUFBTWpCLEVBQUVrQixXQUFXLE9BQU9DLEVBQUUxQixFQUFFL04sTUFBTXdQLFdBQVdDLEVBQUVFLFNBQVMsT0FBT3ZCLEVBQUVMLEVBQUUvTixNQUFNMlAsU0FBU3ZCLEVBQUV3QixPQUFPLE9BQU9DLEVBQUU5QixFQUFFL04sTUFBTTRQLE9BQU9DLEVBQUVFLEtBQUssT0FBT0MsRUFBRWpDLEVBQUUvTixNQUFNK1AsS0FBS0MsRUFBRVMsU0FBUSxHQUFJLE9BQU94QyxFQUFFeUMsYUFBYTNDLEVBQUVHLEVBQUcsSUFBRyxPQUFPWSxJQUFJN0wsRUFBRTBOLE1BQU0saUJBQWlCN0IsRUFBRUEsRUFBRSxJQUFJQSxFQUFFLE9BQU8sSUFBSWhNLEVBQUU4TixFQUFFLG9CQUFvQjNCLEVBQUU0QixFQUFFLHFCQUFxQjVCLEVBQUUsR0FBR2YsRUFBRW9DLEVBQUVqQyxFQUFFdUMsRUFBRSxJQUFJQyxFQUFFRCxPQUFPLEdBQUc5TixFQUFFLGVBQWV1TCxFQUFFLE1BQU0sSUFBSXlDLE1BQU0sb0RBQW9ELE9BQU83QyxFQUFFN1EsY0FBYyxNQUFNK1EsRUFBRSxDQUFDNEMsSUFBSWhELEVBQUVpRCxRQUFRLFlBQVlmLE1BQU1oTixFQUFFZ08sS0FBS25PLEVBQUUsa0JBQWtCd04sR0FBR0gsR0FBR2pDLEdBQUdELEVBQUU3USxjQUFjLFFBQVEsQ0FBQzhULEdBQUdOLEdBQUcxQyxHQUFHRyxHQUFHSixFQUFFN1EsY0FBYyxPQUFPLENBQUM4VCxHQUFHTCxHQUFHeEMsR0FBR3RMLEdBQUdrTCxFQUFFN1EsY0FBYyxRQUFRLEtBQUssd0ZBQXdGLGtHQUFrR21ULEVBQUcsSUFBR3hCLEVBQUVvQyxZQUFZLFFBQVFwQyxFQUFFcUMsVUFBVSxDQUFDeE8sS0FBS3NMLEVBQUVtRCxVQUFVLENBQUNuRCxFQUFFb0QsT0FBT3BELEVBQUV6RCxTQUFTOEUsTUFBTXJCLEVBQUV6RCxPQUFPK0UsV0FBV3RCLEVBQUVxRCxLQUFLNUIsU0FBU3pCLEVBQUVxRCxLQUFLM0IsT0FBTzFCLEVBQUVvRCxPQUFPdkIsS0FBSzdCLEVBQUVtRCxVQUFVLENBQUNuRCxFQUFFcUQsS0FBS3JELEVBQUVvRCxTQUFTclIsU0FBU2lPLEVBQUVtRCxVQUFVLENBQUNuRCxFQUFFc0QsUUFBUXRELEVBQUVyTyxNQUFNcU8sRUFBRXJPLE9BQU80UixXQUFXdkYsVUFBVWdDLEVBQUV6RCxPQUFPd0YsTUFBTS9CLEVBQUV3RCxRQUFRM0MsRUFBRTRDLGFBQWEsQ0FBQy9PLEtBQUssS0FBSzJNLE1BQU0sS0FBS0MsV0FBVyxLQUFLRyxTQUFTLEtBQUtDLE9BQU8sS0FBS0csS0FBSyxNQUFNLElBQUkxQixFQUFFVSxFQUFFZixFQUFFTSxFQUFFUCxFQUFFLFFBQU8sV0FBWSxPQUFPTyxDQUFFLElBQUdOLEVBQUVNLEVBQUVQLEVBQUUsU0FBUSxXQUFZLE9BQU9NLENBQUUsSUFBRyxJQUFJZ0IsRUFBRSxXQUFXLE9BQU9BLEVBQUU3USxPQUFPQyxRQUFRLFNBQVNULEdBQUcsSUFBSSxJQUFJK1AsRUFBRUMsRUFBRSxFQUFFQyxFQUFFdEIsVUFBVTdRLE9BQU9rUyxFQUFFQyxFQUFFRCxJQUFJLElBQUksSUFBSUUsS0FBS0gsRUFBRXBCLFVBQVVxQixHQUFHeFAsT0FBTzNCLFVBQVVnUyxlQUFlM0osS0FBSzZJLEVBQUVHLEtBQUtsUSxFQUFFa1EsR0FBR0gsRUFBRUcsSUFBSSxPQUFPbFEsQ0FBQyxHQUFHZ1IsTUFBTTVULEtBQUt1UixVQUFVLEVBQThVMkMsRUFBRSxFQUFFaEIsRUFBRUwsRUFBRWlCLFlBQVcsU0FBVWxSLEVBQUUrUCxHQUFHLElBQUlDLEVBQUVoUSxFQUFFNFQsS0FBSzFELEVBQUVsUSxFQUFFa1QsR0FBRy9DLE9BQUUsSUFBU0QsSUFBSW9CLEVBQUVwQixFQUFFeFEsRUFBRU0sRUFBRW1SLE1BQU1GLE9BQUUsSUFBU3ZSLEVBQUUsS0FBS0EsRUFBRXFSLEVBQUUvUSxFQUFFb1IsWUFBWWYsT0FBRSxJQUFTVSxFQUFFLEtBQUtBLEVBQUVULEVBQUV0USxFQUFFNEUsS0FBS0ksT0FBRSxJQUFTc0wsRUFBRSxLQUFLQSxFQUFFbUIsRUFBRXpSLEVBQUV1UixNQUFNRyxPQUFFLElBQVNELEVBQUUsZUFBZUEsRUFBRXJCLEVBQUVwUSxFQUFFd1IsV0FBVzdELE9BQUUsSUFBU3lDLEdBQUdBLEVBQUV5QixFQUFFN1IsRUFBRTJSLFNBQVNHLE9BQUUsSUFBU0QsR0FBR0EsRUFBRUcsRUFBRWhTLEVBQUU0UixPQUFPL00sT0FBRSxJQUFTbU4sRUFBRSxFQUFFQSxFQUFFL00sRUFBRWpGLEVBQUUrUixLQUFLRyxPQUFFLElBQVNqTixHQUFHQSxFQUFFa04sRUFBRW5TLEVBQUVpUyxNQUFNSyxPQUFFLElBQVNILEVBQUUsQ0FBQyxFQUFFQSxFQUFFcE4sRUFBRS9FLEVBQUV5UyxRQUFRRixPQUFFLElBQVN4TixHQUFHQSxFQUFFRCxFQUFuc0IsU0FBUzlFLEVBQUUrUCxHQUFHLElBQUlDLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSUMsS0FBS2pRLEVBQUVRLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUtsSCxFQUFFaVEsSUFBSUYsRUFBRTlPLFFBQVFnUCxHQUFHLElBQUlELEVBQUVDLEdBQUdqUSxFQUFFaVEsSUFBSSxHQUFHLE1BQU1qUSxHQUFHLG1CQUFtQlEsT0FBTzRSLHNCQUFzQixDQUFDLElBQUlsQyxFQUFFLEVBQUUsSUFBSUQsRUFBRXpQLE9BQU80UixzQkFBc0JwUyxHQUFHa1EsRUFBRUQsRUFBRW5TLE9BQU9vUyxJQUFJSCxFQUFFOU8sUUFBUWdQLEVBQUVDLElBQUksR0FBRzFQLE9BQU8zQixVQUFVd1QscUJBQXFCbkwsS0FBS2xILEVBQUVpUSxFQUFFQyxNQUFNRixFQUFFQyxFQUFFQyxJQUFJbFEsRUFBRWlRLEVBQUVDLElBQUksQ0FBQyxPQUFPRixDQUFDLENBQTZYYyxDQUFFOVEsRUFBRSxDQUFDLE9BQU8sS0FBSyxRQUFRLGNBQWMsT0FBTyxRQUFRLGFBQWEsV0FBVyxTQUFTLE9BQU8sUUFBUSxZQUFZNFMsRUFBRSxDQUFDLEVBQUVDLEVBQUUsR0FBRyxPQUFPN04sSUFBSXVOLEVBQUVNLEVBQUV4VSxLQUFLLFNBQVMyRyxFQUFFLE1BQU1zTixFQUFFSyxNQUFNLGlCQUFpQjNOLEVBQUVBLEVBQUUsSUFBSUEsRUFBRSxNQUFNc04sRUFBRXVCLE9BQU92QixFQUFFSyxRQUFRaEYsR0FBR2tGLEVBQUV4VSxLQUFLLGNBQWN5VCxHQUFHZSxFQUFFeFUsS0FBSyxjQUFjLElBQUl3RyxHQUFHZ08sRUFBRXhVLEtBQUssVUFBVXdHLEVBQUUsUUFBUSxPQUFPNk0sSUFBSWtCLEVBQUVrQixLQUFLcEMsR0FBRyxJQUFJcUMsRUFBRTlELEVBQUU3USxjQUFjLE9BQU9pUyxFQUFFLENBQUNmLEVBQUVOLEVBQUVpQyxNQUFNVyxHQUFHTCxFQUFFek4sRUFBRSxDQUFDLElBQUlrUCxFQUFFRCxFQUFFbEIsRUFBRS9VLE9BQU8sSUFBSXdVLEVBQUUyQixVQUFVcEIsRUFBRXZQLEtBQUssS0FBS2dQLEVBQUU0QixnQkFBZ0IsU0FBUzNCLElBQUl5QixFQUFFL0QsRUFBRTdRLGNBQWMsSUFBSSxDQUFDNlMsTUFBTUssR0FBR3lCLEVBQUU5RCxFQUFFN1EsY0FBYyxPQUFPLENBQUN1VCxNQUFNLEtBQUtrQixPQUFPLEtBQUtDLEtBQUssbUJBQW1CLElBQUlLLEVBQUVDLEVBQUVKLEVBQUVLLEdBQUUsSUFBS25DLEdBQUcsaUJBQWlCQSxFQUFFLEVBQUVBLEVBQUVvQyxHQUFHL0IsSUFBSTVFLEdBQUdtRSxHQUFHLEdBQUd1QyxFQUFFLElBQUlDLEdBQUdBLEdBQUdwQyxJQUFJa0MsRUFBRW5FLEVBQUU3USxjQUFjLElBQUksQ0FBQzZTLE1BQU0sQ0FBQ3RDLFVBQVUsUUFBUTJFLEVBQUUsV0FBVyxJQUFJLFdBQVdqVSxLQUFLRCxJQUFJaVUsR0FBRyxhQUFhSCxnQkFBZ0IsV0FBV0YsSUFBSXJHLEdBQUdtRSxHQUFHLElBQUlqTixJQUFJb0wsRUFBRTdRLGNBQWMsT0FBTyxDQUFDdVQsTUFBTSxLQUFLa0IsT0FBTyxLQUFLQyxLQUFLLGtCQUFrQnZCLEVBQUUsT0FBTzZCLEVBQUUsSUFBSUcsRUFBRUMsRUFBRSxtQkFBbUJyRSxFQUFFc0UsRUFBRSxvQkFBb0J0RSxFQUFFLEdBQUdjLEVBQUVrRCxFQUFFOUQsRUFBRW1FLEVBQUUsSUFBSUMsRUFBRUQsT0FBTyxHQUFHRCxFQUFFLGVBQWVsRSxFQUFFLE1BQU0sSUFBSXlDLE1BQU0sb0RBQW9ELE9BQU83QyxFQUFFN1EsY0FBYyxNQUFNaVMsRUFBRSxDQUFDMEIsSUFBSWhELEVBQUVpRCxRQUFRLFlBQVlmLE1BQU1LLEVBQUVXLEtBQUtzQixFQUFFLGtCQUFrQkosR0FBR3JQLEdBQUdtTSxHQUFHaEIsRUFBRTdRLGNBQWMsUUFBUSxDQUFDOFQsR0FBR3NCLEdBQUd2RCxHQUFHWixHQUFHSixFQUFFN1EsY0FBYyxPQUFPLENBQUM4VCxHQUFHdUIsR0FBR3BFLElBQUlrQyxHQUFHTCxJQUFJb0MsRUFBRXJFLEVBQUU3USxjQUFjLFFBQVEsS0FBSyxrR0FBa0c2USxFQUFFN1EsY0FBYyxRQUFRLEtBQUssMEZBQTBGZ1YsRUFBRyxJQUFHOUQsRUFBRTZDLFlBQVksT0FBTzdDLEVBQUU4QyxVQUFVLENBQUNRLEtBQUsxRCxFQUFFekQsT0FBT2dILFdBQVc3TyxLQUFLc0wsRUFBRW1ELFVBQVUsQ0FBQ25ELEVBQUVvRCxPQUFPcEQsRUFBRXpELFNBQVM4RSxNQUFNckIsRUFBRXpELE9BQU8rRSxXQUFXdEIsRUFBRXFELEtBQUs1QixTQUFTekIsRUFBRXFELEtBQUszQixPQUFPMUIsRUFBRW9ELE9BQU92QixLQUFLN0IsRUFBRW1ELFVBQVUsQ0FBQ25ELEVBQUVxRCxLQUFLckQsRUFBRW9ELFNBQVNyQixNQUFNL0IsRUFBRXdELE9BQU9qQixRQUFRdkMsRUFBRXFELEtBQUtyRixVQUFVZ0MsRUFBRXpELFFBQVE2RCxFQUFFcUQsYUFBYSxDQUFDL08sS0FBSyxLQUFLMk0sTUFBTSxlQUFlQyxZQUFXLEVBQUdHLFVBQVMsRUFBR0MsT0FBTyxFQUFFRyxNQUFLLEdBQUloQyxFQUFFYSxRQUFRTixDQUFDLHNDQ0Mvbk0sSUFBSW9FLEVBQVV0WCxNQUFRQSxLQUFLc1gsUUFBVyxTQUFVM0QsRUFBRy9RLEdBQy9DLElBQUkrUCxFQUFJLENBQUMsRUFDVCxJQUFLLElBQUllLEtBQUtDLEVBQU92USxPQUFPM0IsVUFBVWdTLGVBQWUzSixLQUFLNkosRUFBR0QsSUFBTTlRLEVBQUVpQixRQUFRNlAsR0FBSyxJQUM5RWYsRUFBRWUsR0FBS0MsRUFBRUQsSUFDYixHQUFTLE1BQUxDLEdBQXFELG1CQUFqQ3ZRLE9BQU80UixzQkFDdEIsS0FBSTFTLEVBQUksRUFBYixJQUFnQm9SLEVBQUl0USxPQUFPNFIsc0JBQXNCckIsR0FBSXJSLEVBQUlvUixFQUFFaFQsT0FBUTRCLElBQzNETSxFQUFFaUIsUUFBUTZQLEVBQUVwUixJQUFNLEdBQUtjLE9BQU8zQixVQUFVd1QscUJBQXFCbkwsS0FBSzZKLEVBQUdELEVBQUVwUixNQUN2RXFRLEVBQUVlLEVBQUVwUixJQUFNcVIsRUFBRUQsRUFBRXBSLElBRjRCLENBSXRELE9BQU9xUSxDQUNYLEVBQ0k0RSxFQUFtQnZYLE1BQVFBLEtBQUt1WCxpQkFBb0IsU0FBVUMsR0FDOUQsT0FBUUEsR0FBT0EsRUFBSWpFLFdBQWNpRSxFQUFNLENBQUUsUUFBV0EsRUFDeEQsRUFDQXBVLE9BQU8rUCxlQUFleFQsRUFBUyxhQUFjLENBQUU0RCxPQUFPLElBQ3RENUQsRUFBUThYLFlBQVMsRUFDakIsTUFBTUMsRUFBVSxFQUFRLEtBQ2xCQyxFQUE2QixFQUFRLEtBQ3JDQyxFQUFRLEVBQVEsS0FDaEJDLEVBQVVOLEVBQWdCLEVBQVEsTUFDbENPLEVBQVVQLEVBQWdCLEVBQVEsTUFzRXhDNVgsRUFBUThYLE9BckVRN1MsSUFDWixNQUFNLE9BQUVtVCxJQUFXLEVBQUlMLEVBQVFNLGFBQ3pCLEtBQUVyVCxFQUFPLFNBQVEsS0FBRXNULEdBQVNyVCxFQUFPc1QsRUFBY1osRUFBTzFTLEVBQU8sQ0FBQyxPQUFRLFNBQ3hFdVQsRUFBc0IsV0FBVHhULEdBQ2IsRUFBSWdULEVBQTJCUyxhQUFhTCxFQUFnQixTQUNuRCxVQUFUcFQsR0FDSSxFQUFJZ1QsRUFBMkJTLGFBQWFMLEVBQTJCLG9CQUN2RSxjQUNKTSxFQUF3QixXQUFUMVQsR0FDZixFQUFJZ1QsRUFBMkJTLGFBQWFMLEVBQWtCLFdBQ3JELFVBQVRwVCxHQUNJLEVBQUlnVCxFQUEyQlMsYUFBYUwsRUFBNkIsdUJBQ3pFLEVBQUlKLEVBQTJCUyxhQUFhTCxFQUFnQixTQUNoRU8sRUFBc0JWLEVBQU0zRyxHQUFLOzs7Ozs7O0lBT3ZDZ0gsR0FBUTtXQUNESSxJQUFlelQsRUFBTTJULFVBQ3hCdFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7O3VCQUdGSixFQUNmcFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7O3VCQUdGSixFQUNmcFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7O3VCQUdGSixFQUNmcFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7S0FFckIsRUFBSWYsRUFBUWdCLG1CQUFtQjtHQUUvQixPQUFRWixFQUFRdEUsUUFBUXhSLGNBQWMsU0FBVW9CLE9BQU9DLE9BQU8sQ0FBRXlOLFVBQWU4RyxFQUFNM0csR0FBSzs7ZUFFL0VyTSxFQUFNMlQsVUFBWTs7Ozs7O3dCQU1USixJQUFhdlQsRUFBTTJULFVBQy9CdFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRztNQUNkLFlBQVQ5VCxHQUNNLFlBQVcsRUFBSWdULEVBQTJCUyxhQUFhTCxFQUFPWSxXQUFXL1QsRUFBTTJULFNBQzNFdFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRyxLQUNmO01BQ1ZQLEdBQ0FKLEVBQVF0RSxRQUFReFIsY0FBYyxNQUFPLENBQUU4TyxVQUFXd0gsR0FDOUNMLEdBQVFILEVBQVF0RSxRQUFReFIsY0FBYzZWLEVBQVFyRSxRQUFTLENBQUVnRCxLQUFNeUIsRUFBTXpRLEtBQU0sU0FDM0U1QyxFQUFNQyxVQUFXLG1DQ3hGN0IsSUFBSStULEVBQW1CNVksTUFBUUEsS0FBSzRZLGtCQUFxQnhWLE9BQU82RSxPQUFTLFNBQVU2SyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQzdFMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0IsSUFBSW9SLEVBQU8xVixPQUFPMlYseUJBQXlCL0YsRUFBR3RMLEdBQ3pDb1IsS0FBUyxRQUFTQSxHQUFROUYsRUFBRU8sV0FBYXVGLEVBQUtFLFVBQVlGLEVBQUtHLGdCQUNsRUgsRUFBTyxDQUFFMUYsWUFBWSxFQUFNNUssSUFBSyxXQUFhLE9BQU93SyxFQUFFdEwsRUFBSSxJQUU1RHRFLE9BQU8rUCxlQUFlTCxFQUFHK0YsRUFBSUMsRUFDaEMsRUFBSSxTQUFVaEcsRUFBR0UsRUFBR3RMLEVBQUdtUixRQUNUMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0JvTCxFQUFFK0YsR0FBTTdGLEVBQUV0TCxFQUNiLEdBQ0d3UixFQUFnQmxaLE1BQVFBLEtBQUtrWixjQUFpQixTQUFTbEcsRUFBR3JULEdBQzFELElBQUssSUFBSStULEtBQUtWLEVBQWEsWUFBTlUsR0FBb0J0USxPQUFPM0IsVUFBVWdTLGVBQWUzSixLQUFLbkssRUFBUytULElBQUlrRixFQUFnQmpaLEVBQVNxVCxFQUFHVSxFQUMzSCxFQUNBdFEsT0FBTytQLGVBQWV4VCxFQUFTLGFBQWMsQ0FBRTRELE9BQU8sSUFDdEQyVixFQUFhLEVBQVEsS0FBYXZaLHFDQ2ZsQyxJQUFJaVosRUFBbUI1WSxNQUFRQSxLQUFLNFksa0JBQXFCeFYsT0FBTzZFLE9BQVMsU0FBVTZLLEVBQUdFLEVBQUd0TCxFQUFHbVIsUUFDN0UxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQixJQUFJb1IsRUFBTzFWLE9BQU8yVix5QkFBeUIvRixFQUFHdEwsR0FDekNvUixLQUFTLFFBQVNBLEdBQVE5RixFQUFFTyxXQUFhdUYsRUFBS0UsVUFBWUYsRUFBS0csZ0JBQ2xFSCxFQUFPLENBQUUxRixZQUFZLEVBQU01SyxJQUFLLFdBQWEsT0FBT3dLLEVBQUV0TCxFQUFJLElBRTVEdEUsT0FBTytQLGVBQWVMLEVBQUcrRixFQUFJQyxFQUNoQyxFQUFJLFNBQVVoRyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQ1QxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQm9MLEVBQUUrRixHQUFNN0YsRUFBRXRMLEVBQ2IsR0FDR3dSLEVBQWdCbFosTUFBUUEsS0FBS2taLGNBQWlCLFNBQVNsRyxFQUFHclQsR0FDMUQsSUFBSyxJQUFJK1QsS0FBS1YsRUFBYSxZQUFOVSxHQUFvQnRRLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUtuSyxFQUFTK1QsSUFBSWtGLEVBQWdCalosRUFBU3FULEVBQUdVLEVBQzNILEVBQ0F0USxPQUFPK1AsZUFBZXhULEVBQVMsYUFBYyxDQUFFNEQsT0FBTyxJQUN0RDJWLEVBQWEsRUFBUSxJQUFjdlosR0FDbkN1WixFQUFhLEVBQVEsS0FBV3ZaLEdBQ2hDdVosRUFBYSxFQUFRLEtBQWlCdloscUNDakJ0QyxJQUFJaVosRUFBbUI1WSxNQUFRQSxLQUFLNFksa0JBQXFCeFYsT0FBTzZFLE9BQVMsU0FBVTZLLEVBQUdFLEVBQUd0TCxFQUFHbVIsUUFDN0UxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQixJQUFJb1IsRUFBTzFWLE9BQU8yVix5QkFBeUIvRixFQUFHdEwsR0FDekNvUixLQUFTLFFBQVNBLEdBQVE5RixFQUFFTyxXQUFhdUYsRUFBS0UsVUFBWUYsRUFBS0csZ0JBQ2xFSCxFQUFPLENBQUUxRixZQUFZLEVBQU01SyxJQUFLLFdBQWEsT0FBT3dLLEVBQUV0TCxFQUFJLElBRTVEdEUsT0FBTytQLGVBQWVMLEVBQUcrRixFQUFJQyxFQUNoQyxFQUFJLFNBQVVoRyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQ1QxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQm9MLEVBQUUrRixHQUFNN0YsRUFBRXRMLEVBQ2IsR0FDR3lSLEVBQXNCblosTUFBUUEsS0FBS21aLHFCQUF3Qi9WLE9BQU82RSxPQUFTLFNBQVU2SyxFQUFHdUIsR0FDeEZqUixPQUFPK1AsZUFBZUwsRUFBRyxVQUFXLENBQUVNLFlBQVksRUFBTTdQLE1BQU84USxHQUNsRSxFQUFJLFNBQVN2QixFQUFHdUIsR0FDYnZCLEVBQVcsUUFBSXVCLENBQ25CLEdBQ0krRSxFQUFnQnBaLE1BQVFBLEtBQUtvWixjQUFpQixTQUFVNUIsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSWpFLFdBQVksT0FBT2lFLEVBQ2xDLElBQUk1SCxFQUFTLENBQUMsRUFDZCxHQUFXLE1BQVA0SCxFQUFhLElBQUssSUFBSTlQLEtBQUs4UCxFQUFlLFlBQU45UCxHQUFtQnRFLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUswTixFQUFLOVAsSUFBSWtSLEVBQWdCaEosRUFBUTRILEVBQUs5UCxHQUV0SSxPQURBeVIsRUFBbUJ2SixFQUFRNEgsR0FDcEI1SCxDQUNYLEVBQ0kwSCxFQUFVdFgsTUFBUUEsS0FBS3NYLFFBQVcsU0FBVTNELEVBQUcvUSxHQUMvQyxJQUFJK1AsRUFBSSxDQUFDLEVBQ1QsSUFBSyxJQUFJZSxLQUFLQyxFQUFPdlEsT0FBTzNCLFVBQVVnUyxlQUFlM0osS0FBSzZKLEVBQUdELElBQU05USxFQUFFaUIsUUFBUTZQLEdBQUssSUFDOUVmLEVBQUVlLEdBQUtDLEVBQUVELElBQ2IsR0FBUyxNQUFMQyxHQUFxRCxtQkFBakN2USxPQUFPNFIsc0JBQ3RCLEtBQUkxUyxFQUFJLEVBQWIsSUFBZ0JvUixFQUFJdFEsT0FBTzRSLHNCQUFzQnJCLEdBQUlyUixFQUFJb1IsRUFBRWhULE9BQVE0QixJQUMzRE0sRUFBRWlCLFFBQVE2UCxFQUFFcFIsSUFBTSxHQUFLYyxPQUFPM0IsVUFBVXdULHFCQUFxQm5MLEtBQUs2SixFQUFHRCxFQUFFcFIsTUFDdkVxUSxFQUFFZSxFQUFFcFIsSUFBTXFSLEVBQUVELEVBQUVwUixJQUY0QixDQUl0RCxPQUFPcVEsQ0FDWCxFQUNJNEUsRUFBbUJ2WCxNQUFRQSxLQUFLdVgsaUJBQW9CLFNBQVVDLEdBQzlELE9BQVFBLEdBQU9BLEVBQUlqRSxXQUFjaUUsRUFBTSxDQUFFLFFBQVdBLEVBQ3hELEVBQ0FwVSxPQUFPK1AsZUFBZXhULEVBQVMsYUFBYyxDQUFFNEQsT0FBTyxJQUN0RDVELEVBQVEwWixtQkFBZ0IsRUFDeEIsTUFBTXhCLEVBQVV1QixFQUFhLEVBQVEsTUFDL0IxQixFQUFVLEVBQVEsS0FDbEJDLEVBQTZCLEVBQVEsS0FDckNDLEVBQVEsRUFBUSxLQUNoQkUsRUFBVVAsRUFBZ0IsRUFBUSxNQUNsQytCLEVBQXdCMVUsSUFDMUIsTUFBTSxPQUFFbVQsSUFBVyxFQUFJTCxFQUFRTSxZQUN6QkssR0FBZXpULEVBQU0yVSxXQUNyQixFQUFJNUIsRUFBMkJTLGFBQWFMLEVBQTJCLHFCQUU3RSxPQUFRRixFQUFRckUsUUFBUXhSLGNBQWMsTUFBTyxDQUFFd1gsU0FBVSxFQUFHMUksVUFBZThHLEVBQU0zRyxHQUFLOzs7Ozs7Ozs7Ozs7O0tBYXBGd0ksUUFBUzdVLEVBQU02VSxRQUFTQyxVQUFZOVcsSUFDaEIsVUFBVkEsRUFBRXJCLEtBQW1CcUQsRUFBTTZVLFNBQzNCN1UsRUFBTTZVLFFBQVE3VyxFQUFFLEdBRXhCaVYsRUFBUXJFLFFBQVF4UixjQUFjLE1BQU8sQ0FBRThPLFVBQWU4RyxFQUFNM0csR0FBSzs7Ozs7Y0FLM0RyTSxFQUFNd1AsV0FBYSxPQUFTOzt5QkFFakJ4UCxFQUFNMlUsWUFBYSxFQUFJNUIsRUFBMkJTLGFBQWFMLEVBQU80QjtjQUNqRi9VLEVBQU0yVSxXQUNGLEVBQUk1QixFQUEyQlMsYUFBYUwsRUFBTzZCLFlBQ25ELEVBQUlqQyxFQUEyQlMsYUFBYUwsRUFBTzhCOzswQkFFM0N4QixFQUNWcFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7OzBCQUdQSixFQUNWcFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7OzBCQUdQSixFQUNWcFYsS0FBS3VWLE1BQU0sT0FDTi9ILFNBQVMsSUFDVGdJLFNBQVMsRUFBRzs7T0FFeEI3VCxFQUFNcVQsTUFBUXJULEVBQU0yVSxVQUFhMUIsRUFBUXJFLFFBQVF4UixjQUFjOFYsRUFBUXRFLFFBQVMsQ0FBRWhNLEtBQU0sT0FBUWdQLEtBQU01UixFQUFNcVQsT0FBV3JULEVBQU1rVixlQUFpQmxWLEVBQU0yVSxVQUFhMUIsRUFBUXJFLFFBQVF4UixjQUFjOFYsRUFBUXRFLFFBQVMsQ0FBRWhNLEtBQU0sT0FBUWdQLEtBQU01UixFQUFNa1YsZUFBb0JsVixFQUFNcVQsTUFBUUosRUFBUXJFLFFBQVF4UixjQUFjOFYsRUFBUXRFLFFBQVMsQ0FBRWhNLEtBQU0sT0FBUWdQLEtBQU01UixFQUFNcVQsUUFDMVZKLEVBQVFyRSxRQUFReFIsY0FBYzBWLEVBQVFxQyxLQUFNLENBQUVsRixNQUFPLENBQUVtRixVQUFXLFVBQVlyVixLQUFNLGNBQWV3UCxNQUFPdlAsRUFBTTJVLFVBQVksWUFBYyxvQkFBc0IzVSxFQUFNcVYsT0FBUSxFQTBCdEx0YSxFQUFRMFosY0F4QmV6VSxJQUNuQixNQUFNLE9BQUVtVCxJQUFXLEVBQUlMLEVBQVFNLGFBQ3hCa0MsRUFBYUMsSUFBa0IsRUFBSXRDLEVBQVF1QyxVQUFVLElBQ3RELFdBQUVoRyxFQUFVLFNBQUVpRyxFQUFRLGVBQUVDLEdBQW1CMVYsRUFBTzJWLEVBQXFCakQsRUFBTzFTLEVBQU8sQ0FBQyxhQUFjLFdBQVksbUJBQ3RILE9BQVFpVCxFQUFRckUsUUFBUXhSLGNBQWMsTUFBT29CLE9BQU9DLE9BQU8sQ0FBRXlOLFVBQWU4RyxFQUFNM0csR0FBSzs7c0JBRXJFck0sRUFBTXdQLFdBQWEsU0FBVzs7eUJBRTVCLEVBQUl1RCxFQUEyQlMsYUFBYUwsRUFBT3lDOzttQkFFeERwRyxHQUFjOzs7T0FHMUJBLEdBQWM7TUFDZkEsR0FBYztNQUNabUcsR0FBcUIzVixFQUFNeVYsU0FBUzdRLEtBQUksQ0FBQ2lSLEVBQVNuWSxJQUMxQ3VWLEVBQVFyRSxRQUFReFIsY0FBY3NYLEVBQXNCbFcsT0FBT0MsT0FBTyxDQUFDLEVBQUdvWCxFQUFTLENBQUUxRyxNQUFPbUcsSUFBZ0I1WCxFQUFJLE1BQVEsTUFBT2lYLFVBQVdXLElBQWdCNVgsRUFBR2YsSUFBS2UsRUFBRzhSLFdBQVl4UCxFQUFNd1AsV0FBWXFGLFFBQVMsS0FDeE1VLEVBQWU3WCxHQUNYc0MsRUFBTTBWLGdCQUNOMVYsRUFBTTBWLGVBQWVoWSxFQUN6QixPQUVSLG9DQ3hIUixJQUFJc1csRUFBbUI1WSxNQUFRQSxLQUFLNFksa0JBQXFCeFYsT0FBTzZFLE9BQVMsU0FBVTZLLEVBQUdFLEVBQUd0TCxFQUFHbVIsUUFDN0UxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQixJQUFJb1IsRUFBTzFWLE9BQU8yVix5QkFBeUIvRixFQUFHdEwsR0FDekNvUixLQUFTLFFBQVNBLEdBQVE5RixFQUFFTyxXQUFhdUYsRUFBS0UsVUFBWUYsRUFBS0csZ0JBQ2xFSCxFQUFPLENBQUUxRixZQUFZLEVBQU01SyxJQUFLLFdBQWEsT0FBT3dLLEVBQUV0TCxFQUFJLElBRTVEdEUsT0FBTytQLGVBQWVMLEVBQUcrRixFQUFJQyxFQUNoQyxFQUFJLFNBQVVoRyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQ1QxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQm9MLEVBQUUrRixHQUFNN0YsRUFBRXRMLEVBQ2IsR0FDR3dSLEVBQWdCbFosTUFBUUEsS0FBS2taLGNBQWlCLFNBQVNsRyxFQUFHclQsR0FDMUQsSUFBSyxJQUFJK1QsS0FBS1YsRUFBYSxZQUFOVSxHQUFvQnRRLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUtuSyxFQUFTK1QsSUFBSWtGLEVBQWdCalosRUFBU3FULEVBQUdVLEVBQzNILEVBQ0F0USxPQUFPK1AsZUFBZXhULEVBQVMsYUFBYyxDQUFFNEQsT0FBTyxJQUN0RDJWLEVBQWEsRUFBUSxLQUFvQnZaLHFDQ2Z6QyxJQUFJMlgsRUFBVXRYLE1BQVFBLEtBQUtzWCxRQUFXLFNBQVUzRCxFQUFHL1EsR0FDL0MsSUFBSStQLEVBQUksQ0FBQyxFQUNULElBQUssSUFBSWUsS0FBS0MsRUFBT3ZRLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUs2SixFQUFHRCxJQUFNOVEsRUFBRWlCLFFBQVE2UCxHQUFLLElBQzlFZixFQUFFZSxHQUFLQyxFQUFFRCxJQUNiLEdBQVMsTUFBTEMsR0FBcUQsbUJBQWpDdlEsT0FBTzRSLHNCQUN0QixLQUFJMVMsRUFBSSxFQUFiLElBQWdCb1IsRUFBSXRRLE9BQU80UixzQkFBc0JyQixHQUFJclIsRUFBSW9SLEVBQUVoVCxPQUFRNEIsSUFDM0RNLEVBQUVpQixRQUFRNlAsRUFBRXBSLElBQU0sR0FBS2MsT0FBTzNCLFVBQVV3VCxxQkFBcUJuTCxLQUFLNkosRUFBR0QsRUFBRXBSLE1BQ3ZFcVEsRUFBRWUsRUFBRXBSLElBQU1xUixFQUFFRCxFQUFFcFIsSUFGNEIsQ0FJdEQsT0FBT3FRLENBQ1gsRUFDSTRFLEVBQW1CdlgsTUFBUUEsS0FBS3VYLGlCQUFvQixTQUFVQyxHQUM5RCxPQUFRQSxHQUFPQSxFQUFJakUsV0FBY2lFLEVBQU0sQ0FBRSxRQUFXQSxFQUN4RCxFQUNBcFUsT0FBTytQLGVBQWV4VCxFQUFTLGFBQWMsQ0FBRTRELE9BQU8sSUFDdEQ1RCxFQUFRb2EsVUFBTyxFQUNmLE1BQU1sQyxFQUFVTixFQUFnQixFQUFRLE1BQ2xDSSxFQUE2QixFQUFRLEtBQ3JDQyxFQUFRLEVBQVEsS0FDaEJGLEVBQVUsRUFBUSxLQUNsQmdELEVBQVUsRUFBUSxLQVl4Qi9hLEVBQVFvYSxLQVhNWSxJQUNWLElBQUkvVixFQUFRMFMsRUFBT3FELEVBQUksSUFDdkIsTUFBTSxNQUFFeEcsRUFBSyxLQUFFeFAsRUFBSSxTQUFFRSxHQUFhRCxFQUFPZ1csRUFBWXRELEVBQU8xUyxFQUFPLENBQUMsUUFBUyxPQUFRLGNBQy9FLE9BQUVtVCxJQUFXLEVBQUlMLEVBQVFNLFlBQy9CLE9BQVFILEVBQVFyRSxRQUFReFIsY0FBYzZWLEVBQVFyRSxRQUFRcUgsU0FBVSxLQUM1RGhELEVBQVFyRSxRQUFReFIsY0FBYyxPQUFRb0IsT0FBT0MsT0FBTyxDQUFFeU4sVUFBZThHLEVBQU0zRyxHQUFLO2lCQUN2RThHLEVBQU81RCxHQUFTLGdCQUFnQjFELFNBQVMsSUFBSXZNLE1BQU0sR0FBSTtlQUMxRCxFQUFJeVQsRUFBMkJTLGFBQWFMLEVBQU81RCxHQUFTO1FBQ25FLEVBQUl1RyxFQUFRaEMsbUJBQW1CL1QsR0FBUTtPQUNyQ2lXLEdBQVkvVixHQUFXLG9DQzlCaEMsSUFBSStULEVBQW1CNVksTUFBUUEsS0FBSzRZLGtCQUFxQnhWLE9BQU82RSxPQUFTLFNBQVU2SyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQzdFMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0IsSUFBSW9SLEVBQU8xVixPQUFPMlYseUJBQXlCL0YsRUFBR3RMLEdBQ3pDb1IsS0FBUyxRQUFTQSxHQUFROUYsRUFBRU8sV0FBYXVGLEVBQUtFLFVBQVlGLEVBQUtHLGdCQUNsRUgsRUFBTyxDQUFFMUYsWUFBWSxFQUFNNUssSUFBSyxXQUFhLE9BQU93SyxFQUFFdEwsRUFBSSxJQUU1RHRFLE9BQU8rUCxlQUFlTCxFQUFHK0YsRUFBSUMsRUFDaEMsRUFBSSxTQUFVaEcsRUFBR0UsRUFBR3RMLEVBQUdtUixRQUNUMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0JvTCxFQUFFK0YsR0FBTTdGLEVBQUV0TCxFQUNiLEdBQ0d3UixFQUFnQmxaLE1BQVFBLEtBQUtrWixjQUFpQixTQUFTbEcsRUFBR3JULEdBQzFELElBQUssSUFBSStULEtBQUtWLEVBQWEsWUFBTlUsR0FBb0J0USxPQUFPM0IsVUFBVWdTLGVBQWUzSixLQUFLbkssRUFBUytULElBQUlrRixFQUFnQmpaLEVBQVNxVCxFQUFHVSxFQUMzSCxFQUNBdFEsT0FBTytQLGVBQWV4VCxFQUFTLGFBQWMsQ0FBRTRELE9BQU8sSUFDdEQyVixFQUFhLEVBQVEsS0FBV3ZaLEdBQ2hDdVosRUFBYSxFQUFRLEtBQWlCdlosNkJDaEJ0Q3lELE9BQU8rUCxlQUFleFQsRUFBUyxhQUFjLENBQUU0RCxPQUFPLElBQ3RENUQsRUFBUStZLGtCQUFvQi9ZLEVBQVFtYixtQkFBZ0IsRUFDcERuYixFQUFRbWIsY0FBZ0IsQ0FDcEJDLGFBQWMsQ0FDVjdOLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsZUFBZ0IsSUFDaEJoTyxXQUFZLEtBRWhCaU8sY0FBZSxDQUNYaE8sV0FBWSxHQUNaOE4sU0FBVSxHQUNWQyxjQUFlLEVBQ2ZoTyxXQUFZLEtBRWhCa08sYUFBYyxDQUNWak8sV0FBWSxHQUNaOE4sU0FBVSxHQUNWQyxjQUFlLEVBQ2ZoTyxXQUFZLEtBRWhCbU8sY0FBZSxDQUNYbE8sV0FBWSxHQUNaOE4sU0FBVSxHQUNWQyxjQUFlLEVBQ2ZoTyxXQUFZLEtBRWhCb08sZUFBZ0IsQ0FDWm5PLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxFQUNmaE8sV0FBWSxLQUVoQnFPLGNBQWUsQ0FDWHBPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxFQUNmaE8sV0FBWSxLQUVoQnNPLFdBQVksQ0FDUnJPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxFQUNmaE8sV0FBWSxLQUVoQnVPLFlBQWEsQ0FDVHRPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxJQUNmaE8sV0FBWSxLQUVoQndPLFdBQVksQ0FDUnZPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxHQUNmaE8sV0FBWSxLQUVoQnlPLFdBQVksQ0FDUnhPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxHQUNmaE8sV0FBWSxLQUVoQjBPLFlBQWEsQ0FDVHpPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxHQUNmaE8sV0FBWSxLQUVoQjJPLFdBQVksQ0FDUjFPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxHQUNmaE8sV0FBWSxLQUVoQjRPLFVBQVcsQ0FDUDNPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxHQUNmaE8sV0FBWSxLQUVoQjZPLFdBQVksQ0FDUjVPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxJQUNmaE8sV0FBWSxLQUVoQjhPLFVBQVcsQ0FDUDdPLFdBQVksR0FDWjhOLFNBQVUsR0FDVkMsY0FBZSxHQUNmaE8sV0FBWSxNQVdwQnROLEVBQVErWSxrQkFSUixTQUEyQi9ULEdBQ3ZCLE1BQU1xWCxFQUFxQnJjLEVBQVFtYixjQUFjblcsR0FDakQsTUFBTyxvQkFDTXFYLEVBQW1COU8sK0JBQ3JCOE8sRUFBbUJoQixrQ0FDZGdCLEVBQW1CZixvQ0FDdEJlLEVBQW1CL08sYUFDcEMsb0NDckdBLElBQUkyTCxFQUFtQjVZLE1BQVFBLEtBQUs0WSxrQkFBcUJ4VixPQUFPNkUsT0FBUyxTQUFVNkssRUFBR0UsRUFBR3RMLEVBQUdtUixRQUM3RTFYLElBQVAwWCxJQUFrQkEsRUFBS25SLEdBQzNCLElBQUlvUixFQUFPMVYsT0FBTzJWLHlCQUF5Qi9GLEVBQUd0TCxHQUN6Q29SLEtBQVMsUUFBU0EsR0FBUTlGLEVBQUVPLFdBQWF1RixFQUFLRSxVQUFZRixFQUFLRyxnQkFDbEVILEVBQU8sQ0FBRTFGLFlBQVksRUFBTTVLLElBQUssV0FBYSxPQUFPd0ssRUFBRXRMLEVBQUksSUFFNUR0RSxPQUFPK1AsZUFBZUwsRUFBRytGLEVBQUlDLEVBQ2hDLEVBQUksU0FBVWhHLEVBQUdFLEVBQUd0TCxFQUFHbVIsUUFDVDFYLElBQVAwWCxJQUFrQkEsRUFBS25SLEdBQzNCb0wsRUFBRStGLEdBQU03RixFQUFFdEwsRUFDYixHQUNHd1IsRUFBZ0JsWixNQUFRQSxLQUFLa1osY0FBaUIsU0FBU2xHLEVBQUdyVCxHQUMxRCxJQUFLLElBQUkrVCxLQUFLVixFQUFhLFlBQU5VLEdBQW9CdFEsT0FBTzNCLFVBQVVnUyxlQUFlM0osS0FBS25LLEVBQVMrVCxJQUFJa0YsRUFBZ0JqWixFQUFTcVQsRUFBR1UsRUFDM0gsRUFDQXRRLE9BQU8rUCxlQUFleFQsRUFBUyxhQUFjLENBQUU0RCxPQUFPLElBQ3REMlYsRUFBYSxFQUFRLEtBQWlCdlosR0FDdEN1WixFQUFhLEVBQVEsS0FBY3ZaLEdBQ25DdVosRUFBYSxFQUFRLEtBQTBCdloscUNDakIvQyxJQUFJaVosRUFBbUI1WSxNQUFRQSxLQUFLNFksa0JBQXFCeFYsT0FBTzZFLE9BQVMsU0FBVTZLLEVBQUdFLEVBQUd0TCxFQUFHbVIsUUFDN0UxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQixJQUFJb1IsRUFBTzFWLE9BQU8yVix5QkFBeUIvRixFQUFHdEwsR0FDekNvUixLQUFTLFFBQVNBLEdBQVE5RixFQUFFTyxXQUFhdUYsRUFBS0UsVUFBWUYsRUFBS0csZ0JBQ2xFSCxFQUFPLENBQUUxRixZQUFZLEVBQU01SyxJQUFLLFdBQWEsT0FBT3dLLEVBQUV0TCxFQUFJLElBRTVEdEUsT0FBTytQLGVBQWVMLEVBQUcrRixFQUFJQyxFQUNoQyxFQUFJLFNBQVVoRyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQ1QxWCxJQUFQMFgsSUFBa0JBLEVBQUtuUixHQUMzQm9MLEVBQUUrRixHQUFNN0YsRUFBRXRMLEVBQ2IsR0FDR3lSLEVBQXNCblosTUFBUUEsS0FBS21aLHFCQUF3Qi9WLE9BQU82RSxPQUFTLFNBQVU2SyxFQUFHdUIsR0FDeEZqUixPQUFPK1AsZUFBZUwsRUFBRyxVQUFXLENBQUVNLFlBQVksRUFBTTdQLE1BQU84USxHQUNsRSxFQUFJLFNBQVN2QixFQUFHdUIsR0FDYnZCLEVBQVcsUUFBSXVCLENBQ25CLEdBQ0krRSxFQUFnQnBaLE1BQVFBLEtBQUtvWixjQUFpQixTQUFVNUIsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSWpFLFdBQVksT0FBT2lFLEVBQ2xDLElBQUk1SCxFQUFTLENBQUMsRUFDZCxHQUFXLE1BQVA0SCxFQUFhLElBQUssSUFBSTlQLEtBQUs4UCxFQUFlLFlBQU45UCxHQUFtQnRFLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUswTixFQUFLOVAsSUFBSWtSLEVBQWdCaEosRUFBUTRILEVBQUs5UCxHQUV0SSxPQURBeVIsRUFBbUJ2SixFQUFRNEgsR0FDcEI1SCxDQUNYLEVBQ0F4TSxPQUFPK1AsZUFBZXhULEVBQVMsYUFBYyxDQUFFNEQsT0FBTyxJQUN0RDVELEVBQVFzYyw2QkFBMEIsRUFDbEMsTUFBTXJFLEVBQVEsRUFBUSxLQUNoQkQsRUFBNkIsRUFBUSxLQUNyQ0QsRUFBVSxFQUFRLEtBQ2xCRyxFQUFVdUIsRUFBYSxFQUFRLE1BbUNyQ3paLEVBQVFzYyx3QkFsQ1IsU0FBaUNyWCxHQUM3QixNQUFNLGtCQUFFc1gsRUFBaUIsT0FBRW5FLEVBQU0sWUFBRW9FLElBQWdCLEVBQUl6RSxFQUFRTSxhQUN4RG9FLEVBQVVDLElBQWUsRUFBSXhFLEVBQVF1QyxVQUFVLElBQy9Da0MsRUFBV0MsSUFBZ0IsRUFBSTFFLEVBQVF1QyxXQUFVLElBQ3hELEVBQUl2QyxFQUFRMkUsWUFBVyxLQUVuQkMsT0FBT0MsV0FBVyxzQkFBc0JDLGlCQUFpQixVQUR4Qy9aLEdBQU0yWixFQUFhM1osRUFBRWdhLFVBQ3FDLElBRS9FLElBQUkvWCxFQUFXLEdBT2YsT0FMSUEsRUFEQWdGLE1BQU15RixRQUFRMUssRUFBTUMsVUFDVEQsRUFBTUMsU0FHTixDQUFDRCxFQUFNQyxVQUVkZ1QsRUFBUXJFLFFBQVF4UixjQUFjLE1BQU8sQ0FBRThPLFVBQWU4RyxFQUFNM0csR0FBSzt5QkFDckQsRUFBSTBHLEVBQTJCUyxhQUFhTCxFQUFPSTs7O3NCQUdyRG1FLEVBQVksaUJBQW1COzs7Y0FHeEMsRUFBSTNFLEVBQTJCUyxhQUFhTCxFQUFPOEU7TUFFeERoRixFQUFRckUsUUFBUXhSLGNBQWMwVixFQUFRMkIsY0FBZSxDQUFFaUIsZUFBaUJoWSxJQUNoRStaLEVBQVkvWixFQUFFLEVBQ2Y4UixZQUFZa0ksRUFBMEJqQyxTQUFVelYsRUFBTXlWLFdBQzdEeEMsRUFBUXJFLFFBQVF4UixjQUFjLE9BQVEsQ0FBRThPLFVBQWU4RyxFQUFNM0csR0FBSzs7OzBCQUdqRCxFQUFJMEcsRUFBMkJTLGFBQWFMLEVBQU9JOztPQUVuRXRULEVBQVN1WCxJQUNsQixvQ0M5REEsSUFBSXhELEVBQW1CNVksTUFBUUEsS0FBSzRZLGtCQUFxQnhWLE9BQU82RSxPQUFTLFNBQVU2SyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQzdFMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0IsSUFBSW9SLEVBQU8xVixPQUFPMlYseUJBQXlCL0YsRUFBR3RMLEdBQ3pDb1IsS0FBUyxRQUFTQSxHQUFROUYsRUFBRU8sV0FBYXVGLEVBQUtFLFVBQVlGLEVBQUtHLGdCQUNsRUgsRUFBTyxDQUFFMUYsWUFBWSxFQUFNNUssSUFBSyxXQUFhLE9BQU93SyxFQUFFdEwsRUFBSSxJQUU1RHRFLE9BQU8rUCxlQUFlTCxFQUFHK0YsRUFBSUMsRUFDaEMsRUFBSSxTQUFVaEcsRUFBR0UsRUFBR3RMLEVBQUdtUixRQUNUMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0JvTCxFQUFFK0YsR0FBTTdGLEVBQUV0TCxFQUNiLEdBQ0d3UixFQUFnQmxaLE1BQVFBLEtBQUtrWixjQUFpQixTQUFTbEcsRUFBR3JULEdBQzFELElBQUssSUFBSStULEtBQUtWLEVBQWEsWUFBTlUsR0FBb0J0USxPQUFPM0IsVUFBVWdTLGVBQWUzSixLQUFLbkssRUFBUytULElBQUlrRixFQUFnQmpaLEVBQVNxVCxFQUFHVSxFQUMzSCxFQUNBdFEsT0FBTytQLGVBQWV4VCxFQUFTLGFBQWMsQ0FBRTRELE9BQU8sSUFDdEQyVixFQUFhLEVBQVEsS0FBd0J2WixxQ0NmN0MsSUFBSWlaLEVBQW1CNVksTUFBUUEsS0FBSzRZLGtCQUFxQnhWLE9BQU82RSxPQUFTLFNBQVU2SyxFQUFHRSxFQUFHdEwsRUFBR21SLFFBQzdFMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0IsSUFBSW9SLEVBQU8xVixPQUFPMlYseUJBQXlCL0YsRUFBR3RMLEdBQ3pDb1IsS0FBUyxRQUFTQSxHQUFROUYsRUFBRU8sV0FBYXVGLEVBQUtFLFVBQVlGLEVBQUtHLGdCQUNsRUgsRUFBTyxDQUFFMUYsWUFBWSxFQUFNNUssSUFBSyxXQUFhLE9BQU93SyxFQUFFdEwsRUFBSSxJQUU1RHRFLE9BQU8rUCxlQUFlTCxFQUFHK0YsRUFBSUMsRUFDaEMsRUFBSSxTQUFVaEcsRUFBR0UsRUFBR3RMLEVBQUdtUixRQUNUMVgsSUFBUDBYLElBQWtCQSxFQUFLblIsR0FDM0JvTCxFQUFFK0YsR0FBTTdGLEVBQUV0TCxFQUNiLEdBQ0d5UixFQUFzQm5aLE1BQVFBLEtBQUttWixxQkFBd0IvVixPQUFPNkUsT0FBUyxTQUFVNkssRUFBR3VCLEdBQ3hGalIsT0FBTytQLGVBQWVMLEVBQUcsVUFBVyxDQUFFTSxZQUFZLEVBQU03UCxNQUFPOFEsR0FDbEUsRUFBSSxTQUFTdkIsRUFBR3VCLEdBQ2J2QixFQUFXLFFBQUl1QixDQUNuQixHQUNJK0UsRUFBZ0JwWixNQUFRQSxLQUFLb1osY0FBaUIsU0FBVTVCLEdBQ3hELEdBQUlBLEdBQU9BLEVBQUlqRSxXQUFZLE9BQU9pRSxFQUNsQyxJQUFJNUgsRUFBUyxDQUFDLEVBQ2QsR0FBVyxNQUFQNEgsRUFBYSxJQUFLLElBQUk5UCxLQUFLOFAsRUFBZSxZQUFOOVAsR0FBbUJ0RSxPQUFPM0IsVUFBVWdTLGVBQWUzSixLQUFLME4sRUFBSzlQLElBQUlrUixFQUFnQmhKLEVBQVE0SCxFQUFLOVAsR0FFdEksT0FEQXlSLEVBQW1CdkosRUFBUTRILEdBQ3BCNUgsQ0FDWCxFQUNBeE0sT0FBTytQLGVBQWV4VCxFQUFTLGFBQWMsQ0FBRTRELE9BQU8sSUFDdEQ1RCxFQUFRcVksU0FBV3JZLEVBQVFtZCxtQkFBZ0IsRUFDM0MsTUFBTW5GLEVBQTZCLEVBQVEsS0FDckNFLEVBQVV1QixFQUFhLEVBQVEsTUFDL0IyRCxFQUFjLEVBQVEsS0FDdEJDLEVBQWdCLENBQ2xCQyxNQUFPLFFBQ1BDLFlBQWEsVUFDYm5GLFFBQVEsRUFBSWdGLEVBQVlJLHVCQUFzQixFQUFJeEYsRUFBMkJ5RixhQUFhLFlBQVlDLFFBQWUsTUFDckhsQixZQUFhLFdBQWMsRUFDM0JELGtCQUFtQixTQUFVb0IsR0FBWSxHQUV2Q0MsR0FBZSxFQUFJMUYsRUFBUTJGLGVBQWVSLEdBZ0JoRHJkLEVBQVFtZCxjQWZSLFVBQXVCLFNBQUVqWSxJQUNyQixNQUFPb1ksRUFBT1EsSUFBWSxFQUFJNUYsRUFBUXVDLFVBQVUsVUFDekM4QyxFQUFhUSxJQUFrQixFQUFJN0YsRUFBUXVDLFVBQVUsWUFDckRyQyxFQUFRNEYsSUFBYSxFQUFJOUYsRUFBUXVDLFdBQVUsRUFBSTJDLEVBQVlJLHVCQUFzQixFQUFJeEYsRUFBMkJ5RixhQUFhLFdBQVksSUFBSUMsUUFBZSxPQVVuSyxPQUFReEYsRUFBUXJFLFFBQVF4UixjQUFjdWIsRUFBYUssU0FBVSxDQUFFcmEsTUFBTyxDQUFFMFosUUFBT2QsWUFUMUQwQixJQUNqQixNQUFNQyxPQUFzQjNjLElBQVgwYyxFQUF1QkEsRUFBbUIsVUFBVlosRUFBb0IsT0FBUyxRQUM5RVEsRUFBU0ssR0FDVEgsR0FBVSxFQUFJWixFQUFZSSx1QkFBc0IsRUFBSXhGLEVBQTJCeUYsYUFBYUYsR0FBYyxJQUFJRyxRQUFRUyxHQUFVLEVBTXhDWixjQUFhaEIsa0JBSjlFb0IsSUFDdkJJLEVBQWVKLEdBQ2ZLLEdBQVUsRUFBSVosRUFBWUksdUJBQXNCLEVBQUl4RixFQUEyQnlGLGFBQWFFLEdBQVcsSUFBSUQsUUFBUUosR0FBTyxFQUVGbEYsV0FBWWxULEVBQzVJLEVBU0FsRixFQUFRcVksU0FQUixXQUNJLE1BQU0rRixHQUFVLEVBQUlsRyxFQUFRbUcsWUFBWVQsR0FDeEMsSUFBS1EsRUFDRCxNQUFNLElBQUlySSxNQUFNLGdEQUVwQixPQUFPcUksQ0FDWCx1QkMzREFuZSxFQUFPRCxRQUFVTSx3QkNBakJMLEVBQU9ELFFBQVVPLDhCQ3lCVixTQUFTK2QsRUFBT0MsR0FDbkIsT0FBSUEsRUFBTSxHQUNFLEVBRUssSUFBUkEsRUFDRSxFQUdBLENBRWYsQ0FNTyxTQUFTQyxFQUFLQyxFQUFPQyxFQUFNQyxHQUM5QixPQUFRLEVBQU1BLEdBQVVGLEVBQVFFLEVBQVNELENBQzdDLENBT08sU0FBU0UsRUFBU0MsRUFBS0MsRUFBS0MsR0FDL0IsT0FBSUEsRUFBUUYsRUFDREEsRUFFRkUsRUFBUUQsRUFDTkEsRUFFSkMsQ0FDWCxDQU9PLFNBQVNDLEVBQVlILEVBQUtDLEVBQUtDLEdBQ2xDLE9BQUlBLEVBQVFGLEVBQ0RBLEVBRUZFLEVBQVFELEVBQ05BLEVBRUpDLENBQ1gsQ0FPTyxTQUFTRSxFQUFtQkMsR0FLL0IsT0FKQUEsR0FBb0IsS0FDTixJQUNWQSxHQUFvQixLQUVqQkEsQ0FDWCxDQU9PLFNBQVNDLEVBQXNCRCxHQUtsQyxPQUpBQSxHQUFvQixLQUNOLElBQ1ZBLEdBQW9CLEtBRWpCQSxDQUNYLENBZU8sU0FBU0UsRUFBa0JDLEVBQU1DLEdBRXBDLE9BRDZCSCxFQUFzQkcsRUFBS0QsSUFDekIsSUFBUSxHQUFPLENBQ2xELENBSU8sU0FBUyxFQUFrQm5MLEVBQUdTLEdBQ2pDLE9BQU8sSUFBUXJSLEtBQUtELElBQUlDLEtBQUtELElBQUk2USxFQUFJUyxHQUFLLElBQzlDLENBSU8sU0FBUzRLLEVBQWVDLEVBQUtDLEdBSWhDLE1BQU8sQ0FIR0QsRUFBSSxHQUFLQyxFQUFPLEdBQUcsR0FBS0QsRUFBSSxHQUFLQyxFQUFPLEdBQUcsR0FBS0QsRUFBSSxHQUFLQyxFQUFPLEdBQUcsR0FDbkVELEVBQUksR0FBS0MsRUFBTyxHQUFHLEdBQUtELEVBQUksR0FBS0MsRUFBTyxHQUFHLEdBQUtELEVBQUksR0FBS0MsRUFBTyxHQUFHLEdBQ25FRCxFQUFJLEdBQUtDLEVBQU8sR0FBRyxHQUFLRCxFQUFJLEdBQUtDLEVBQU8sR0FBRyxHQUFLRCxFQUFJLEdBQUtDLEVBQU8sR0FBRyxHQUVqRixtdENDNUdBLE1BQU1DLEVBQWMsQ0FDaEIsQ0FBQyxVQUFZLFVBQVksV0FDekIsQ0FBQyxNQUFRLE1BQVEsT0FDakIsQ0FBQyxVQUFZLFVBQVksWUFFdkJDLEVBQWMsQ0FDaEIsQ0FDSSxvQkFDQyxvQkFDQSxvQkFFTCxFQUNLLGtCQUNELG1CQUNBLG9CQUVKLENBQ0ksb0JBQ0MsbUJBQ0QscUJBR0ZDLEVBQWtCLENBQUMsT0FBUSxJQUFPLFNBSWpDLFNBQVNDLEVBQVlDLEVBQUtDLEVBQU9DLEdBQ3BDLE9BQVEsS0FBTyxJQUFZLElBQU5GLElBQWMsSUFBYyxJQUFSQyxJQUFnQixFQUFXLElBQVBDLEtBQ3pELENBQ1IsQ0FJTyxTQUFTQyxFQUFlQyxHQUkzQixPQUFPTCxFQUhHTSxFQUFhRCxFQUFPLElBQ3BCQyxFQUFhRCxFQUFPLElBQ3BCQyxFQUFhRCxFQUFPLElBRWxDLENBSU8sU0FBU0UsRUFBY0MsR0FDMUIsT0FBT0EsR0FBUSxHQUFLLEdBQ3hCLENBSU8sU0FBU0MsRUFBWUQsR0FDeEIsT0FBT0EsR0FBUSxHQUFLLEdBQ3hCLENBSU8sU0FBU0UsRUFBY0YsR0FDMUIsT0FBT0EsR0FBUSxFQUFJLEdBQ3ZCLENBSU8sU0FBU0csRUFBYUgsR0FDekIsT0FBYyxJQUFQQSxDQUNYLENBSU8sU0FBU0ksRUFBU0osR0FDckIsT0FBT0QsRUFBY0MsSUFBUyxHQUNsQyxDQUlPLFNBQVNLLEVBQVkxWSxFQUFHQyxFQUFHQyxHQUM5QixNQUFNdVgsRUFBU0UsRUFDVGdCLEVBQVVsQixFQUFPLEdBQUcsR0FBS3pYLEVBQUl5WCxFQUFPLEdBQUcsR0FBS3hYLEVBQUl3WCxFQUFPLEdBQUcsR0FBS3ZYLEVBQy9EMFksRUFBVW5CLEVBQU8sR0FBRyxHQUFLelgsRUFBSXlYLEVBQU8sR0FBRyxHQUFLeFgsRUFBSXdYLEVBQU8sR0FBRyxHQUFLdlgsRUFDL0QyWSxFQUFVcEIsRUFBTyxHQUFHLEdBQUt6WCxFQUFJeVgsRUFBTyxHQUFHLEdBQUt4WCxFQUFJd1gsRUFBTyxHQUFHLEdBQUt2WCxFQUlyRSxPQUFPMlgsRUFIR00sRUFBYVEsR0FDYlIsRUFBYVMsR0FDYlQsRUFBYVUsR0FFM0IsQ0FJTyxTQUFTQyxFQUFZVCxHQUl4QixPQUFPLEVBQXlCLENBSHRCVSxFQUFXVCxFQUFZRCxJQUN2QlUsRUFBV1IsRUFBY0YsSUFDekJVLEVBQVdQLEVBQWFILEtBQ1NYLEVBQy9DLENBS08sU0FBU3NCLEVBQVk1TixFQUFHYyxFQUFHUyxHQUM5QixNQUFNc00sRUFBYXJCLEVBQ2JzQixHQUFNOU4sRUFBSSxJQUFRLElBRWxCK04sRUFBS0QsRUFBS3ZNLEVBQUksSUFDZHlNLEVBQWNDLEVBRlRuTixFQUFJLElBQVFnTixHQUdqQkksRUFBY0QsRUFBUUgsR0FDdEJLLEVBQWNGLEVBQVFGLEdBSTVCLE9BQU9ULEVBSEdVLEVBQWNILEVBQVcsR0FDekJLLEVBQWNMLEVBQVcsR0FDekJNLEVBQWNOLEVBQVcsR0FFdkMsQ0FRTyxTQUFTTyxFQUFZbkIsR0FDeEIsTUFBTU0sRUFBVUksRUFBV1QsRUFBWUQsSUFDakNPLEVBQVVHLEVBQVdSLEVBQWNGLElBQ25DUSxFQUFVRSxFQUFXUCxFQUFhSCxJQUNsQ1osRUFBU0MsRUFDVDFYLEVBQUl5WCxFQUFPLEdBQUcsR0FBS2tCLEVBQVVsQixFQUFPLEdBQUcsR0FBS21CLEVBQVVuQixFQUFPLEdBQUcsR0FBS29CLEVBQ3JFNVksRUFBSXdYLEVBQU8sR0FBRyxHQUFLa0IsRUFBVWxCLEVBQU8sR0FBRyxHQUFLbUIsRUFBVW5CLEVBQU8sR0FBRyxHQUFLb0IsRUFDckUzWSxFQUFJdVgsRUFBTyxHQUFHLEdBQUtrQixFQUFVbEIsRUFBTyxHQUFHLEdBQUttQixFQUFVbkIsRUFBTyxHQUFHLEdBQUtvQixFQUNyRUksRUFBYXJCLEVBQ2J3QixFQUFjcFosRUFBSWlaLEVBQVcsR0FDN0JLLEVBQWNyWixFQUFJZ1osRUFBVyxHQUM3Qk0sRUFBY3JaLEVBQUkrWSxFQUFXLEdBQzdCUSxFQUFLQyxFQUFLTixHQUNWRixFQUFLUSxFQUFLSixHQUtoQixNQUFPLENBSEcsSUFBUUosRUFBSyxHQUNiLEtBQVNPLEVBQUtQLEdBQ2QsS0FBU0EsRUFIUlEsRUFBS0gsSUFLcEIsQ0FRTyxTQUFTSSxFQUFjQyxHQUMxQixNQUNNQyxFQUFZMUIsRUFEUjJCLEVBQVdGLElBRXJCLE9BQU8vQixFQUFZZ0MsRUFBV0EsRUFBV0EsRUFDN0MsQ0FPTyxTQUFTRSxFQUFjMUIsR0FFMUIsT0FBTyxJQUFRcUIsRUFETFosRUFBWVQsR0FBTSxHQUNKLEtBQVMsRUFDckMsQ0FZTyxTQUFTeUIsRUFBV0YsR0FDdkIsT0FBTyxJQUFRUCxHQUFTTyxFQUFRLElBQVEsSUFDNUMsQ0FZTyxTQUFTSSxFQUFXL1osR0FDdkIsT0FBeUIsSUFBbEJ5WixFQUFLelosRUFBSSxLQUFpQixFQUNyQyxDQVNPLFNBQVM4WSxFQUFXa0IsR0FDdkIsTUFBTUMsRUFBYUQsRUFBZSxJQUNsQyxPQUFJQyxHQUFjLFdBQ1BBLEVBQWEsTUFBUSxJQUd5QixJQUE5QzVlLEtBQUs2ZSxLQUFLRCxFQUFhLE1BQVMsTUFBTyxJQUV0RCxDQVNPLFNBQVMvQixFQUFhOEIsR0FDekIsTUFBTUMsRUFBYUQsRUFBZSxJQUNsQyxJQUFJOUIsRUFBZSxFQU9uQixPQUxJQSxFQURBK0IsR0FBYyxTQUNjLE1BQWJBLEVBR0EsTUFBUTVlLEtBQUs2ZSxJQUFJRCxFQUFZLEVBQU0sS0FBTyxLQUV0RCxFQUFtQixFQUFHLElBQUs1ZSxLQUFLdVYsTUFBcUIsSUFBZnNILEdBQ2pELENBTU8sU0FBU2lDLElBQ1osT0FBT3hDLENBQ1gsQ0FPTyxTQUFTeUMsRUFBYWhDLEdBS3pCLE1BQU8sQ0FBRXBOLEVBSkNxTixFQUFZRCxHQUlWdkwsRUFIRnlMLEVBQWNGLEdBR1QxTCxFQUZMNkwsRUFBYUgsR0FFTG5NLEVBRFJrTSxFQUFjQyxHQUU1QixDQU9PLFNBQVNpQyxHQUFhLEVBQUVyUCxFQUFDLEVBQUU2QixFQUFDLEVBQUVILEVBQUMsRUFBRVQsSUFDcEMsTUFBTXFPLEVBQVNDLEVBQWV2UCxHQUN4QndQLEVBQVNELEVBQWUxTixHQUN4QjROLEVBQVNGLEVBQWU3TixHQUU5QixPQURlNk4sRUFBZXRPLElBQ1osR0FBT3FPLEdBQVUsR0FBT0UsR0FBVSxFQUFLQyxDQUM3RCxDQUNBLFNBQVNGLEVBQWU1ZSxHQUNwQixPQUFJQSxFQUFRLEVBQ0QsRUFDUEEsRUFBUSxJQUNELElBQ0pBLENBQ1gsQ0FDQSxTQUFTOGQsRUFBSzFPLEdBR1YsT0FBSUEsRUFGTSxJQUFRLE1BR1AxUCxLQUFLNmUsSUFBSW5QLEVBQUcsRUFBTSxJQUZmLGtCQUtNQSxFQUFJLElBQU0sR0FFbEMsQ0FDQSxTQUFTcU8sRUFBUXNCLEdBQ2IsTUFFTUMsRUFBTUQsRUFBS0EsRUFBS0EsRUFDdEIsT0FBSUMsRUFITSxJQUFRLE1BSVBBLEdBR0MsSUFBTUQsRUFBSyxJQU5ULGlCQVFsQixDQ25STyxNQUFNRSxFQXVCVCxXQUFPQyxDQUFLN0IsRUFBYSxJQUF1QjhCLEVBQXFCLElBQVF6ZixLQUFLMGYsR0FBTSxFQUFpQixJQUFRLElBQU9DLEVBQWtCLEdBQU1DLEVBQVcsRUFBS0MsR0FBd0IsR0FDcEwsTUFBTUMsRUFBTW5DLEVBQ05vQyxFQUFjLFFBQVRELEVBQUksR0FBeUIsUUFBVEEsRUFBSSxJQUEwQixRQUFWQSxFQUFJLEdBQ2pERSxHQUFlLFFBQVZGLEVBQUksR0FBMEIsU0FBVEEsRUFBSSxHQUF5QixRQUFUQSxFQUFJLEdBQ2xERyxHQUFlLFFBQVZILEVBQUksR0FBMEIsUUFBVEEsRUFBSSxHQUF5QixRQUFUQSxFQUFJLEdBQ2xEN08sRUFBSSxHQUFNMk8sRUFBVyxHQUNyQjVQLEVBQUlpQixHQUFLLEdBQU0sRUFBVSxJQUFNLElBQWtCLElBQVhBLEVBQUksS0FDNUMsRUFBVSxLQUFPLElBQWtCLElBQVhBLEVBQUksS0FDaEMsSUFBSWhCLEVBQUk0UCxFQUNKLEVBQ0E1TyxHQUFLLEVBQU8sRUFBTSxJQUFPalIsS0FBS2tnQixNQUFNVCxFQUFvQixJQUFRLEtBQ3BFeFAsRUFBSUEsRUFBSSxFQUFNLEVBQU1BLEVBQUksRUFBTSxFQUFNQSxFQUNwQyxNQUFNa1EsRUFBS2xQLEVBQ0xtUCxFQUFPLENBQ1RuUSxHQUFLLElBQVE4UCxHQUFNLEVBQU05UCxFQUN6QkEsR0FBSyxJQUFRK1AsR0FBTSxFQUFNL1AsRUFDekJBLEdBQUssSUFBUWdRLEdBQU0sRUFBTWhRLEdBRXZCeEwsRUFBSSxHQUFPLEVBQU1nYixFQUFvQixHQUNyQ1ksRUFBSzViLEVBQUlBLEVBQUlBLEVBQUlBLEVBQ2pCNmIsRUFBTSxFQUFNRCxFQUNaRSxFQUFLRixFQUFLWixFQUNaLEdBQU1hLEVBQU1BLEVBQU10Z0IsS0FBS3dnQixLQUFLLEVBQU1mLEdBQ2hDN1AsRUFBSSxFQUFpQitQLEdBQW1CaEMsRUFBVyxHQUNuRC9ZLEVBQUksS0FBTzVFLEtBQUt5Z0IsS0FBSzdRLEdBQ3JCOFEsRUFBTSxLQUFRMWdCLEtBQUs2ZSxJQUFJalAsRUFBRyxJQUMxQitRLEVBQU1ELEVBQ05FLEVBQWMsQ0FDaEI1Z0IsS0FBSzZlLElBQUswQixFQUFLSCxFQUFLLEdBQUtMLEVBQU0sSUFBTyxLQUN0Qy9mLEtBQUs2ZSxJQUFLMEIsRUFBS0gsRUFBSyxHQUFLSixFQUFNLElBQU8sS0FDdENoZ0IsS0FBSzZlLElBQUswQixFQUFLSCxFQUFLLEdBQUtILEVBQU0sSUFBTyxNQUVwQ1ksRUFBTyxDQUNSLElBQVFELEVBQVksSUFBT0EsRUFBWSxHQUFLLE9BQzVDLElBQVFBLEVBQVksSUFBT0EsRUFBWSxHQUFLLE9BQzVDLElBQVFBLEVBQVksSUFBT0EsRUFBWSxHQUFLLFFBR2pELE9BQU8sSUFBSXJCLEVBQWtCM1AsR0FEakIsRUFBTWlSLEVBQUssR0FBS0EsRUFBSyxHQUFLLElBQU9BLEVBQUssSUFBTUgsRUFDcEJBLEVBQUtDLEVBQUszUSxFQUFHbVEsRUFBSUMsRUFBTUcsRUFBSXZnQixLQUFLNmUsSUFBSTBCLEVBQUksS0FBTzNiLEVBQ3ZGLENBUUEsV0FBQWtjLENBQVlsUixFQUFHbVIsRUFBSUwsRUFBS0MsRUFBSzNRLEVBQUdtUSxFQUFJQyxFQUFNRyxFQUFJUyxFQUFRcGMsR0FDbEQ3SCxLQUFLNlMsRUFBSUEsRUFDVDdTLEtBQUtna0IsR0FBS0EsRUFDVmhrQixLQUFLMmpCLElBQU1BLEVBQ1gzakIsS0FBSzRqQixJQUFNQSxFQUNYNWpCLEtBQUtpVCxFQUFJQSxFQUNUalQsS0FBS29qQixHQUFLQSxFQUNWcGpCLEtBQUtxakIsS0FBT0EsRUFDWnJqQixLQUFLd2pCLEdBQUtBLEVBQ1Z4akIsS0FBS2lrQixPQUFTQSxFQUNkamtCLEtBQUs2SCxFQUFJQSxDQUNiLEVBR0oyYSxFQUFrQjBCLFFBQVUxQixFQUFrQkMsT0MvRXZDLE1BQU0wQixFQXFCVCxXQUFBSixDQUFZSyxFQUFLQyxFQUFRNWMsRUFBR2dPLEVBQUd6QyxFQUFHVyxFQUFHMlEsRUFBT0MsRUFBT0MsR0FDL0N4a0IsS0FBS29rQixJQUFNQSxFQUNYcGtCLEtBQUtxa0IsT0FBU0EsRUFDZHJrQixLQUFLeUgsRUFBSUEsRUFDVHpILEtBQUt5VixFQUFJQSxFQUNUelYsS0FBS2dULEVBQUlBLEVBQ1RoVCxLQUFLMlQsRUFBSUEsRUFDVDNULEtBQUtza0IsTUFBUUEsRUFDYnRrQixLQUFLdWtCLE1BQVFBLEVBQ2J2a0IsS0FBS3drQixNQUFRQSxDQUNqQixDQU1BLFFBQUFDLENBQVNDLEdBQ0wsTUFBTUMsRUFBSzNrQixLQUFLc2tCLE1BQVFJLEVBQU1KLE1BQ3hCTSxFQUFLNWtCLEtBQUt1a0IsTUFBUUcsRUFBTUgsTUFDeEJNLEVBQUs3a0IsS0FBS3drQixNQUFRRSxFQUFNRixNQUN4Qk0sRUFBVTdoQixLQUFLeWdCLEtBQUtpQixFQUFLQSxFQUFLQyxFQUFLQSxFQUFLQyxFQUFLQSxHQUVuRCxPQURXLEtBQU81aEIsS0FBSzZlLElBQUlnRCxFQUFTLElBRXhDLENBTUEsY0FBT0MsQ0FBUS9FLEdBQ1gsT0FBT21FLEVBQU1hLDJCQUEyQmhGLEVBQU13QyxFQUFrQjBCLFFBQ3BFLENBT0EsaUNBQU9jLENBQTJCaEYsRUFBTWlGLEdBQ3BDLE1BQ012RixHQUFnQixNQUFQTSxJQUFzQixFQUMvQkwsRUFBZSxJQUFQSyxFQUNSa0YsRUFBTyxHQUhPLFNBQVBsRixJQUFzQixJQUk3Qm1GLEVBQVMsRUFBaUJ6RixHQUMxQjBGLEVBQVEsRUFBaUJ6RixHQUN6QmhZLEVBQUksVUFBYXVkLEVBQU8sVUFBYUMsRUFBUyxVQUFhQyxFQUMzRHhkLEVBQUksTUFBU3NkLEVBQU8sTUFBU0MsRUFBUyxNQUFTQyxFQUMvQ3ZkLEVBQUksVUFBYXFkLEVBQU8sVUFBYUMsRUFBUyxVQUFhQyxFQUMzREMsRUFBSyxRQUFXMWQsRUFBSSxRQUFXQyxFQUFJLFFBQVdDLEVBQzlDeWQsR0FBTSxRQUFXM2QsRUFBSSxTQUFXQyxFQUFJLFFBQVdDLEVBQy9DMGQsR0FBTSxRQUFXNWQsRUFBSSxRQUFXQyxFQUFJLFFBQVdDLEVBQy9DMmQsRUFBS1AsRUFBa0I1QixLQUFLLEdBQUtnQyxFQUNqQ0ksRUFBS1IsRUFBa0I1QixLQUFLLEdBQUtpQyxFQUNqQ0ksRUFBS1QsRUFBa0I1QixLQUFLLEdBQUtrQyxFQUNqQ0ksRUFBTTFpQixLQUFLNmUsSUFBS21ELEVBQWtCekIsR0FBS3ZnQixLQUFLRCxJQUFJd2lCLEdBQU8sSUFBTyxLQUM5REksRUFBTTNpQixLQUFLNmUsSUFBS21ELEVBQWtCekIsR0FBS3ZnQixLQUFLRCxJQUFJeWlCLEdBQU8sSUFBTyxLQUM5REksRUFBTTVpQixLQUFLNmUsSUFBS21ELEVBQWtCekIsR0FBS3ZnQixLQUFLRCxJQUFJMGlCLEdBQU8sSUFBTyxLQUM5REksRUFBd0IsSUFBbEIsRUFBWU4sR0FBY0csR0FBUUEsRUFBTSxPQUM5Q0ksRUFBd0IsSUFBbEIsRUFBWU4sR0FBY0csR0FBUUEsRUFBTSxPQUM5Q0ksRUFBd0IsSUFBbEIsRUFBWU4sR0FBY0csR0FBUUEsRUFBTSxPQUM5Q2hTLEdBQUssR0FBT2lTLEdBQU0sR0FBT0MsRUFBS0MsR0FBTSxHQUNwQzFSLEdBQUt3UixFQUFLQyxFQUFLLEVBQU1DLEdBQU0sRUFDM0IvUixHQUFLLEdBQU82UixFQUFLLEdBQU9DLEVBQUssR0FBT0MsR0FBTSxHQUMxQ25YLEdBQU0sR0FBT2lYLEVBQUssR0FBT0MsRUFBS0MsR0FBTSxHQUVwQ0MsRUFBdUIsSUFEZmhqQixLQUFLaWpCLE1BQU01UixFQUFHVCxHQUNVNVEsS0FBSzBmLEdBQ3JDeUIsRUFBTTZCLEVBQWMsRUFBSUEsRUFBYyxJQUN4Q0EsR0FBZSxJQUFNQSxFQUFjLElBQy9CQSxFQUNGRSxFQUFjL0IsRUFBTW5oQixLQUFLMGYsR0FBTSxJQUMvQnlELEVBQUt2WCxFQUFLb1csRUFBa0J0QixJQUM1QmxjLEVBQUksSUFDTnhFLEtBQUs2ZSxJQUFJc0UsRUFBS25CLEVBQWtCakIsR0FBSWlCLEVBQWtCaFMsRUFBSWdTLEVBQWtCcGQsR0FDMUU0TixFQUFLLEVBQU13UCxFQUFrQmhTLEVBQUtoUSxLQUFLeWdCLEtBQUtqYyxFQUFJLE1BQ2pEd2QsRUFBa0JqQixHQUFLLEdBQU9pQixFQUFrQmhCLE9BQy9Db0MsRUFBV2pDLEVBQU0sTUFBUUEsRUFBTSxJQUFNQSxFQUdyQ3pSLEVBRE0sSUFBVSxJQURULEtBQVExUCxLQUFLcWpCLElBQUtELEVBQVdwakIsS0FBSzBmLEdBQU0sSUFBUSxHQUFPLE1BQy9Cc0MsRUFBa0I3QixHQUFLNkIsRUFBa0JyQixJQUM5RDNnQixLQUFLeWdCLEtBQUs3UCxFQUFJQSxFQUFJUyxFQUFJQSxJQUFPTCxFQUFJLE1BQzNDc1MsRUFBUXRqQixLQUFLNmUsSUFBSW5QLEVBQUcsSUFDdEIxUCxLQUFLNmUsSUFBSSxLQUFPN2UsS0FBSzZlLElBQUksSUFBTW1ELEVBQWtCcFMsR0FBSSxLQUNuREksRUFBSXNULEVBQVF0akIsS0FBS3lnQixLQUFLamMsRUFBSSxLQUMxQnVMLEVBQUlDLEVBQUlnUyxFQUFrQmhCLE9BQzFCdFEsRUFBSSxHQUNOMVEsS0FBS3lnQixLQUFNNkMsRUFBUXRCLEVBQWtCaFMsR0FBTWdTLEVBQWtCakIsR0FBSyxJQUNoRU0sR0FBVSxFQUFNLElBQVEsTUFBUzdjLEdBQU0sRUFBTSxLQUFRQSxHQUNyRCtlLEVBQVMsRUFBTSxNQUFVdmpCLEtBQUt3akIsSUFBSSxFQUFNLE1BQVN6VCxHQUNqRHVSLEVBQVFpQyxFQUFRdmpCLEtBQUtxakIsSUFBSUgsR0FDekIzQixFQUFRZ0MsRUFBUXZqQixLQUFLeWpCLElBQUlQLEdBQy9CLE9BQU8sSUFBSWhDLEVBQU1DLEVBQUtuUixFQUFHeEwsRUFBR2dPLEVBQUd6QyxFQUFHVyxFQUFHMlEsRUFBT0MsRUFBT0MsRUFDdkQsQ0FNQSxjQUFPbUMsQ0FBUWxmLEVBQUd3TCxFQUFHMUMsR0FDakIsT0FBTzRULEVBQU15QywyQkFBMkJuZixFQUFHd0wsRUFBRzFDLEVBQUdpUyxFQUFrQjBCLFFBQ3ZFLENBUUEsaUNBQU8wQyxDQUEyQm5mLEVBQUd3TCxFQUFHMUMsRUFBRzBVLEdBQ3ZDLE1BQU14UCxFQUFLLEVBQU13UCxFQUFrQmhTLEVBQUtoUSxLQUFLeWdCLEtBQUtqYyxFQUFJLE1BQ2pEd2QsRUFBa0JqQixHQUFLLEdBQU9pQixFQUFrQmhCLE9BQy9DalIsRUFBSUMsRUFBSWdTLEVBQWtCaEIsT0FDMUJzQyxFQUFRdFQsRUFBSWhRLEtBQUt5Z0IsS0FBS2pjLEVBQUksS0FDMUJrTSxFQUFJLEdBQ04xUSxLQUFLeWdCLEtBQU02QyxFQUFRdEIsRUFBa0JoUyxHQUFNZ1MsRUFBa0JqQixHQUFLLElBQ2hFbUMsRUFBYzVWLEVBQUl0TixLQUFLMGYsR0FBTSxJQUM3QjJCLEdBQVUsRUFBTSxJQUFRLE1BQVM3YyxHQUFNLEVBQU0sS0FBUUEsR0FDckQrZSxFQUFTLEVBQU0sTUFBVXZqQixLQUFLd2pCLElBQUksRUFBTSxNQUFTelQsR0FDakR1UixFQUFRaUMsRUFBUXZqQixLQUFLcWpCLElBQUlILEdBQ3pCM0IsRUFBUWdDLEVBQVF2akIsS0FBS3lqQixJQUFJUCxHQUMvQixPQUFPLElBQUloQyxFQUFNNVQsRUFBRzBDLEVBQUd4TCxFQUFHZ08sRUFBR3pDLEVBQUdXLEVBQUcyUSxFQUFPQyxFQUFPQyxFQUNyRCxDQVFBLGNBQU9xQyxDQUFRdkMsRUFBT0MsRUFBT0MsR0FDekIsT0FBT0wsRUFBTTJDLDJCQUEyQnhDLEVBQU9DLEVBQU9DLEVBQU9oQyxFQUFrQjBCLFFBQ25GLENBVUEsaUNBQU80QyxDQUEyQnhDLEVBQU9DLEVBQU9DLEVBQU9TLEdBQ25ELE1BQU1wUixFQUFJMFEsRUFDSmpRLEVBQUlrUSxFQUNKeFIsRUFBSS9QLEtBQUt5Z0IsS0FBSzdQLEVBQUlBLEVBQUlTLEVBQUlBLEdBRTFCckIsR0FES2hRLEtBQUtrZ0IsSUFBUSxNQUFKblEsR0FBYyxHQUFPLE1BQzNCaVMsRUFBa0JoQixPQUNoQyxJQUFJMVQsRUFBSXROLEtBQUtpakIsTUFBTTVSLEVBQUdULElBQU0sSUFBUTVRLEtBQUswZixJQUNyQ3BTLEVBQUksSUFDSkEsR0FBSyxLQUVULE1BQU05SSxFQUFJNmMsR0FBUyxFQUFvQixNQUFmQSxFQUFRLE1BQ2hDLE9BQU9ILEVBQU15QywyQkFBMkJuZixFQUFHd0wsRUFBRzFDLEVBQUcwVSxFQUNyRCxDQU1BLEtBQUE4QixHQUNJLE9BQU8vbUIsS0FBS2duQixPQUFPeEUsRUFBa0IwQixRQUN6QyxDQU1BLE1BQUE4QyxDQUFPL0IsR0FDSCxNQUFNc0IsRUFBd0IsSUFBaEJ2bUIsS0FBS3FrQixRQUE2QixJQUFYcmtCLEtBQUt5SCxFQUN0QyxFQUNBekgsS0FBS3FrQixPQUFTcGhCLEtBQUt5Z0IsS0FBSzFqQixLQUFLeUgsRUFBSSxLQUMvQmtMLEVBQUkxUCxLQUFLNmUsSUFBSXlFLEVBQVF0akIsS0FBSzZlLElBQUksS0FBTzdlLEtBQUs2ZSxJQUFJLElBQU1tRCxFQUFrQnBTLEdBQUksS0FBTyxFQUFNLElBQ3ZGb1UsRUFBUWpuQixLQUFLb2tCLElBQU1uaEIsS0FBSzBmLEdBQU0sSUFDOUJ1RSxFQUFPLEtBQVFqa0IsS0FBS3FqQixJQUFJVyxFQUFPLEdBQU8sS0FDdENiLEVBQUtuQixFQUFrQmpCLEdBQ3pCL2dCLEtBQUs2ZSxJQUFJOWhCLEtBQUt5SCxFQUFJLElBQU8sRUFBTXdkLEVBQWtCaFMsRUFBSWdTLEVBQWtCcGQsR0FDckUrRyxFQUFLc1ksR0FBUSxJQUFVLElBQVFqQyxFQUFrQjdCLEdBQUs2QixFQUFrQnJCLElBQ3hFL1UsRUFBS3VYLEVBQUtuQixFQUFrQnRCLElBQzVCd0QsRUFBT2xrQixLQUFLeWpCLElBQUlPLEdBQ2hCRyxFQUFPbmtCLEtBQUtxakIsSUFBSVcsR0FDaEJJLEVBQVMsSUFBUXhZLEVBQUssTUFBUzhELEdBQ2hDLEdBQU8vRCxFQUFLLEdBQU8rRCxFQUFJeVUsRUFBTyxJQUFRelUsRUFBSXdVLEdBQ3pDdFQsRUFBSXdULEVBQVFELEVBQ1o5UyxFQUFJK1MsRUFBUUYsRUFDWnJCLEdBQU0sSUFBUWpYLEVBQUssSUFBUWdGLEVBQUksSUFBUVMsR0FBSyxLQUM1Q3lSLEdBQU0sSUFBUWxYLEVBQUssSUFBUWdGLEVBQUksSUFBUVMsR0FBSyxLQUM1QzBSLEdBQU0sSUFBUW5YLEVBQUssSUFBUWdGLEVBQUksS0FBU1MsR0FBSyxLQUM3Q2dULEVBQVNya0IsS0FBS3diLElBQUksRUFBSSxNQUFReGIsS0FBS0QsSUFBSThpQixJQUFRLElBQVE3aUIsS0FBS0QsSUFBSThpQixLQUNoRVQsRUFBSyxFQUFZUyxJQUFPLElBQVFiLEVBQWtCekIsSUFDcER2Z0IsS0FBSzZlLElBQUl3RixFQUFRLEVBQU0sS0FDckJDLEVBQVN0a0IsS0FBS3diLElBQUksRUFBSSxNQUFReGIsS0FBS0QsSUFBSStpQixJQUFRLElBQVE5aUIsS0FBS0QsSUFBSStpQixLQUNoRVQsRUFBSyxFQUFZUyxJQUFPLElBQVFkLEVBQWtCekIsSUFDcER2Z0IsS0FBSzZlLElBQUl5RixFQUFRLEVBQU0sS0FDckJDLEVBQVN2a0IsS0FBS3diLElBQUksRUFBSSxNQUFReGIsS0FBS0QsSUFBSWdqQixJQUFRLElBQVEvaUIsS0FBS0QsSUFBSWdqQixLQUNoRVQsRUFBSyxFQUFZUyxJQUFPLElBQVFmLEVBQWtCekIsSUFDcER2Z0IsS0FBSzZlLElBQUkwRixFQUFRLEVBQU0sS0FDckJDLEVBQUtwQyxFQUFLSixFQUFrQjVCLEtBQUssR0FDakNxRSxFQUFLcEMsRUFBS0wsRUFBa0I1QixLQUFLLEdBQ2pDc0UsRUFBS3BDLEVBQUtOLEVBQWtCNUIsS0FBSyxHQUt2QyxPQURhLEVBSEgsV0FBYW9FLEVBQUssV0FBYUMsRUFBSyxVQUFhQyxFQUNqRCxVQUFhRixFQUFLLFVBQWFDLEVBQUssVUFBYUMsR0FDaEQsU0FBYUYsRUFBSyxVQUFhQyxFQUFLLFdBQWFDLEVBR2hFLENBR0EsaUNBQU9DLENBQTJCamdCLEVBQUdDLEVBQUdDLEVBQUdvZCxHQUV2QyxNQUFNSSxFQUFLLFFBQVcxZCxFQUFJLFFBQVdDLEVBQUksUUFBV0MsRUFDOUN5ZCxHQUFNLFFBQVczZCxFQUFJLFNBQVdDLEVBQUksUUFBV0MsRUFDL0MwZCxHQUFNLFFBQVc1ZCxFQUFJLFFBQVdDLEVBQUksUUFBV0MsRUFFL0MyZCxFQUFLUCxFQUFrQjVCLEtBQUssR0FBS2dDLEVBQ2pDSSxFQUFLUixFQUFrQjVCLEtBQUssR0FBS2lDLEVBQ2pDSSxFQUFLVCxFQUFrQjVCLEtBQUssR0FBS2tDLEVBRWpDSSxFQUFNMWlCLEtBQUs2ZSxJQUFJbUQsRUFBa0J6QixHQUFLdmdCLEtBQUtELElBQUl3aUIsR0FBTSxJQUFPLEtBQzVESSxFQUFNM2lCLEtBQUs2ZSxJQUFJbUQsRUFBa0J6QixHQUFLdmdCLEtBQUtELElBQUl5aUIsR0FBTSxJQUFPLEtBQzVESSxFQUFNNWlCLEtBQUs2ZSxJQUFJbUQsRUFBa0J6QixHQUFLdmdCLEtBQUtELElBQUkwaUIsR0FBTSxJQUFPLEtBQzVESSxFQUF1QixJQUFsQixFQUFZTixHQUFjRyxHQUFPQSxFQUFNLE9BQzVDSSxFQUF1QixJQUFsQixFQUFZTixHQUFjRyxHQUFPQSxFQUFNLE9BQzVDSSxFQUF1QixJQUFsQixFQUFZTixHQUFjRyxHQUFPQSxFQUFNLE9BRTVDaFMsR0FBSyxHQUFPaVMsR0FBTSxHQUFPQyxFQUFLQyxHQUFNLEdBRXBDMVIsR0FBS3dSLEVBQUtDLEVBQUssRUFBTUMsR0FBTSxFQUUzQi9SLEdBQUssR0FBTzZSLEVBQUssR0FBT0MsRUFBSyxHQUFPQyxHQUFNLEdBQzFDblgsR0FBTSxHQUFPaVgsRUFBSyxHQUFPQyxFQUFLQyxHQUFNLEdBR3BDQyxFQUFzQixJQURkaGpCLEtBQUtpakIsTUFBTTVSLEVBQUdULEdBQ1E1USxLQUFLMGYsR0FDbkN5QixFQUFNNkIsRUFBYyxFQUFJQSxFQUFjLElBQ3hDQSxHQUFlLElBQU1BLEVBQWMsSUFDL0JBLEVBQ0ZFLEVBQWEvQixFQUFNbmhCLEtBQUswZixHQUFLLElBRTdCeUQsRUFBS3ZYLEVBQUtvVyxFQUFrQnRCLElBRTVCa0UsRUFBSSxJQUNONWtCLEtBQUs2ZSxJQUFJc0UsRUFBS25CLEVBQWtCakIsR0FBSWlCLEVBQWtCaFMsRUFBSWdTLEVBQWtCcGQsR0FDMUVpZ0IsRUFBSyxFQUFNN0MsRUFBa0JoUyxFQUFLaFEsS0FBS3lnQixLQUFLbUUsRUFBSSxNQUNqRDVDLEVBQWtCakIsR0FBSyxHQUFRaUIsRUFBd0IsT0FDdERvQixFQUFZakMsRUFBTSxNQUFTQSxFQUFNLElBQU1BLEVBR3ZDelIsRUFESyxJQUFVLElBRFAsRUFBTSxHQUFRMVAsS0FBS3FqQixJQUFJRCxFQUFXcGpCLEtBQUswZixHQUFLLElBQVEsR0FBTyxNQUN0Q3NDLEVBQWtCN0IsR0FBSzZCLEVBQWtCckIsSUFDN0QzZ0IsS0FBS3lnQixLQUFLN1AsRUFBSUEsRUFBSVMsRUFBSUEsSUFBTUwsRUFBSSxNQUN6Q3NTLEVBQVF0akIsS0FBSzZlLElBQUluUCxFQUFHLElBQ3RCMVAsS0FBSzZlLElBQUksS0FBTzdlLEtBQUs2ZSxJQUFJLElBQU1tRCxFQUFrQnBTLEdBQUksS0FFbkQrRCxFQUFJMlAsRUFBUXRqQixLQUFLeWdCLEtBQUttRSxFQUFJLEtBQzFCbFIsRUFBSUMsRUFBSXFPLEVBQWtCaEIsT0FDMUJ0USxFQUFJLEdBQ04xUSxLQUFLeWdCLEtBQU02QyxFQUFRdEIsRUFBa0JoUyxHQUFNZ1MsRUFBa0JqQixHQUFLLElBRWhFTSxHQUFTLEVBQU0sSUFBUSxNQUFTdUQsR0FBSyxFQUFNLEtBQVFBLEdBQ25EckIsRUFBUXZqQixLQUFLd2pCLElBQUksRUFBTSxNQUFTOVAsR0FBSyxNQUNyQzROLEVBQVFpQyxFQUFRdmpCLEtBQUtxakIsSUFBSUgsR0FDekIzQixFQUFRZ0MsRUFBUXZqQixLQUFLeWpCLElBQUlQLEdBQy9CLE9BQU8sSUFBSWhDLEVBQU1DLEVBQUt4TixFQUFHaVIsRUFBR0MsRUFBR25SLEVBQUdoRCxFQUFHMlEsRUFBT0MsRUFBT0MsRUFDdkQsQ0FFQSxzQkFBQXVELENBQXVCOUMsR0FDbkIsTUFBTXNCLEVBQXlCLElBQWhCdm1CLEtBQUtxa0IsUUFBNkIsSUFBWHJrQixLQUFLeUgsRUFDdkMsRUFDQXpILEtBQUtxa0IsT0FBU3BoQixLQUFLeWdCLEtBQUsxakIsS0FBS3lILEVBQUksS0FDL0JrTCxFQUFJMVAsS0FBSzZlLElBQUl5RSxFQUFRdGpCLEtBQUs2ZSxJQUFJLEtBQU83ZSxLQUFLNmUsSUFBSSxJQUFNbUQsRUFBa0JwUyxHQUFJLEtBQU8sRUFBTSxJQUN2Rm9VLEVBQU9qbkIsS0FBS29rQixJQUFNbmhCLEtBQUswZixHQUFLLElBQzVCdUUsRUFBTyxLQUFRamtCLEtBQUtxakIsSUFBSVcsRUFBTyxHQUFPLEtBQ3RDYixFQUFLbkIsRUFBa0JqQixHQUN6Qi9nQixLQUFLNmUsSUFBSTloQixLQUFLeUgsRUFBSSxJQUFPLEVBQU13ZCxFQUFrQmhTLEVBQUlnUyxFQUFrQnBkLEdBQ3JFK0csRUFBS3NZLEdBQVEsSUFBVSxJQUFRakMsRUFBa0I3QixHQUFLNkIsRUFBa0JyQixJQUN4RS9VLEVBQU11WCxFQUFLbkIsRUFBa0J0QixJQUM3QndELEVBQU9sa0IsS0FBS3lqQixJQUFJTyxHQUNoQkcsRUFBT25rQixLQUFLcWpCLElBQUlXLEdBQ2hCSSxFQUFRLElBQVF4WSxFQUFLLE1BQVM4RCxHQUMvQixHQUFPL0QsRUFBSyxHQUFLK0QsRUFBSXlVLEVBQU8sSUFBUXpVLEVBQUl3VSxHQUN2Q3RULEVBQUl3VCxFQUFRRCxFQUNaOVMsRUFBSStTLEVBQVFGLEVBQ1pyQixHQUFNLElBQVFqWCxFQUFLLElBQVFnRixFQUFJLElBQVFTLEdBQUssS0FDNUN5UixHQUFNLElBQVFsWCxFQUFLLElBQVFnRixFQUFJLElBQVFTLEdBQUssS0FDNUMwUixHQUFNLElBQVFuWCxFQUFLLElBQVFnRixFQUFJLEtBQVNTLEdBQUssS0FDN0NnVCxFQUFTcmtCLEtBQUt3YixJQUFJLEVBQUksTUFBUXhiLEtBQUtELElBQUk4aUIsSUFBUSxJQUFRN2lCLEtBQUtELElBQUk4aUIsS0FDaEVULEVBQUssRUFBWVMsSUFBTyxJQUFRYixFQUFrQnpCLElBQ3BEdmdCLEtBQUs2ZSxJQUFJd0YsRUFBUSxFQUFNLEtBQ3JCQyxFQUFTdGtCLEtBQUt3YixJQUFJLEVBQUksTUFBUXhiLEtBQUtELElBQUkraUIsSUFBUSxJQUFROWlCLEtBQUtELElBQUkraUIsS0FDaEVULEVBQUssRUFBWVMsSUFBTyxJQUFRZCxFQUFrQnpCLElBQ3BEdmdCLEtBQUs2ZSxJQUFJeUYsRUFBUSxFQUFNLEtBQ3JCQyxFQUFTdmtCLEtBQUt3YixJQUFJLEVBQUksTUFBUXhiLEtBQUtELElBQUlnakIsSUFBUSxJQUFRL2lCLEtBQUtELElBQUlnakIsS0FDaEVULEVBQUssRUFBWVMsSUFBTyxJQUFRZixFQUFrQnpCLElBQ3BEdmdCLEtBQUs2ZSxJQUFJMEYsRUFBUSxFQUFNLEtBQ3JCQyxFQUFLcEMsRUFBS0osRUFBa0I1QixLQUFLLEdBQ2pDcUUsRUFBS3BDLEVBQUtMLEVBQWtCNUIsS0FBSyxHQUNqQ3NFLEVBQUtwQyxFQUFLTixFQUFrQjVCLEtBQUssR0FJdkMsTUFBTyxDQUhHLFdBQWFvRSxFQUFLLFdBQWFDLEVBQUssVUFBYUMsRUFDakQsVUFBYUYsRUFBSyxVQUFhQyxFQUFLLFVBQWFDLEdBQ2hELFNBQWFGLEVBQUssVUFBYUMsRUFBSyxXQUFhQyxFQUVoRSxFQ3JVRyxNQUFNSyxFQVFULHNCQUFPQyxDQUFnQkMsR0FDbkIsT0FBUUEsRUFBa0IsRUFBVmpsQixLQUFLMGYsS0FBcUIsRUFBVjFmLEtBQUswZixHQUN6QyxDQVVBLHVCQUFPd0YsQ0FBaUJ2RyxHQUNwQixNQUFNQyxFQUFhRCxFQUFlLElBQ2xDLElBQUk5QixFQUFlLEVBT25CLE9BTElBLEVBREErQixHQUFjLFNBQ2MsTUFBYkEsRUFHQSxNQUFRNWUsS0FBSzZlLElBQUlELEVBQVksRUFBTSxLQUFPLEtBRXZDLElBQWYvQixDQUNYLENBQ0EsMEJBQU9zSSxDQUFvQjVHLEdBQ3ZCLE1BQU02RyxFQUFLcGxCLEtBQUs2ZSxJQUFJN2UsS0FBS0QsSUFBSXdlLEdBQVksS0FDekMsT0FBcUMsSUFBOUIsRUFBaUJBLEdBQXFCNkcsR0FBTUEsRUFBSyxNQUM1RCxDQU9BLFlBQU9DLENBQU16SSxHQUNULE1BQU0wSSxFQUFpQixFQUF5QjFJLEVBQVFtSSxFQUFVUSw2QkFDNUQxQyxFQUFLa0MsRUFBVUksb0JBQW9CRyxFQUFlLElBQ2xEeEMsRUFBS2lDLEVBQVVJLG9CQUFvQkcsRUFBZSxJQUNsRHZDLEVBQUtnQyxFQUFVSSxvQkFBb0JHLEVBQWUsSUFFbEQxVSxHQUFLLEdBQU9pUyxHQUFNLEdBQU9DLEVBQUtDLEdBQU0sR0FFcEMxUixHQUFLd1IsRUFBS0MsRUFBSyxFQUFNQyxHQUFNLEVBQ2pDLE9BQU8vaUIsS0FBS2lqQixNQUFNNVIsRUFBR1QsRUFDekIsQ0FDQSx1QkFBTzRVLENBQWlCNVUsRUFBR1MsRUFBR3JCLEdBRzFCLE9BRmdCK1UsRUFBVUMsZ0JBQWdCM1QsRUFBSVQsR0FDOUJtVSxFQUFVQyxnQkFBZ0JoVixFQUFJWSxFQUVsRCxDQVNBLGdCQUFPNlUsQ0FBVUMsRUFBUUMsRUFBS0MsR0FDMUIsT0FBUUQsRUFBTUQsSUFBV0UsRUFBU0YsRUFDdEMsQ0FDQSxnQkFBT0csQ0FBVUgsRUFBUWhXLEVBQUdrVyxHQUN4QixNQUFPLENBQ0hGLEVBQU8sSUFBTUUsRUFBTyxHQUFLRixFQUFPLElBQU1oVyxFQUN0Q2dXLEVBQU8sSUFBTUUsRUFBTyxHQUFLRixFQUFPLElBQU1oVyxFQUN0Q2dXLEVBQU8sSUFBTUUsRUFBTyxHQUFLRixFQUFPLElBQU1oVyxFQUU5QyxDQVlBLG9CQUFPb1csQ0FBY0osRUFBUUssRUFBWUgsRUFBUUksR0FDN0MsTUFBTXRXLEVBQUlxVixFQUFVVSxVQUFVQyxFQUFPTSxHQUFPRCxFQUFZSCxFQUFPSSxJQUMvRCxPQUFPakIsRUFBVWMsVUFBVUgsRUFBUWhXLEVBQUdrVyxFQUMxQyxDQUNBLGdCQUFPSyxDQUFVdmhCLEdBQ2IsT0FBTyxHQUFPQSxHQUFLQSxHQUFLLEdBQzVCLENBV0EsZ0JBQU93aEIsQ0FBVXZoQixFQUFHaUwsR0FDaEIsTUFBTXVXLEVBQUtwQixFQUFVcUIsY0FBYyxHQUM3QkMsRUFBS3RCLEVBQVVxQixjQUFjLEdBQzdCRSxFQUFLdkIsRUFBVXFCLGNBQWMsR0FDN0JHLEVBQVMzVyxFQUFJLEdBQUssRUFBSSxFQUFNLElBQzVCNFcsRUFBUzVXLEVBQUksR0FBTSxFQUFJLEVBQU0sSUFDbkMsR0FBSUEsRUFBSSxFQUFHLENBQ1AsTUFBTTRCLEVBQUkrVSxFQUNKbFYsRUFBSW1WLEVBQ0o3VyxHQUFLaEwsRUFBSTZNLEVBQUk2VSxFQUFLaFYsRUFBSWlWLEdBQU1ILEVBQ2xDLE9BQUlwQixFQUFVa0IsVUFBVXRXLEdBQ2IsQ0FBQ0EsRUFBRzZCLEVBQUdILEdBR1AsRUFBRSxHQUFNLEdBQU0sRUFFN0IsQ0FDSyxHQUFJekIsRUFBSSxFQUFHLENBQ1osTUFBTXlCLEVBQUlrVixFQUNKNVcsRUFBSTZXLEVBQ0poVixHQUFLN00sRUFBSWdMLEVBQUl3VyxFQUFLOVUsRUFBSWlWLEdBQU1ELEVBQ2xDLE9BQUl0QixFQUFVa0IsVUFBVXpVLEdBQ2IsQ0FBQzdCLEVBQUc2QixFQUFHSCxHQUdQLEVBQUUsR0FBTSxHQUFNLEVBRTdCLENBQ0ssQ0FDRCxNQUFNMUIsRUFBSTRXLEVBQ0ovVSxFQUFJZ1YsRUFDSm5WLEdBQUsxTSxFQUFJZ0wsRUFBSXdXLEVBQUszVSxFQUFJNlUsR0FBTUMsRUFDbEMsT0FBSXZCLEVBQVVrQixVQUFVNVUsR0FDYixDQUFDMUIsRUFBRzZCLEVBQUdILEdBR1AsRUFBRSxHQUFNLEdBQU0sRUFFN0IsQ0FDSixDQVVBLHNCQUFPb1YsQ0FBZ0I5aEIsRUFBRytoQixHQUN0QixJQUFJQyxFQUFPLEVBQUUsR0FBTSxHQUFNLEdBQ3JCQyxFQUFRRCxFQUNSRSxFQUFVLEVBQ1ZDLEVBQVcsRUFDWEMsR0FBYyxFQUNkQyxHQUFRLEVBQ1osSUFBSyxJQUFJcFgsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FDekIsTUFBTStWLEVBQU1aLEVBQVVtQixVQUFVdmhCLEVBQUdpTCxHQUNuQyxHQUFJK1YsRUFBSSxHQUFLLEVBQ1QsU0FFSixNQUFNc0IsRUFBU2xDLEVBQVVNLE1BQU1NLEdBQzFCb0IsR0FRREMsR0FBU2pDLEVBQVVTLGlCQUFpQnFCLEVBQVNJLEVBQVFILE1BQ3JERSxHQUFRLEVBQ0pqQyxFQUFVUyxpQkFBaUJxQixFQUFTSCxFQUFXTyxJQUMvQ0wsRUFBUWpCLEVBQ1JtQixFQUFXRyxJQUdYTixFQUFPaEIsRUFDUGtCLEVBQVVJLEtBZmROLEVBQU9oQixFQUNQaUIsRUFBUWpCLEVBQ1JrQixFQUFVSSxFQUNWSCxFQUFXRyxFQUNYRixHQUFjLEVBY3RCLENBQ0EsTUFBTyxDQUFDSixFQUFNQyxFQUNsQixDQUNBLGVBQU9NLENBQVN0VyxFQUFHUyxHQUNmLE1BQU8sRUFDRlQsRUFBRSxHQUFLUyxFQUFFLElBQU0sR0FDZlQsRUFBRSxHQUFLUyxFQUFFLElBQU0sR0FDZlQsRUFBRSxHQUFLUyxFQUFFLElBQU0sRUFFeEIsQ0FDQSx5QkFBTzhWLENBQW1CemlCLEdBQ3RCLE9BQU8xRSxLQUFLb25CLE1BQU0xaUIsRUFBSSxHQUMxQixDQUNBLHlCQUFPMmlCLENBQW1CM2lCLEdBQ3RCLE9BQU8xRSxLQUFLc25CLEtBQUs1aUIsRUFBSSxHQUN6QixDQVNBLG9CQUFPNmlCLENBQWM1aUIsRUFBRytoQixHQUNwQixNQUFNbFAsRUFBVXVOLEVBQVUwQixnQkFBZ0I5aEIsRUFBRytoQixHQUM3QyxJQUFJQyxFQUFPblAsRUFBUSxHQUNmcVAsRUFBVTlCLEVBQVVNLE1BQU1zQixHQUMxQkMsRUFBUXBQLEVBQVEsR0FDcEIsSUFBSyxJQUFJd08sRUFBTyxFQUFHQSxFQUFPLEVBQUdBLElBQ3pCLEdBQUlXLEVBQUtYLEtBQVVZLEVBQU1aLEdBQU8sQ0FDNUIsSUFBSXdCLEdBQVUsRUFDVkMsRUFBUyxJQUNUZCxFQUFLWCxHQUFRWSxFQUFNWixJQUNuQndCLEVBQVN6QyxFQUFVb0MsbUJBQW1CcEMsRUFBVUcsaUJBQWlCeUIsRUFBS1gsS0FDdEV5QixFQUFTMUMsRUFBVXNDLG1CQUFtQnRDLEVBQVVHLGlCQUFpQjBCLEVBQU1aLE9BR3ZFd0IsRUFBU3pDLEVBQVVzQyxtQkFBbUJ0QyxFQUFVRyxpQkFBaUJ5QixFQUFLWCxLQUN0RXlCLEVBQVMxQyxFQUFVb0MsbUJBQW1CcEMsRUFBVUcsaUJBQWlCMEIsRUFBTVosTUFFM0UsSUFBSyxJQUFJM21CLEVBQUksRUFBR0EsRUFBSSxLQUNaVyxLQUFLRCxJQUFJMG5CLEVBQVNELElBQVcsR0FEZG5vQixJQUlkLENBQ0QsTUFBTXFvQixFQUFTMW5CLEtBQUtvbkIsT0FBT0ksRUFBU0MsR0FBVSxHQUN4Q0UsRUFBcUI1QyxFQUFVNkMsZ0JBQWdCRixHQUMvQy9CLEVBQU1aLEVBQVVlLGNBQWNhLEVBQU1nQixFQUFvQmYsRUFBT1osR0FDL0RpQixFQUFTbEMsRUFBVU0sTUFBTU0sR0FDM0JaLEVBQVVTLGlCQUFpQnFCLEVBQVNILEVBQVdPLElBQy9DTCxFQUFRakIsRUFDUjhCLEVBQVNDLElBR1RmLEVBQU9oQixFQUNQa0IsRUFBVUksRUFDVk8sRUFBU0UsRUFFakIsQ0FFUixDQUVKLE9BQU8zQyxFQUFVbUMsU0FBU1AsRUFBTUMsRUFDcEMsQ0FDQSxpQ0FBT2lCLENBQTJCQyxHQUM5QixNQUFNQyxFQUFhL25CLEtBQUtELElBQUkrbkIsR0FDdEJFLEVBQU9ob0IsS0FBS3diLElBQUksRUFBRyxNQUFRdU0sR0FBYyxJQUFRQSxJQUN2RCxPQUFPLEVBQWlCRCxHQUFXOW5CLEtBQUs2ZSxJQUFJbUosRUFBTSxFQUFNLElBQzVELENBVUEsb0JBQU9DLENBQWMvRSxFQUFZOUIsRUFBUXpjLEdBRXJDLElBQUlILEVBQW1CLEdBQWZ4RSxLQUFLeWdCLEtBQUs5YixHQUlsQixNQUFNcWQsRUFBb0J6QyxFQUFrQjBCLFFBQ3RDaUgsRUFBYyxFQUFJbG9CLEtBQUs2ZSxJQUFJLEtBQU83ZSxLQUFLNmUsSUFBSSxJQUFNbUQsRUFBa0JwUyxHQUFJLEtBRXZFakUsRUFETyxLQUFRM0wsS0FBS3FqQixJQUFJSCxFQUFhLEdBQU8sTUFDL0IsSUFBVSxJQUFRbEIsRUFBa0I3QixHQUFLNkIsRUFBa0JyQixJQUN4RXVELEVBQU9sa0IsS0FBS3lqQixJQUFJUCxHQUNoQmlCLEVBQU9ua0IsS0FBS3FqQixJQUFJSCxHQUN0QixJQUFLLElBQUlpRixFQUFpQixFQUFHQSxFQUFpQixFQUFHQSxJQUFrQixDQUkvRCxNQUFNQyxFQUFjNWpCLEVBQUksSUFDbEI4ZSxFQUFtQixJQUFYbEMsR0FBd0IsSUFBTjVjLEVBQVksRUFBTTRjLEVBQVNwaEIsS0FBS3lnQixLQUFLMkgsR0FDL0QxWSxFQUFJMVAsS0FBSzZlLElBQUl5RSxFQUFRNEUsRUFBYSxFQUFNLElBR3hDdGMsRUFGS29XLEVBQWtCakIsR0FDekIvZ0IsS0FBSzZlLElBQUl1SixFQUFhLEVBQU1wRyxFQUFrQmhTLEVBQUlnUyxFQUFrQnBkLEdBQ3hEb2QsRUFBa0J0QixJQUM1QjBELEVBQVEsSUFBUXhZLEVBQUssTUFBUzhELEdBQy9CLEdBQU8vRCxFQUFLLEdBQUsrRCxFQUFJeVUsRUFBTyxJQUFRelUsRUFBSXdVLEdBQ3ZDdFQsRUFBSXdULEVBQVFELEVBQ1o5UyxFQUFJK1MsRUFBUUYsRUFDWnJCLEdBQU0sSUFBUWpYLEVBQUssSUFBUWdGLEVBQUksSUFBUVMsR0FBSyxLQUM1Q3lSLEdBQU0sSUFBUWxYLEVBQUssSUFBUWdGLEVBQUksSUFBUVMsR0FBSyxLQUM1QzBSLEdBQU0sSUFBUW5YLEVBQUssSUFBUWdGLEVBQUksS0FBU1MsR0FBSyxLQUk3Q3VMLEVBQVMsRUFBeUIsQ0FIdkJtSSxFQUFVOEMsMkJBQTJCaEYsR0FDckNrQyxFQUFVOEMsMkJBQTJCL0UsR0FDckNpQyxFQUFVOEMsMkJBQTJCOUUsSUFDa0JnQyxFQUFVc0QsNkJBSWxGLEdBQUl6TCxFQUFPLEdBQUssR0FBS0EsRUFBTyxHQUFLLEdBQUtBLEVBQU8sR0FBSyxFQUM5QyxPQUFPLEVBRVgsTUFBTXVKLEVBQUtwQixFQUFVcUIsY0FBYyxHQUM3QkMsRUFBS3RCLEVBQVVxQixjQUFjLEdBQzdCRSxFQUFLdkIsRUFBVXFCLGNBQWMsR0FDN0JrQyxFQUFNbkMsRUFBS3ZKLEVBQU8sR0FBS3lKLEVBQUt6SixFQUFPLEdBQUswSixFQUFLMUosRUFBTyxHQUMxRCxHQUFJMEwsR0FBTyxFQUNQLE9BQU8sRUFFWCxHQUF1QixJQUFuQkgsR0FBd0Jub0IsS0FBS0QsSUFBSXVvQixFQUFNM2pCLEdBQUssS0FDNUMsT0FBSWlZLEVBQU8sR0FBSyxRQUFVQSxFQUFPLEdBQUssUUFBVUEsRUFBTyxHQUFLLE9BQ2pELEVBRUosRUFBMEJBLEdBSXJDcFksSUFBUzhqQixFQUFNM2pCLEdBQUtILEdBQUssRUFBSThqQixFQUNqQyxDQUNBLE9BQU8sQ0FDWCxDQWFBLGlCQUFPQyxDQUFXQyxFQUFZcEgsRUFBUTlDLEdBQ2xDLEdBQUk4QyxFQUFTLE1BQVU5QyxFQUFRLE1BQVVBLEVBQVEsUUFDN0MsT0FBTyxFQUF5QkEsR0FHcEMsTUFBTTRFLEdBRE5zRixFQUFhLEVBQWdDQSxJQUNiLElBQU14b0IsS0FBSzBmLEdBQ3JDL2EsRUFBSSxFQUFzQjJaLEdBQzFCbUssRUFBYzFELEVBQVVrRCxjQUFjL0UsRUFBWTlCLEVBQVF6YyxHQUNoRSxPQUFvQixJQUFoQjhqQixFQUNPQSxFQUdKLEVBRFExRCxFQUFVd0MsY0FBYzVpQixFQUFHdWUsR0FFOUMsQ0FhQSxpQkFBT3dGLENBQVdGLEVBQVlwSCxFQUFROUMsR0FDbEMsT0FBTzRDLEVBQU1ZLFFBQVFpRCxFQUFVd0QsV0FBV0MsRUFBWXBILEVBQVE5QyxHQUNsRSxFQUVKeUcsRUFBVVEsNEJBQThCLENBQ3BDLENBQ0ksb0JBQ0Esb0JBQ0Esc0JBRUosQ0FDSSxxQkFDQSxxQkFDQSxzQkFFSixDQUNJLHNCQUNBLHFCQUNBLHVCQUdSUixFQUFVc0QsNEJBQThCLENBQ3BDLENBQ0ksb0JBQ0Msb0JBQ0EsbUJBRUwsRUFDSyxpQkFDRCxtQkFDQyxtQkFFTCxDQUNJLG9CQUNDLG1CQUNELG9CQUdSdEQsRUFBVXFCLGNBQWdCLENBQUMsTUFBUSxNQUFRLE9BQzNDckIsRUFBVTZDLGdCQUFrQixDQUN4QixvQkFBc0Isb0JBQXNCLG1CQUM1QyxtQkFBcUIsbUJBQXFCLG1CQUMxQyxtQkFBcUIsa0JBQW9CLGtCQUN6QyxtQkFBcUIsa0JBQW9CLGlCQUN6QyxrQkFBb0IsbUJBQXFCLGlCQUN6QyxrQkFBb0Isa0JBQW9CLGtCQUN4QyxrQkFBb0Isa0JBQW9CLGtCQUN4QyxpQkFBbUIsaUJBQW1CLGtCQUN0QyxpQkFBbUIsbUJBQW9CLG1CQUN2QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxtQkFBb0Isa0JBQW1CLG1CQUN2QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxrQkFBbUIsbUJBQW9CLG1CQUN2QyxpQkFBa0IsbUJBQW9CLG1CQUN0QyxtQkFBb0IsbUJBQW9CLGtCQUN4QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxtQkFBb0IsbUJBQW9CLGtCQUN4QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxrQkFBbUIsaUJBQWtCLG1CQUNyQyxtQkFBb0Isa0JBQW1CLGtCQUN2QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxrQkFBbUIsbUJBQW9CLGtCQUN2QyxrQkFBbUIsa0JBQW1CLG1CQUN0QyxtQkFBb0Isa0JBQW1CLGtCQUN2QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxrQkFBbUIsa0JBQW1CLG1CQUN0QyxtQkFBb0Isa0JBQW1CLGlCQUN2QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxrQkFBbUIsbUJBQW9CLG1CQUN2QyxtQkFBb0Isa0JBQW1CLG1CQUN2QyxtQkFBb0Isa0JBQW1CLG1CQUN2QyxrQkFBbUIsa0JBQW1CLGtCQUN0QyxtQkFBb0Isa0JBQW1CLGtCQUN2QyxrQkFBbUIsbUJBQW9CLG1CQUN2QyxrQkFBbUIsbUJBQW9CLG1CQUN2QyxrQkFBbUIsbUJBQW9CLG1CQUN2QyxtQkFBb0IsbUJBQW9CLGtCQUN4QyxtQkFBb0Isa0JBQW1CLG1CQUN2QyxtQkFBb0IsaUJBQWtCLG1CQUN0QyxrQkFBbUIsbUJBQW9CLGtCQUN2QyxrQkFBbUIsbUJBQW9CLG1CQUN2QyxtQkFBb0IsbUJBQW9CLG1CQUN4QyxrQkFBbUIsbUJBQW9CLGtC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Qi9yQyxJQUFqQmdzQyxFQUNILE9BQU9BLEVBQWF4dEMsUUFHckIsSUFBSUMsRUFBU290QyxFQUF5QkUsR0FBWSxDQUdqRHZ0QyxRQUFTLENBQUMsR0FPWCxPQUhBeXRDLEVBQW9CRixHQUFVcGpDLEtBQUtsSyxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTc3RDLEdBR3BFcnRDLEVBQU9ELE9BQ2YsUUNyQkFzdEMsRUFBb0IvNUIsRUFBSSxDQUFDdlQsRUFBUzB0QyxLQUNqQyxJQUFJLElBQUk5ckMsS0FBTzhyQyxFQUNYSixFQUFvQm42QixFQUFFdTZCLEVBQVk5ckMsS0FBUzByQyxFQUFvQm42QixFQUFFblQsRUFBUzRCLElBQzVFNkIsT0FBTytQLGVBQWV4VCxFQUFTNEIsRUFBSyxDQUFFNlIsWUFBWSxFQUFNNUssSUFBSzZrQyxFQUFXOXJDLElBRTFFLEVDTkQwckMsRUFBb0JuNkIsRUFBSSxDQUFDMUQsRUFBS2srQixJQUFVbHFDLE9BQU8zQixVQUFVZ1MsZUFBZTNKLEtBQUtzRixFQUFLaytCLEdDQ2xGTCxFQUFvQnI2QixFQUFLalQsSUFDSCxvQkFBWDBULFFBQTBCQSxPQUFPQyxhQUMxQ2xRLE9BQU8rUCxlQUFleFQsRUFBUzBULE9BQU9DLFlBQWEsQ0FBRS9QLE1BQU8sV0FFN0RILE9BQU8rUCxlQUFleFQsRUFBUyxhQUFjLENBQUU0RCxPQUFPLEdBQU8sRUNGcEMwcEMsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZDMtcmVhY3Qvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L2Vtb3Rpb24tc2hlZXQuZXNtLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1V0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvU2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9NaWRkbGV3YXJlLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5lc20uanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3dlYWstbWVtb2l6ZS9kaXN0L2Vtb3Rpb24td2Vhay1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC9lbW90aW9uLXVuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3QvZW1vdGlvbi1zZXJpYWxpemUuZXNtLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmVzbS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY3NzL2NyZWF0ZS1pbnN0YW5jZS9kaXN0L2Vtb3Rpb24tY3NzLWNyZWF0ZS1pbnN0YW5jZS5lc20uanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2Nzcy9kaXN0L2Vtb3Rpb24tY3NzLmVzbS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1kaS9yZWFjdC9JY29uLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL2luZGV4LnRzIiwid2VicGFjazovL21kMy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovL21kMy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL25hdmlnYXRpb24vTmF2aWdhdGlvbkJhci50c3giLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9pbmRleC50cyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy90ZXh0L1RleHQudHN4Iiwid2VicGFjazovL21kMy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3RleHQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdGV4dC90eXBvZ3JhcGh5LnRzIiwid2VicGFjazovL21kMy1yZWFjdC8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9zcmMvbGF5b3V0cy9XaXRoTmF2aWdhdGlvbkJhci50c3giLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vc3JjL2xheW91dHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vc3JjL3V0aWxzL1RoZW1lUHJvdmlkZXIudHN4Iiwid2VicGFjazovL21kMy1yZWFjdC9leHRlcm5hbCB1bWQgXCJwcm9wLXR5cGVzXCIiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0L2V4dGVybmFsIHVtZCBcInJlYWN0XCIiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvdXRpbHMvbWF0aF91dGlscy5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy91dGlscy9jb2xvcl91dGlscy5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9oY3Qvdmlld2luZ19jb25kaXRpb25zLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL2hjdC9jYW0xNi5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9oY3QvaGN0X3NvbHZlci5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9oY3QvaGN0LmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL2JsZW5kL2JsZW5kLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL2NvbnRyYXN0L2NvbnRyYXN0LmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL2Rpc2xpa2UvZGlzbGlrZV9hbmFseXplci5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9keW5hbWljY29sb3IvZHluYW1pY19jb2xvci5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9zY2hlbWUvdmFyaWFudC5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9keW5hbWljY29sb3IvY29udHJhc3RfY3VydmUuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvZHluYW1pY2NvbG9yL3RvbmVfZGVsdGFfcGFpci5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9keW5hbWljY29sb3IvbWF0ZXJpYWxfZHluYW1pY19jb2xvcnMuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvcGFsZXR0ZXMvdG9uYWxfcGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9wYWxldHRlcy9jb3JlX3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvcXVhbnRpemUvbGFiX3BvaW50X3Byb3ZpZGVyLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3F1YW50aXplL3F1YW50aXplcl93c21lYW5zLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3F1YW50aXplL3F1YW50aXplcl9tYXAuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvcXVhbnRpemUvcXVhbnRpemVyX3d1LmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3F1YW50aXplL3F1YW50aXplcl9jZWxlYmkuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvc2NoZW1lL2R5bmFtaWNfc2NoZW1lLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3NjaGVtZS9zY2hlbWUuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvc2NoZW1lL3NjaGVtZV9hbmRyb2lkLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3RlbXBlcmF0dXJlL3RlbXBlcmF0dXJlX2NhY2hlLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3NjaGVtZS9zY2hlbWVfY29udGVudC5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9zY2hlbWUvc2NoZW1lX2V4cHJlc3NpdmUuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvc2NoZW1lL3NjaGVtZV9maWRlbGl0eS5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9zY2hlbWUvc2NoZW1lX21vbm9jaHJvbWUuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvc2NoZW1lL3NjaGVtZV9uZXV0cmFsLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3NjaGVtZS9zY2hlbWVfdG9uYWxfc3BvdC5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllcy9zY2hlbWUvc2NoZW1lX3ZpYnJhbnQuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvc2NvcmUvc2NvcmUuanMiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXMvdXRpbHMvc3RyaW5nX3V0aWxzLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3V0aWxzL2ltYWdlX3V0aWxzLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL3V0aWxzL3RoZW1lX3V0aWxzLmpzIiwid2VicGFjazovL21kMy1yZWFjdC8uL25vZGVfbW9kdWxlcy9tY3UtZXh0cmEvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tZDMtcmVhY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWQzLXJlYWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9tZDMtcmVhY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9tZDMtcmVhY3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9tZDMtcmVhY3Qvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInByb3AtdHlwZXNcIiksIHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJwcm9wLXR5cGVzXCIsIFwicmVhY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibWQzLXJlYWN0XCJdID0gZmFjdG9yeShyZXF1aXJlKFwicHJvcC10eXBlc1wiKSwgcmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJtZDMtcmVhY3RcIl0gPSBmYWN0b3J5KHJvb3RbXCJwcm9wLXR5cGVzXCJdLCByb290W1wicmVhY3RcIl0pO1xufSkodGhpcywgKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzk5X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE1Nl9fKSA9PiB7XG5yZXR1cm4gIiwiLypcblxuQmFzZWQgb2ZmIGdsYW1vcidzIFN0eWxlU2hlZXQsIHRoYW5rcyBTdW5pbCDinaTvuI9cblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCdcblxubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7IGtleTogJycsIGNvbnRhaW5lcjogZG9jdW1lbnQuaGVhZCB9KVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbi8vICRGbG93Rml4TWVcbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBvcHRpb25zLmtleSk7XG5cbiAgaWYgKG9wdGlvbnMubm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgb3B0aW9ucy5ub25jZSk7XG4gIH1cblxuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFVzaW5nIE5vZGUgaW5zdGVhZCBvZiBIVE1MRWxlbWVudCBzaW5jZSBjb250YWluZXIgbWF5IGJlIGEgU2hhZG93Um9vdFxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5faW5zZXJ0VGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKF90aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChfdGhpcy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmluc2VydGlvblBvaW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnByZXBlbmQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5iZWZvcmU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnRhZ3NbX3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0YWcsIGJlZm9yZSk7XG5cbiAgICAgIF90aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gb3B0aW9ucy5zcGVlZHkgPT09IHVuZGVmaW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgOiBvcHRpb25zLnNwZWVkeTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7IC8vIGtleSBpcyB0aGUgdmFsdWUgb2YgdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUsIGl0J3MgdXNlZCB0byBpZGVudGlmeSBkaWZmZXJlbnQgc2hlZXRzXG5cbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5wcmVwZW5kID0gb3B0aW9ucy5wcmVwZW5kO1xuICAgIHRoaXMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaHlkcmF0ZSA9IGZ1bmN0aW9uIGh5ZHJhdGUobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKHRoaXMuX2luc2VydFRhZyk7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdGhpcy5faW5zZXJ0VGFnKGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzSW1wb3J0UnVsZSA9IHJ1bGUuY2hhckNvZGVBdCgwKSA9PT0gNjQgJiYgcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDU7XG5cbiAgICAgIGlmIChpc0ltcG9ydFJ1bGUgJiYgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUpIHtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBvbmx5IGNhdXNlIHByb2JsZW0gaW4gc3BlZWR5IG1vZGVcbiAgICAgICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgZW5hYmxpbmcgc3BlZWR5IHRvIGFmZmVjdCB0aGUgb2JzZXJ2YWJsZSBiZWhhdmlvclxuICAgICAgICAvLyBzbyB3ZSByZXBvcnQgdGhpcyBlcnJvciBhdCBhbGwgdGltZXNcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGluc2VydCB0aGUgZm9sbG93aW5nIHJ1bGU6XFxuXCIgKyBydWxlICsgJ1xcblxcbmBAaW1wb3J0YCBydWxlcyBtdXN0IGJlIGJlZm9yZSBhbGwgb3RoZXIgdHlwZXMgb2YgcnVsZXMgaW4gYSBzdHlsZXNoZWV0IGJ1dCBvdGhlciBydWxlcyBoYXZlIGFscmVhZHkgYmVlbiBpbnNlcnRlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IGBAaW1wb3J0YCBydWxlcyBhcmUgYmVmb3JlIGFsbCBvdGhlciBydWxlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgfHwgIWlzSW1wb3J0UnVsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEvOigtbW96LXBsYWNlaG9sZGVyfC1tb3otZm9jdXMtaW5uZXJ8LW1vei1mb2N1c3Jpbmd8LW1zLWlucHV0LXBsYWNlaG9sZGVyfC1tb3otcmVhZC13cml0ZXwtbW96LXJlYWQtb25seXwtbXMtY2xlYXJ8LW1zLWV4cGFuZHwtbXMtcmV2ZWFsKXsvLnRlc3QocnVsZSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBpbnNlcnRpbmcgdGhlIGZvbGxvd2luZyBydWxlOiBcXFwiXCIgKyBydWxlICsgXCJcXFwiXCIsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdHIrKztcbiAgfTtcblxuICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIHRhZy5wYXJlbnROb2RlICYmIHRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgfSk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG5leHBvcnQgeyBTdHlsZVNoZWV0IH07XG4iLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCB2YXIgZnJvbSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoICh2YWx1ZSwgbGVuZ3RoKSB7XG5cdHJldHVybiBjaGFyYXQodmFsdWUsIDApIF4gNDUgPyAoKCgoKCgobGVuZ3RoIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAwKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDEpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMikpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAzKSA6IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS50cmltKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmc/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2ggKHZhbHVlLCBwYXR0ZXJuKSB7XG5cdHJldHVybiAodmFsdWUgPSBwYXR0ZXJuLmV4ZWModmFsdWUpKSA/IHZhbHVlWzBdIDogdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UgKHZhbHVlLCBwYXR0ZXJuLCByZXBsYWNlbWVudCkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4b2YgKHZhbHVlLCBzZWFyY2gpIHtcblx0cmV0dXJuIHZhbHVlLmluZGV4T2Yoc2VhcmNoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyYXQgKHZhbHVlLCBpbmRleCkge1xuXHRyZXR1cm4gdmFsdWUuY2hhckNvZGVBdChpbmRleCkgfCAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnN0ciAodmFsdWUsIGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHZhbHVlLnNsaWNlKGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJsZW4gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueVtdfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2l6ZW9mICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kICh2YWx1ZSwgYXJyYXkpIHtcblx0cmV0dXJuIGFycmF5LnB1c2godmFsdWUpLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFycmF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZSAoYXJyYXksIGNhbGxiYWNrKSB7XG5cdHJldHVybiBhcnJheS5tYXAoY2FsbGJhY2spLmpvaW4oJycpXG59XG4iLCJpbXBvcnQge2Zyb20sIHRyaW0sIGNoYXJhdCwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSByb290XG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBzdHJpbmd9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdFtdIHwgc3RyaW5nfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9kZSAodmFsdWUsIHJvb3QsIHBhcmVudCwgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0cmV0dXJuIHt2YWx1ZTogdmFsdWUsIHJvb3Q6IHJvb3QsIHBhcmVudDogcGFyZW50LCB0eXBlOiB0eXBlLCBwcm9wczogcHJvcHMsIGNoaWxkcmVuOiBjaGlsZHJlbiwgbGluZTogbGluZSwgY29sdW1uOiBjb2x1bW4sIGxlbmd0aDogbGVuZ3RoLCByZXR1cm46ICcnfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkgKHJvb3QsIHByb3BzKSB7XG5cdHJldHVybiBhc3NpZ24obm9kZSgnJywgbnVsbCwgbnVsbCwgJycsIG51bGwsIG51bGwsIDApLCByb290LCB7bGVuZ3RoOiAtcm9vdC5sZW5ndGh9LCBwcm9wcylcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyICgpIHtcblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXYgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA+IDAgPyBjaGFyYXQoY2hhcmFjdGVycywgLS1wb3NpdGlvbikgOiAwXG5cblx0aWYgKGNvbHVtbi0tLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUtLVxuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPCBsZW5ndGggPyBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24rKykgOiAwXG5cblx0aWYgKGNvbHVtbisrLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUrK1xuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZWVrICgpIHtcblx0cmV0dXJuIGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXJldCAoKSB7XG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHN1YnN0cihjaGFyYWN0ZXJzLCBiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbiAodHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHQvLyBcXDAgXFx0IFxcbiBcXHIgXFxzIHdoaXRlc3BhY2UgdG9rZW5cblx0XHRjYXNlIDA6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdHJldHVybiA1XG5cdFx0Ly8gISArICwgLyA+IEAgfiBpc29sYXRlIHRva2VuXG5cdFx0Y2FzZSAzMzogY2FzZSA0MzogY2FzZSA0NDogY2FzZSA0NzogY2FzZSA2MjogY2FzZSA2NDogY2FzZSAxMjY6XG5cdFx0Ly8gOyB7IH0gYnJlYWtwb2ludCB0b2tlblxuXHRcdGNhc2UgNTk6IGNhc2UgMTIzOiBjYXNlIDEyNTpcblx0XHRcdHJldHVybiA0XG5cdFx0Ly8gOiBhY2NvbXBhbmllZCB0b2tlblxuXHRcdGNhc2UgNTg6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdC8vIFwiICcgKCBbIG9wZW5pbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgNDA6IGNhc2UgOTE6XG5cdFx0XHRyZXR1cm4gMlxuXHRcdC8vICkgXSBjbG9zaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDQxOiBjYXNlIDkzOlxuXHRcdFx0cmV0dXJuIDFcblx0fVxuXG5cdHJldHVybiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gbGluZSA9IGNvbHVtbiA9IDEsIGxlbmd0aCA9IHN0cmxlbihjaGFyYWN0ZXJzID0gdmFsdWUpLCBwb3NpdGlvbiA9IDAsIFtdXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gY2hhcmFjdGVycyA9ICcnLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ICh0eXBlKSB7XG5cdHJldHVybiB0cmltKHNsaWNlKHBvc2l0aW9uIC0gMSwgZGVsaW1pdGVyKHR5cGUgPT09IDkxID8gdHlwZSArIDIgOiB0eXBlID09PSA0MCA/IHR5cGUgKyAxIDogdHlwZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2ModG9rZW5pemVyKGFsbG9jKHZhbHVlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UgKHR5cGUpIHtcblx0d2hpbGUgKGNoYXJhY3RlciA9IHBlZWsoKSlcblx0XHRpZiAoY2hhcmFjdGVyIDwgMzMpXG5cdFx0XHRuZXh0KClcblx0XHRlbHNlXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiB0b2tlbih0eXBlKSA+IDIgfHwgdG9rZW4oY2hhcmFjdGVyKSA+IDMgPyAnJyA6ICcgJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplciAoY2hpbGRyZW4pIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcblx0XHRcdGNhc2UgMDogYXBwZW5kKGlkZW50aWZpZXIocG9zaXRpb24gLSAxKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6IGFwcGVuZChkZWxpbWl0KGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0ZGVmYXVsdDogYXBwZW5kKGZyb20oY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0fVxuXG5cdHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGluZyAoaW5kZXgsIGNvdW50KSB7XG5cdHdoaWxlICgtLWNvdW50ICYmIG5leHQoKSlcblx0XHQvLyBub3QgMC05IEEtRiBhLWZcblx0XHRpZiAoY2hhcmFjdGVyIDwgNDggfHwgY2hhcmFjdGVyID4gMTAyIHx8IChjaGFyYWN0ZXIgPiA1NyAmJiBjaGFyYWN0ZXIgPCA2NSkgfHwgKGNoYXJhY3RlciA+IDcwICYmIGNoYXJhY3RlciA8IDk3KSlcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBjYXJldCgpICsgKGNvdW50IDwgNiAmJiBwZWVrKCkgPT0gMzIgJiYgbmV4dCgpID09IDMyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdGVyICh0eXBlKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdC8vIF0gKSBcIiAnXG5cdFx0XHRjYXNlIHR5cGU6XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvblxuXHRcdFx0Ly8gXCIgJ1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTpcblx0XHRcdFx0aWYgKHR5cGUgIT09IDM0ICYmIHR5cGUgIT09IDM5KVxuXHRcdFx0XHRcdGRlbGltaXRlcihjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAodHlwZSA9PT0gNDEpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKHR5cGUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0bmV4dCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRlciAodHlwZSwgaW5kZXgpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHQvLyAvL1xuXHRcdGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0NyArIDEwKVxuXHRcdFx0YnJlYWtcblx0XHQvLyAvKlxuXHRcdGVsc2UgaWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQyICsgNDIgJiYgcGVlaygpID09PSA0Nylcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuICcvKicgKyBzbGljZShpbmRleCwgcG9zaXRpb24gLSAxKSArICcqJyArIGZyb20odHlwZSA9PT0gNDcgPyB0eXBlIDogbmV4dCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllciAoaW5kZXgpIHtcblx0d2hpbGUgKCF0b2tlbihwZWVrKCkpKVxuXHRcdG5leHQoKVxuXG5cdHJldHVybiBzbGljZShpbmRleCwgcG9zaXRpb24pXG59XG4iLCJleHBvcnQgdmFyIE1TID0gJy1tcy0nXG5leHBvcnQgdmFyIE1PWiA9ICctbW96LSdcbmV4cG9ydCB2YXIgV0VCS0lUID0gJy13ZWJraXQtJ1xuXG5leHBvcnQgdmFyIENPTU1FTlQgPSAnY29tbSdcbmV4cG9ydCB2YXIgUlVMRVNFVCA9ICdydWxlJ1xuZXhwb3J0IHZhciBERUNMQVJBVElPTiA9ICdkZWNsJ1xuXG5leHBvcnQgdmFyIFBBR0UgPSAnQHBhZ2UnXG5leHBvcnQgdmFyIE1FRElBID0gJ0BtZWRpYSdcbmV4cG9ydCB2YXIgSU1QT1JUID0gJ0BpbXBvcnQnXG5leHBvcnQgdmFyIENIQVJTRVQgPSAnQGNoYXJzZXQnXG5leHBvcnQgdmFyIFZJRVdQT1JUID0gJ0B2aWV3cG9ydCdcbmV4cG9ydCB2YXIgU1VQUE9SVFMgPSAnQHN1cHBvcnRzJ1xuZXhwb3J0IHZhciBET0NVTUVOVCA9ICdAZG9jdW1lbnQnXG5leHBvcnQgdmFyIE5BTUVTUEFDRSA9ICdAbmFtZXNwYWNlJ1xuZXhwb3J0IHZhciBLRVlGUkFNRVMgPSAnQGtleWZyYW1lcydcbmV4cG9ydCB2YXIgRk9OVF9GQUNFID0gJ0Bmb250LWZhY2UnXG5leHBvcnQgdmFyIENPVU5URVJfU1RZTEUgPSAnQGNvdW50ZXItc3R5bGUnXG5leHBvcnQgdmFyIEZPTlRfRkVBVFVSRV9WQUxVRVMgPSAnQGZvbnQtZmVhdHVyZS12YWx1ZXMnXG5leHBvcnQgdmFyIExBWUVSID0gJ0BsYXllcidcbiIsImltcG9ydCB7SU1QT1JULCBMQVlFUiwgQ09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT04sIEtFWUZSQU1FU30gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtzdHJsZW4sIHNpemVvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0dmFyIG91dHB1dCA9ICcnXG5cdHZhciBsZW5ndGggPSBzaXplb2YoY2hpbGRyZW4pXG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRvdXRwdXQgKz0gY2FsbGJhY2soY2hpbGRyZW5baV0sIGksIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRyZXR1cm4gb3V0cHV0XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIExBWUVSOiBpZiAoZWxlbWVudC5jaGlsZHJlbi5sZW5ndGgpIGJyZWFrXG5cdFx0Y2FzZSBJTVBPUlQ6IGNhc2UgREVDTEFSQVRJT046IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQucmV0dXJuIHx8IGVsZW1lbnQudmFsdWVcblx0XHRjYXNlIENPTU1FTlQ6IHJldHVybiAnJ1xuXHRcdGNhc2UgS0VZRlJBTUVTOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSArICd9J1xuXHRcdGNhc2UgUlVMRVNFVDogZWxlbWVudC52YWx1ZSA9IGVsZW1lbnQucHJvcHMuam9pbignLCcpXG5cdH1cblxuXHRyZXR1cm4gc3RybGVuKGNoaWxkcmVuID0gc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSkgPyBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBjaGlsZHJlbiArICd9JyA6ICcnXG59XG4iLCJpbXBvcnQge01TLCBNT1osIFdFQktJVCwgUlVMRVNFVCwgS0VZRlJBTUVTLCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHttYXRjaCwgY2hhcmF0LCBzdWJzdHIsIHN0cmxlbiwgc2l6ZW9mLCByZXBsYWNlLCBjb21iaW5lfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge2NvcHksIHRva2VuaXplfSBmcm9tICcuL1Rva2VuaXplci5qcydcbmltcG9ydCB7c2VyaWFsaXplfSBmcm9tICcuL1NlcmlhbGl6ZXIuanMnXG5pbXBvcnQge3ByZWZpeH0gZnJvbSAnLi9QcmVmaXhlci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uW119IGNvbGxlY3Rpb25cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZSAoY29sbGVjdGlvbikge1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNvbGxlY3Rpb24pXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdFx0dmFyIG91dHB1dCA9ICcnXG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdFx0b3V0cHV0ICs9IGNvbGxlY3Rpb25baV0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzaGVldCAoY2FsbGJhY2spIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKCFlbGVtZW50LnJvb3QpXG5cdFx0XHRpZiAoZWxlbWVudCA9IGVsZW1lbnQucmV0dXJuKVxuXHRcdFx0XHRjYWxsYmFjayhlbGVtZW50KVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhlciAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRpZiAoZWxlbWVudC5sZW5ndGggPiAtMSlcblx0XHRpZiAoIWVsZW1lbnQucmV0dXJuKVxuXHRcdFx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBERUNMQVJBVElPTjogZWxlbWVudC5yZXR1cm4gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRjYXNlIEtFWUZSQU1FUzpcblx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHt2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVCl9KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQubGVuZ3RoKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gOnJlYWQtKG9ubHl8d3JpdGUpXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnOnJlYWQtb25seSc6IGNhc2UgJzpyZWFkLXdyaXRlJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdFx0Ly8gOnBsYWNlaG9sZGVyXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnOjpwbGFjZWhvbGRlcic6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBXRUJLSVQgKyAnaW5wdXQtJDEnKV19KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCBNUyArICdpbnB1dC0kMScpXX0pXG5cdFx0XHRcdFx0XHRcdFx0XHRdLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiAnJ1xuXHRcdFx0XHRcdFx0fSlcblx0XHRcdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICovXG5leHBvcnQgZnVuY3Rpb24gbmFtZXNwYWNlIChlbGVtZW50KSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0ZWxlbWVudC5wcm9wcyA9IGVsZW1lbnQucHJvcHMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gY29tYmluZSh0b2tlbml6ZSh2YWx1ZSksIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIDApKSB7XG5cdFx0XHRcdFx0XHQvLyBcXGZcblx0XHRcdFx0XHRcdGNhc2UgMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzdWJzdHIodmFsdWUsIDEsIHN0cmxlbih2YWx1ZSkpXG5cdFx0XHRcdFx0XHQvLyBcXDAgKCArID4gflxuXHRcdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDQwOiBjYXNlIDQzOiBjYXNlIDYyOiBjYXNlIDEyNjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHQvLyA6XG5cdFx0XHRcdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRcdFx0XHRpZiAoY2hpbGRyZW5bKytpbmRleF0gPT09ICdnbG9iYWwnKVxuXHRcdFx0XHRcdFx0XHRcdGNoaWxkcmVuW2luZGV4XSA9ICcnLCBjaGlsZHJlblsrK2luZGV4XSA9ICdcXGYnICsgc3Vic3RyKGNoaWxkcmVuW2luZGV4XSwgaW5kZXggPSAxLCAtMSlcblx0XHRcdFx0XHRcdC8vIFxcc1xuXHRcdFx0XHRcdFx0Y2FzZSAzMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChpbmRleCkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMDogZWxlbWVudCA9IHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2l6ZW9mKGNoaWxkcmVuKSA+IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBpbmRleCA9IHNpemVvZihjaGlsZHJlbikgLSAxOiBjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDIgPyB2YWx1ZSArIGVsZW1lbnQgKyBlbGVtZW50IDogdmFsdWUgKyBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0fVxufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDogaWYgKGFtcGVyc2FuZCA9PSAtMSkgY2hhcmFjdGVycyA9IHJlcGxhY2UoY2hhcmFjdGVycywgL1xcZi9nLCAnJylcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUgPT09IDk5ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCAzKSA9PT0gMTEwID8gMTAwIDogYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIGwgbSBzXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDg6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCB7IG1lbW9pemUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIENPTU1FTlQsIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8IGNhY2hlLmNvbXBhdCkgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3Nlcykge1xuICAgICAgdmFyIGlzTmVzdGVkID0gISFlbGVtZW50LnBhcmVudDsgLy8gaW4gbmVzdGVkIHJ1bGVzIGNvbW1lbnRzIGJlY29tZSBjaGlsZHJlbiBvZiB0aGUgXCJhdXRvLWluc2VydGVkXCIgcnVsZSBhbmQgdGhhdCdzIGFsd2F5cyB0aGUgYGVsZW1lbnQucGFyZW50YFxuICAgICAgLy9cbiAgICAgIC8vIGNvbnNpZGVyaW5nIHRoaXMgaW5wdXQ6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgIC5iIC8qIGNvbW0gKi8ge31cbiAgICAgIC8vICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyB9XG4gICAgICAvLyB3ZSBnZXQgb3V0cHV0IGNvcnJlc3BvbmRpbmcgdG8gdGhpczpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgJiB7XG4gICAgICAvLyAgICAgLyogY29tbSAqL1xuICAgICAgLy8gICAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIC5iIHt9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjb21tZW50Q29udGFpbmVyID0gaXNOZXN0ZWQgPyBlbGVtZW50LnBhcmVudC5jaGlsZHJlbiA6IC8vIGdsb2JhbCBydWxlIGF0IHRoZSByb290IGxldmVsXG4gICAgICBjaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IGNvbW1lbnRDb250YWluZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21tZW50Q29udGFpbmVyW2ldO1xuXG4gICAgICAgIGlmIChub2RlLmxpbmUgPCBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBpdCBpcyBxdWl0ZSB3ZWlyZCBidXQgY29tbWVudHMgYXJlICp1c3VhbGx5KiBwdXQgYXQgYGNvbHVtbjogZWxlbWVudC5jb2x1bW4gLSAxYFxuICAgICAgICAvLyBzbyB3ZSBzZWVrICpmcm9tIHRoZSBlbmQqIGZvciB0aGUgbm9kZSB0aGF0IGlzIGVhcmxpZXIgdGhhbiB0aGUgcnVsZSdzIGBlbGVtZW50YCBhbmQgY2hlY2sgdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgYWxzbyBtYXRjaCBpbnB1dHMgbGlrZSB0aGlzOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLyogY29tbSAqL1xuICAgICAgICAvLyAgIC5iIHt9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYnV0IHRoYXQgaXMgZmluZVxuICAgICAgICAvL1xuICAgICAgICAvLyBpdCB3b3VsZCBiZSB0aGUgZWFzaWVzdCB0byBjaGFuZ2UgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29tbWVudCB0byBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHJ1bGU6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAuYiB7IC8qIGNvbW0gKi8gfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHdpdGggc3VjaCBpbnB1dHMgd2Ugd291bGRuJ3QgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZSBjb21tZW50IGF0IGFsbFxuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBjaGFuZ2luZyB0aGlzIGNvbW1lbnQgcGxhY2VtZW50IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblxuXG4gICAgICAgIGlmIChub2RlLmNvbHVtbiA8IGVsZW1lbnQuY29sdW1uKSB7XG4gICAgICAgICAgaWYgKGlzSWdub3JpbmdDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIGdldFNlcnZlclN0eWxpc0NhY2hlID0gaXNCcm93c2VyID8gdW5kZWZpbmVkIDogd2Vha01lbW9pemUoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhY2hlID0ge307XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gY2FjaGVbbmFtZV07XG4gICAgfTtcbiAgfSk7XG59KTtcbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoaXNCcm93c2VyICYmIGtleSA9PT0gJ2NzcycpIHtcbiAgICB2YXIgc3NyU3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl06bm90KFtkYXRhLXNdKVwiKTsgLy8gZ2V0IFNTUmVkIHN0eWxlcyBvdXQgb2YgdGhlIHdheSBvZiBSZWFjdCdzIGh5ZHJhdGlvblxuICAgIC8vIGRvY3VtZW50LmhlYWQgaXMgYSBzYWZlIHBsYWNlIHRvIG1vdmUgdGhlbSB0byh0aG91Z2ggbm90ZSBkb2N1bWVudC5oZWFkIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBwbGFjZSB0aGV5IHdpbGwgYmUpXG4gICAgLy8gbm90ZSB0aGlzIHZlcnkgdmVyeSBpbnRlbnRpb25hbGx5IHRhcmdldHMgYWxsIHN0eWxlIGVsZW1lbnRzIHJlZ2FyZGxlc3Mgb2YgdGhlIGtleSB0byBlbnN1cmVcbiAgICAvLyB0aGF0IGNyZWF0aW5nIGEgY2FjaGUgd29ya3MgaW5zaWRlIG9mIHJlbmRlciBvZiBhIFJlYWN0IGNvbXBvbmVudFxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzc3JTdHlsZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyB3ZSB3YW50IHRvIG9ubHkgbW92ZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgc3BhY2UgaW4gdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgIC8vIGJlY2F1c2UgdGhhdCBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhbiBFbW90aW9uIDExIHNlcnZlci1zaWRlIHJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgICAvLyB3aGlsZSB3ZSB3aWxsIGFscmVhZHkgaWdub3JlIEVtb3Rpb24gMTEgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGJlY2F1c2Ugb2YgdGhlIDpub3QoW2RhdGEtc10pIHBhcnQgaW4gdGhlIHNlbGVjdG9yXG4gICAgICAvLyBFbW90aW9uIDEwIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBkaWQgbm90IGhhdmUgZGF0YS1zIChidXQgaW1wb3J0YW50bHkgZGlkIG5vdCBoYXZlIGEgc3BhY2UgaW4gdGhlaXIgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZXMpXG4gICAgICAvLyBzbyBjaGVja2luZyBmb3IgdGhlIHNwYWNlIGVuc3VyZXMgdGhhdCBsb2FkaW5nIEVtb3Rpb24gMTEgYWZ0ZXIgRW1vdGlvbiAxMCBoYXMgaW5zZXJ0ZWQgc29tZSBzdHlsZXNcbiAgICAgIC8vIHdpbGwgbm90IHJlc3VsdCBpbiB0aGUgRW1vdGlvbiAxMCBzdHlsZXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICB2YXIgZGF0YUVtb3Rpb25BdHRyaWJ1dGUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJyk7XG5cbiAgICAgIGlmIChkYXRhRW1vdGlvbkF0dHJpYnV0ZS5pbmRleE9mKCcgJykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN0eWxpc1BsdWdpbnMgPSBvcHRpb25zLnN0eWxpc1BsdWdpbnMgfHwgZGVmYXVsdFN0eWxpc1BsdWdpbnM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRlZCA9IHt9O1xuICB2YXIgY29udGFpbmVyO1xuICB2YXIgbm9kZXNUb0h5ZHJhdGUgPSBbXTtcblxuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCAvLyB0aGlzIG1lYW5zIHdlIHdpbGwgaWdub3JlIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYSBzcGFjZSBpbiB0aGVtIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhhdCB0aGUgc3R5bGUgZWxlbWVudHMgd2UncmUgbG9va2luZyBhdCBhcmUgb25seSBFbW90aW9uIDExIHNlcnZlci1yZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25ePVxcXCJcIiArIGtleSArIFwiIFxcXCJdXCIpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGF0dHJpYiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uXCIpLnNwbGl0KCcgJyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgb21uaXByZXNlbnRQbHVnaW5zLnB1c2goY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oe1xuICAgICAgZ2V0IGNvbXBhdCgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmNvbXBhdDtcbiAgICAgIH1cblxuICAgIH0pLCBpbmNvcnJlY3RJbXBvcnRBbGFybSk7XG4gIH1cblxuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgdmFyIGN1cnJlbnRTaGVldDtcbiAgICB2YXIgZmluYWxpemluZ1BsdWdpbnMgPSBbc3RyaW5naWZ5LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5yb290KSB7XG4gICAgICAgIGlmIChlbGVtZW50W1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50W1wicmV0dXJuXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnZhbHVlICYmIGVsZW1lbnQudHlwZSAhPT0gQ09NTUVOVCkge1xuICAgICAgICAgIC8vIGluc2VydCBlbXB0eSBydWxlIGluIG5vbi1wcm9kdWN0aW9uIGVudmlyb25tZW50c1xuICAgICAgICAgIC8vIHNvIEBlbW90aW9uL2plc3QgY2FuIGdyYWIgYGtleWAgZnJvbSB0aGUgKEpTKURPTSBmb3IgY2FjaGVzIHdpdGhvdXQgYW55IHJ1bGVzIGluc2VydGVkIHlldFxuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudC52YWx1ZSArIFwie31cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogcnVsZXNoZWV0KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pXTtcbiAgICB2YXIgc2VyaWFsaXplciA9IG1pZGRsZXdhcmUob21uaXByZXNlbnRQbHVnaW5zLmNvbmNhdChzdHlsaXNQbHVnaW5zLCBmaW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzdHlsZXMpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemUoY29tcGlsZShzdHlsZXMpLCBzZXJpYWxpemVyKTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICBjdXJyZW50U2hlZXQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50U2hlZXQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBzZXJpYWxpemVkLm1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzdHlsaXMoc2VsZWN0b3IgPyBzZWxlY3RvciArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIiA6IHNlcmlhbGl6ZWQuc3R5bGVzKTtcblxuICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9maW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnldO1xuXG4gICAgdmFyIF9zZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIF9maW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIF9zdHlsaXMgPSBmdW5jdGlvbiBfc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIF9zZXJpYWxpemVyKTtcbiAgICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICAgIHZhciBzZXJ2ZXJTdHlsaXNDYWNoZSA9IGdldFNlcnZlclN0eWxpc0NhY2hlKHN0eWxpc1BsdWdpbnMpKGtleSk7XG5cbiAgICB2YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyhzZWxlY3Rvciwgc2VyaWFsaXplZCkge1xuICAgICAgdmFyIG5hbWUgPSBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmIChzZXJ2ZXJTdHlsaXNDYWNoZVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlcnZlclN0eWxpc0NhY2hlW25hbWVdID0gX3N0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VydmVyU3R5bGlzQ2FjaGVbbmFtZV07XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBfaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIHZhciBuYW1lID0gc2VyaWFsaXplZC5uYW1lO1xuICAgICAgdmFyIHJ1bGVzID0gZ2V0UnVsZXMoc2VsZWN0b3IsIHNlcmlhbGl6ZWQpO1xuXG4gICAgICBpZiAoY2FjaGUuY29tcGF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gaW4gcmVndWxhciBtb2RlLCB3ZSBkb24ndCBzZXQgdGhlIHN0eWxlcyBvbiB0aGUgaW5zZXJ0ZWQgY2FjaGVcbiAgICAgICAgLy8gc2luY2Ugd2UgZG9uJ3QgbmVlZCB0byBhbmQgdGhhdCB3b3VsZCBiZSB3YXN0aW5nIG1lbW9yeVxuICAgICAgICAvLyB3ZSByZXR1cm4gdGhlbSBzbyB0aGF0IHRoZXkgYXJlIHJlbmRlcmVkIGluIGEgc3R5bGUgdGFnXG4gICAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICAgIGNhY2hlLmluc2VydGVkW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggLy8gdXNpbmcgPT09IGRldmVsb3BtZW50IGluc3RlYWQgb2YgIT09IHByb2R1Y3Rpb25cbiAgICAgICAgLy8gYmVjYXVzZSBpZiBwZW9wbGUgZG8gc3NyIGluIHRlc3RzLCB0aGUgc291cmNlIG1hcHMgc2hvd2luZyB1cCB3b3VsZCBiZSBhbm5veWluZ1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJ1bGVzICsgc2VyaWFsaXplZC5tYXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbiBjb21wYXQgbW9kZSwgd2UgcHV0IHRoZSBzdHlsZXMgb24gdGhlIGluc2VydGVkIGNhY2hlIHNvXG4gICAgICAgIC8vIHRoYXQgZW1vdGlvbi1zZXJ2ZXIgY2FuIHB1bGwgb3V0IHRoZSBzdHlsZXNcbiAgICAgICAgLy8gZXhjZXB0IHdoZW4gd2UgZG9uJ3Qgd2FudCB0byBjYWNoZSBpdCB3aGljaCB3YXMgaW4gR2xvYmFsIGJ1dCBub3dcbiAgICAgICAgLy8gaXMgbm93aGVyZSBidXQgd2UgZG9uJ3Qgd2FudCB0byBkbyBhIG1ham9yIHJpZ2h0IG5vd1xuICAgICAgICAvLyBhbmQganVzdCBpbiBjYXNlIHdlJ3JlIGdvaW5nIHRvIGxlYXZlIHRoZSBjYXNlIGhlcmVcbiAgICAgICAgLy8gaXQncyBhbHNvIG5vdCBhZmZlY3RpbmcgY2xpZW50IHNpZGUgYnVuZGxlIHNpemVcbiAgICAgICAgLy8gc28gaXQncyByZWFsbHkgbm90IGEgYmlnIGRlYWxcbiAgICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbbmFtZV0gPSBydWxlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoZWV0OiBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgICBzcGVlZHk6IG9wdGlvbnMuc3BlZWR5LFxuICAgICAgcHJlcGVuZDogb3B0aW9ucy5wcmVwZW5kLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnRcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIGNhY2hlLnNoZWV0Lmh5ZHJhdGUobm9kZXNUb0h5ZHJhdGUpO1xuICByZXR1cm4gY2FjaGU7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVDYWNoZSBhcyBkZWZhdWx0IH07XG4iLCJ2YXIgd2Vha01lbW9pemUgPSBmdW5jdGlvbiB3ZWFrTWVtb2l6ZShmdW5jKSB7XG4gIC8vICRGbG93Rml4TWUgZmxvdyBkb2Vzbid0IGluY2x1ZGUgYWxsIG5vbi1wcmltaXRpdmUgdHlwZXMgYXMgYWxsb3dlZCBmb3Igd2Vha21hcHNcbiAgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGUuaGFzKGFyZykpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoYXJnKTtcbiAgICB9XG5cbiAgICB2YXIgcmV0ID0gZnVuYyhhcmcpO1xuICAgIGNhY2hlLnNldChhcmcsIHJldCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHdlYWtNZW1vaXplIGFzIGRlZmF1bHQgfTtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyh2YXJ8YXR0cnxjb3VudGVycz98dXJsfGVsZW1lbnR8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgeyBtdXJtdXIyIGFzIGRlZmF1bHQgfTtcbiIsInZhciBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgcmVnaXN0ZXJTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSAmJiBjYWNoZS5jb21wYXQgIT09IHVuZGVmaW5lZCkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHN0eWxlc0ZvclNTUiA9ICcnO1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChzZXJpYWxpemVkID09PSBjdXJyZW50ID8gXCIuXCIgKyBjbGFzc05hbWUgOiAnJywgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBpZiAoIWlzQnJvd3NlciAmJiBtYXliZVN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlc0ZvclNTUiArPSBtYXliZVN0eWxlcztcbiAgICAgIH1cblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuXG4gICAgaWYgKCFpc0Jyb3dzZXIgJiYgc3R5bGVzRm9yU1NSLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHN0eWxlc0ZvclNTUjtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMgfTtcbiIsImltcG9ydCBjcmVhdGVDYWNoZSBmcm9tICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuXG5mdW5jdGlvbiBpbnNlcnRXaXRob3V0U2NvcGluZyhjYWNoZSwgc2VyaWFsaXplZCkge1xuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNhY2hlLmluc2VydCgnJywgc2VyaWFsaXplZCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgY3JlYXRlRW1vdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUVtb3Rpb24ob3B0aW9ucykge1xuICB2YXIgY2FjaGUgPSBjcmVhdGVDYWNoZShvcHRpb25zKTsgLy8gJEZsb3dGaXhNZVxuXG4gIGNhY2hlLnNoZWV0LnNwZWVkeSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoaXMuY3RyICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NwZWVkeSBtdXN0IGJlIGNoYW5nZWQgYmVmb3JlIGFueSBydWxlcyBhcmUgaW5zZXJ0ZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gdmFsdWU7XG4gIH07XG5cbiAgY2FjaGUuY29tcGF0ID0gdHJ1ZTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkLCB1bmRlZmluZWQpO1xuICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuICAgIHZhciBhbmltYXRpb24gPSBcImFuaW1hdGlvbi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgICBpbnNlcnRXaXRob3V0U2NvcGluZyhjYWNoZSwge1xuICAgICAgbmFtZTogc2VyaWFsaXplZC5uYW1lLFxuICAgICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBhbmltYXRpb24gKyBcIntcIiArIHNlcmlhbGl6ZWQuc3R5bGVzICsgXCJ9XCJcbiAgICB9KTtcbiAgICByZXR1cm4gYW5pbWF0aW9uO1xuICB9O1xuXG4gIHZhciBpbmplY3RHbG9iYWwgPSBmdW5jdGlvbiBpbmplY3RHbG9iYWwoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG4gICAgaW5zZXJ0V2l0aG91dFNjb3BpbmcoY2FjaGUsIHNlcmlhbGl6ZWQpO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY3NzOiBjc3MsXG4gICAgY3g6IGN4LFxuICAgIGluamVjdEdsb2JhbDogaW5qZWN0R2xvYmFsLFxuICAgIGtleWZyYW1lczoga2V5ZnJhbWVzLFxuICAgIGh5ZHJhdGU6IGZ1bmN0aW9uIGh5ZHJhdGUoaWRzKSB7XG4gICAgICBpZHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW2tleV0gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBmbHVzaDogZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICBjYWNoZS5yZWdpc3RlcmVkID0ge307XG4gICAgICBjYWNoZS5pbnNlcnRlZCA9IHt9O1xuICAgICAgY2FjaGUuc2hlZXQuZmx1c2goKTtcbiAgICB9LFxuICAgIC8vICRGbG93Rml4TWVcbiAgICBzaGVldDogY2FjaGUuc2hlZXQsXG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIGdldFJlZ2lzdGVyZWRTdHlsZXM6IGdldFJlZ2lzdGVyZWRTdHlsZXMuYmluZChudWxsLCBjYWNoZS5yZWdpc3RlcmVkKSxcbiAgICBtZXJnZTogbWVyZ2UuYmluZChudWxsLCBjYWNoZS5yZWdpc3RlcmVkLCBjc3MpXG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgY2xzID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVFbW90aW9uIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBjcmVhdGVFbW90aW9uIGZyb20gJy4uL2NyZWF0ZS1pbnN0YW5jZS9kaXN0L2Vtb3Rpb24tY3NzLWNyZWF0ZS1pbnN0YW5jZS5lc20uanMnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3V0aWxzJztcblxudmFyIF9jcmVhdGVFbW90aW9uID0gY3JlYXRlRW1vdGlvbih7XG4gIGtleTogJ2Nzcydcbn0pLFxuICAgIGZsdXNoID0gX2NyZWF0ZUVtb3Rpb24uZmx1c2gsXG4gICAgaHlkcmF0ZSA9IF9jcmVhdGVFbW90aW9uLmh5ZHJhdGUsXG4gICAgY3ggPSBfY3JlYXRlRW1vdGlvbi5jeCxcbiAgICBtZXJnZSA9IF9jcmVhdGVFbW90aW9uLm1lcmdlLFxuICAgIGdldFJlZ2lzdGVyZWRTdHlsZXMgPSBfY3JlYXRlRW1vdGlvbi5nZXRSZWdpc3RlcmVkU3R5bGVzLFxuICAgIGluamVjdEdsb2JhbCA9IF9jcmVhdGVFbW90aW9uLmluamVjdEdsb2JhbCxcbiAgICBrZXlmcmFtZXMgPSBfY3JlYXRlRW1vdGlvbi5rZXlmcmFtZXMsXG4gICAgY3NzID0gX2NyZWF0ZUVtb3Rpb24uY3NzLFxuICAgIHNoZWV0ID0gX2NyZWF0ZUVtb3Rpb24uc2hlZXQsXG4gICAgY2FjaGUgPSBfY3JlYXRlRW1vdGlvbi5jYWNoZTtcblxuZXhwb3J0IHsgY2FjaGUsIGNzcywgY3gsIGZsdXNoLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBoeWRyYXRlLCBpbmplY3RHbG9iYWwsIGtleWZyYW1lcywgbWVyZ2UsIHNoZWV0IH07XG4iLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiByKG4pe2lmKHRbbl0pcmV0dXJuIHRbbl0uZXhwb3J0czt2YXIgbz10W25dPXtpOm4sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtuXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxyKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiByLm09ZSxyLmM9dCxyLmQ9ZnVuY3Rpb24oZSx0LG4pe3IubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpufSl9LHIucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPXIoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZihyLnIobiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpci5kKG4sbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gbn0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTIpfShbZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9cmVxdWlyZShcInByb3AtdHlwZXNcIil9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoXCJyZWFjdFwiKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3Iucih0KTt2YXIgbj1yKDEpLG89cigwKSxsPWZ1bmN0aW9uKCl7cmV0dXJuKGw9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9MSxuPWFyZ3VtZW50cy5sZW5ndGg7cjxuO3IrKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbcl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxpPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e307Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJnQuaW5kZXhPZihuKTwwJiYocltuXT1lW25dKTtpZihudWxsIT1lJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbz0wO2ZvcihuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7bzxuLmxlbmd0aDtvKyspdC5pbmRleE9mKG5bb10pPDAmJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlLG5bb10pJiYocltuW29dXT1lW25bb11dKX1yZXR1cm4gcn0sYT0wLHM9bi5mb3J3YXJkUmVmKChmdW5jdGlvbihlLHQpe3ZhciByPWUudGl0bGUsbz12b2lkIDA9PT1yP251bGw6cixzPWUuZGVzY3JpcHRpb24sYz12b2lkIDA9PT1zP251bGw6cyx1PWUuc2l6ZSxwPXZvaWQgMD09PXU/bnVsbDp1LGY9ZS5jb2xvcixkPXZvaWQgMD09PWY/XCJjdXJyZW50Q29sb3JcIjpmLHk9ZS5ob3Jpem9udGFsLHY9dm9pZCAwPT09eT9udWxsOnksYj1lLnZlcnRpY2FsLG09dm9pZCAwPT09Yj9udWxsOmIsaD1lLnJvdGF0ZSxnPXZvaWQgMD09PWg/bnVsbDpoLE89ZS5zcGluLHc9dm9pZCAwPT09Tz9udWxsOk8saj1lLnN0eWxlLHo9dm9pZCAwPT09aj97fTpqLEU9ZS5jaGlsZHJlbixQPWkoZSxbXCJ0aXRsZVwiLFwiZGVzY3JpcHRpb25cIixcInNpemVcIixcImNvbG9yXCIsXCJob3Jpem9udGFsXCIsXCJ2ZXJ0aWNhbFwiLFwicm90YXRlXCIsXCJzcGluXCIsXCJzdHlsZVwiLFwiY2hpbGRyZW5cIl0pO2ErKzt2YXIgUyx4PW51bGwhPT13JiZ3LF89bi5DaGlsZHJlbi5tYXAoRSwoZnVuY3Rpb24oZSl7dmFyIHQ9ZTshMCE9PXgmJih4PSEwPT09KG51bGw9PT13P3QucHJvcHMuc3Bpbjp3KSk7dmFyIHI9dC5wcm9wcy5zaXplO1wibnVtYmVyXCI9PXR5cGVvZiBwJiZcIm51bWJlclwiPT10eXBlb2YgdC5wcm9wcy5zaXplJiYocj10LnByb3BzLnNpemUvcCk7dmFyIG89e3NpemU6cixjb2xvcjpudWxsPT09ZD90LnByb3BzLmNvbG9yOmQsaG9yaXpvbnRhbDpudWxsPT09dj90LnByb3BzLmhvcml6b250YWw6dix2ZXJ0aWNhbDpudWxsPT09bT90LnByb3BzLnZlcnRpY2FsOm0scm90YXRlOm51bGw9PT1nP3QucHJvcHMucm90YXRlOmcsc3BpbjpudWxsPT09dz90LnByb3BzLnNwaW46dyxpblN0YWNrOiEwfTtyZXR1cm4gbi5jbG9uZUVsZW1lbnQodCxvKX0pKTtudWxsIT09cCYmKHoud2lkdGg9XCJzdHJpbmdcIj09dHlwZW9mIHA/cDoxLjUqcCtcInJlbVwiKTt2YXIgayxUPVwic3RhY2tfbGFiZWxsZWRieV9cIithLHE9XCJzdGFja19kZXNjcmliZWRieV9cIithO2lmKG8pUz1jP1QrXCIgXCIrcTpUO2Vsc2UgaWYoaz1cInByZXNlbnRhdGlvblwiLGMpdGhyb3cgbmV3IEVycm9yKFwidGl0bGUgYXR0cmlidXRlIHJlcXVpcmVkIHdoZW4gZGVzY3JpcHRpb24gaXMgc2V0XCIpO3JldHVybiBuLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIixsKHtyZWY6dCx2aWV3Qm94OlwiMCAwIDI0IDI0XCIsc3R5bGU6eixyb2xlOmssXCJhcmlhLWxhYmVsbGVkYnlcIjpTfSxQKSxvJiZuLmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLHtpZDpUfSxvKSxjJiZuLmNyZWF0ZUVsZW1lbnQoXCJkZXNjXCIse2lkOnF9LGMpLHgmJm4uY3JlYXRlRWxlbWVudChcInN0eWxlXCIsbnVsbCxcIkBrZXlmcmFtZXMgc3BpbiB7IGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKSB9IHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKSB9IH1cIixcIkBrZXlmcmFtZXMgc3Bpbi1pbnZlcnNlIHsgZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpIH0gdG8geyB0cmFuc2Zvcm06IHJvdGF0ZSgtMzYwZGVnKSB9IH1cIiksXyl9KSk7cy5kaXNwbGF5TmFtZT1cIlN0YWNrXCIscy5wcm9wVHlwZXM9e3NpemU6by5vbmVPZlR5cGUoW28ubnVtYmVyLG8uc3RyaW5nXSksY29sb3I6by5zdHJpbmcsaG9yaXpvbnRhbDpvLmJvb2wsdmVydGljYWw6by5ib29sLHJvdGF0ZTpvLm51bWJlcixzcGluOm8ub25lT2ZUeXBlKFtvLmJvb2wsby5udW1iZXJdKSxjaGlsZHJlbjpvLm9uZU9mVHlwZShbby5hcnJheU9mKG8ubm9kZSksby5ub2RlXSkuaXNSZXF1aXJlZCxjbGFzc05hbWU6by5zdHJpbmcsc3R5bGU6by5vYmplY3R9LHMuZGVmYXVsdFByb3BzPXtzaXplOm51bGwsY29sb3I6bnVsbCxob3Jpem9udGFsOm51bGwsdmVydGljYWw6bnVsbCxyb3RhdGU6bnVsbCxzcGluOm51bGx9O3ZhciBjPXM7ci5kKHQsXCJJY29uXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGR9KSksci5kKHQsXCJTdGFja1wiLChmdW5jdGlvbigpe3JldHVybiBjfSkpO3ZhciB1PWZ1bmN0aW9uKCl7cmV0dXJuKHU9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9MSxuPWFyZ3VtZW50cy5sZW5ndGg7cjxuO3IrKylmb3IodmFyIG8gaW4gdD1hcmd1bWVudHNbcl0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pO3JldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxwPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e307Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJnQuaW5kZXhPZihuKTwwJiYocltuXT1lW25dKTtpZihudWxsIT1lJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbz0wO2ZvcihuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7bzxuLmxlbmd0aDtvKyspdC5pbmRleE9mKG5bb10pPDAmJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlLG5bb10pJiYocltuW29dXT1lW25bb11dKX1yZXR1cm4gcn0sZj0wLGQ9bi5mb3J3YXJkUmVmKChmdW5jdGlvbihlLHQpe3ZhciByPWUucGF0aCxvPWUuaWQsbD12b2lkIDA9PT1vPysrZjpvLGk9ZS50aXRsZSxhPXZvaWQgMD09PWk/bnVsbDppLHM9ZS5kZXNjcmlwdGlvbixjPXZvaWQgMD09PXM/bnVsbDpzLGQ9ZS5zaXplLHk9dm9pZCAwPT09ZD9udWxsOmQsdj1lLmNvbG9yLGI9dm9pZCAwPT09dj9cImN1cnJlbnRDb2xvclwiOnYsbT1lLmhvcml6b250YWwsaD12b2lkIDAhPT1tJiZtLGc9ZS52ZXJ0aWNhbCxPPXZvaWQgMCE9PWcmJmcsdz1lLnJvdGF0ZSxqPXZvaWQgMD09PXc/MDp3LHo9ZS5zcGluLEU9dm9pZCAwIT09eiYmeixQPWUuc3R5bGUsUz12b2lkIDA9PT1QP3t9OlAseD1lLmluU3RhY2ssXz12b2lkIDAhPT14JiZ4LGs9cChlLFtcInBhdGhcIixcImlkXCIsXCJ0aXRsZVwiLFwiZGVzY3JpcHRpb25cIixcInNpemVcIixcImNvbG9yXCIsXCJob3Jpem9udGFsXCIsXCJ2ZXJ0aWNhbFwiLFwicm90YXRlXCIsXCJzcGluXCIsXCJzdHlsZVwiLFwiaW5TdGFja1wiXSksVD17fSxxPVtdO251bGwhPT15JiYoXz9xLnB1c2goXCJzY2FsZShcIit5K1wiKVwiKTooUy53aWR0aD1cInN0cmluZ1wiPT10eXBlb2YgeT95OjEuNSp5K1wicmVtXCIsUy5oZWlnaHQ9Uy53aWR0aCkpLGgmJnEucHVzaChcInNjYWxlWCgtMSlcIiksTyYmcS5wdXNoKFwic2NhbGVZKC0xKVwiKSwwIT09aiYmcS5wdXNoKFwicm90YXRlKFwiK2orXCJkZWcpXCIpLG51bGwhPT1iJiYoVC5maWxsPWIpO3ZhciBNPW4uY3JlYXRlRWxlbWVudChcInBhdGhcIix1KHtkOnIsc3R5bGU6VH0sXz9rOnt9KSksQz1NO3EubGVuZ3RoPjAmJihTLnRyYW5zZm9ybT1xLmpvaW4oXCIgXCIpLFMudHJhbnNmb3JtT3JpZ2luPVwiY2VudGVyXCIsXyYmKEM9bi5jcmVhdGVFbGVtZW50KFwiZ1wiLHtzdHlsZTpTfSxNLG4uY3JlYXRlRWxlbWVudChcInJlY3RcIix7d2lkdGg6XCIyNFwiLGhlaWdodDpcIjI0XCIsZmlsbDpcInRyYW5zcGFyZW50XCJ9KSkpKTt2YXIgSSxOPUMsUj0hMD09PUV8fFwibnVtYmVyXCIhPXR5cGVvZiBFPzI6RSxCPSFfJiYoaHx8Tyk7aWYoUjwwJiYoQj0hQiksRSYmKE49bi5jcmVhdGVFbGVtZW50KFwiZ1wiLHtzdHlsZTp7YW5pbWF0aW9uOlwic3BpblwiKyhCP1wiLWludmVyc2VcIjpcIlwiKStcIiBsaW5lYXIgXCIrTWF0aC5hYnMoUikrXCJzIGluZmluaXRlXCIsdHJhbnNmb3JtT3JpZ2luOlwiY2VudGVyXCJ9fSxDLCEoaHx8T3x8MCE9PWopJiZuLmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIse3dpZHRoOlwiMjRcIixoZWlnaHQ6XCIyNFwiLGZpbGw6XCJ0cmFuc3BhcmVudFwifSkpKSxfKXJldHVybiBOO3ZhciBYLFk9XCJpY29uX2xhYmVsbGVkYnlfXCIrbCxBPVwiaWNvbl9kZXNjcmliZWRieV9cIitsO2lmKGEpST1jP1krXCIgXCIrQTpZO2Vsc2UgaWYoWD1cInByZXNlbnRhdGlvblwiLGMpdGhyb3cgbmV3IEVycm9yKFwidGl0bGUgYXR0cmlidXRlIHJlcXVpcmVkIHdoZW4gZGVzY3JpcHRpb24gaXMgc2V0XCIpO3JldHVybiBuLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIix1KHtyZWY6dCx2aWV3Qm94OlwiMCAwIDI0IDI0XCIsc3R5bGU6Uyxyb2xlOlgsXCJhcmlhLWxhYmVsbGVkYnlcIjpJfSxrKSxhJiZuLmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLHtpZDpZfSxhKSxjJiZuLmNyZWF0ZUVsZW1lbnQoXCJkZXNjXCIse2lkOkF9LGMpLCFfJiZFJiYoQj9uLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLG51bGwsXCJAa2V5ZnJhbWVzIHNwaW4taW52ZXJzZSB7IGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKSB9IHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoLTM2MGRlZykgfSB9XCIpOm4uY3JlYXRlRWxlbWVudChcInN0eWxlXCIsbnVsbCxcIkBrZXlmcmFtZXMgc3BpbiB7IGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKSB9IHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKSB9IH1cIikpLE4pfSkpO2QuZGlzcGxheU5hbWU9XCJJY29uXCIsZC5wcm9wVHlwZXM9e3BhdGg6by5zdHJpbmcuaXNSZXF1aXJlZCxzaXplOm8ub25lT2ZUeXBlKFtvLm51bWJlcixvLnN0cmluZ10pLGNvbG9yOm8uc3RyaW5nLGhvcml6b250YWw6by5ib29sLHZlcnRpY2FsOm8uYm9vbCxyb3RhdGU6by5udW1iZXIsc3BpbjpvLm9uZU9mVHlwZShbby5ib29sLG8ubnVtYmVyXSksc3R5bGU6by5vYmplY3QsaW5TdGFjazpvLmJvb2wsY2xhc3NOYW1lOm8uc3RyaW5nfSxkLmRlZmF1bHRQcm9wcz17c2l6ZTpudWxsLGNvbG9yOlwiY3VycmVudENvbG9yXCIsaG9yaXpvbnRhbDohMSx2ZXJ0aWNhbDohMSxyb3RhdGU6MCxzcGluOiExfTt0LmRlZmF1bHQ9ZH1dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUljb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1dHRvbiA9IHZvaWQgMDtcbmNvbnN0IGluZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vaW5kZXhcIik7XG5jb25zdCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzXCIpO1xuY29uc3QgY3NzXzEgPSByZXF1aXJlKFwiQGVtb3Rpb24vY3NzXCIpO1xuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQG1kaS9yZWFjdFwiKSk7XG5jb25zdCByZWFjdF8yID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBCdXR0b24gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHNjaGVtZSB9ID0gKDAsIGluZGV4XzEudXNlVGhlbWUpKCk7XG4gICAgY29uc3QgeyB0eXBlID0gXCJmaWxsZWRcIiwgaWNvbiB9ID0gcHJvcHMsIGJ1dHRvblByb3BzID0gX19yZXN0KHByb3BzLCBbXCJ0eXBlXCIsIFwiaWNvblwiXSk7XG4gICAgY29uc3QgYmFja2dyb3VuZCA9IHR5cGUgPT09IFwiZmlsbGVkXCJcbiAgICAgICAgPyAoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZVtcInByaW1hcnlcIl0pXG4gICAgICAgIDogdHlwZSA9PT0gXCJ0b25hbFwiXG4gICAgICAgICAgICA/ICgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5oZXhGcm9tQXJnYikoc2NoZW1lW1wic2Vjb25kYXJ5Q29udGFpbmVyXCJdKVxuICAgICAgICAgICAgOiBcInRyYW5zcGFyZW50XCI7XG4gICAgY29uc3Qgb25iYWNrZ3JvdW5kID0gdHlwZSA9PT0gXCJmaWxsZWRcIlxuICAgICAgICA/ICgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5oZXhGcm9tQXJnYikoc2NoZW1lW1wib25QcmltYXJ5XCJdKVxuICAgICAgICA6IHR5cGUgPT09IFwidG9uYWxcIlxuICAgICAgICAgICAgPyAoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZVtcIm9uU2Vjb25kYXJ5Q29udGFpbmVyXCJdKVxuICAgICAgICAgICAgOiAoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZVtcInByaW1hcnlcIl0pO1xuICAgIGNvbnN0IFN0YXRlTGF5ZXJTdHlsZSA9ICgwLCBjc3NfMS5jc3MpIGBcclxuXHRcdHBhZGRpbmc6IDBweCAyNHB4O1xyXG5cdFx0dHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAzMDBtcztcclxuXHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcblx0XHRnYXA6IDhweDtcclxuXHRcdCR7aWNvbiAmJiBcInBhZGRpbmctbGVmdDogMTZweDtcIn1cclxuXHRcdGNvbG9yOiAke29uYmFja2dyb3VuZH0ke3Byb3BzLmRpc2FibGVkICYmXG4gICAgICAgIE1hdGgucm91bmQoMC4zOCAqIDI1NiAqIDEpXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAucGFkU3RhcnQoMiwgXCIwXCIpfTtcclxuXHRcdFxyXG5cdFx0YnV0dG9uOm5vdCg6ZGlzYWJsZWQpOmhvdmVyICYge1xyXG5cdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAke29uYmFja2dyb3VuZCArXG4gICAgICAgIE1hdGgucm91bmQoMC4wOCAqIDI1NilcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC5wYWRTdGFydCgyLCBcIjBcIil9O1xyXG5cdFx0fVxyXG5cdFx0YnV0dG9uOm5vdCg6ZGlzYWJsZWQpOmFjdGl2ZSAmIHtcclxuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHtvbmJhY2tncm91bmQgK1xuICAgICAgICBNYXRoLnJvdW5kKDAuMTIgKiAyNTYpXG4gICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAucGFkU3RhcnQoMiwgXCIwXCIpfTtcclxuXHRcdH1cclxuXHRcdGJ1dHRvbjpub3QoOmRpc2FibGVkKTpmb2N1cy12aXNpYmxlICYge1xyXG5cdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAke29uYmFja2dyb3VuZCArXG4gICAgICAgIE1hdGgucm91bmQoMC4xMiAqIDI1NilcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC5wYWRTdGFydCgyLCBcIjBcIil9O1xyXG5cdFx0fVxyXG5cdFx0JHsoMCwgaW5kZXhfMS50ZXh0U3R5bGVzRm9yVHlwZSkoXCJsYWJlbExhcmdlXCIpfVxyXG5cdGA7XG4gICAgcmV0dXJuIChyZWFjdF8yLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBPYmplY3QuYXNzaWduKHsgY2xhc3NOYW1lOiAoMCwgY3NzXzEuY3NzKSBgXHJcblx0XHRcdFx0YWxsOiB1bnNldDtcclxuXHRcdFx0XHRjdXJzb3I6ICR7IXByb3BzLmRpc2FibGVkICYmICdwb2ludGVyJ307XHJcblx0XHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcclxuXHRcdFx0XHR3aWR0aDogZml0LWNvbnRlbnQ7XHJcblx0XHRcdFx0aGVpZ2h0OiAzNnB4O1xyXG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRcdFx0Ym9yZGVyLXJhZGl1czogOTk5cHg7XHJcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHtiYWNrZ3JvdW5kfSR7cHJvcHMuZGlzYWJsZWQgJiZcbiAgICAgICAgICAgIE1hdGgucm91bmQoMC4zOCAqIDI1NilcbiAgICAgICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgLnBhZFN0YXJ0KDIsIFwiMFwiKX07XHJcblx0XHRcdFx0JHt0eXBlID09PSBcIm91dGxpbmVcIiAmJlxuICAgICAgICAgICAgYGJvcmRlcjogJHsoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZS5vdXRsaW5lKX0ke3Byb3BzLmRpc2FibGVkID9cbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKDAuMzggKiAyNTYpXG4gICAgICAgICAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgLnBhZFN0YXJ0KDIsIFwiMFwiKVxuICAgICAgICAgICAgICAgIDogJyd9IDFweCBzb2xpZCBgfVxyXG5cdFx0XHRgIH0sIGJ1dHRvblByb3BzKSxcbiAgICAgICAgcmVhY3RfMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFN0YXRlTGF5ZXJTdHlsZSB9LFxuICAgICAgICAgICAgaWNvbiAmJiByZWFjdF8yLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF8xLmRlZmF1bHQsIHsgcGF0aDogaWNvbiwgc2l6ZTogXCIxOHB4XCIgfSksXG4gICAgICAgICAgICBwcm9wcy5jaGlsZHJlbikpKTtcbn07XG5leHBvcnRzLkJ1dHRvbiA9IEJ1dHRvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQnV0dG9uXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYnV0dG9uc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdGV4dFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmF2aWdhdGlvblwiKSwgZXhwb3J0cyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OYXZpZ2F0aW9uQmFyID0gdm9pZCAwO1xuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9pbmRleFwiKTtcbmNvbnN0IG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllc18xID0gcmVxdWlyZShcIkBtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXNcIik7XG5jb25zdCBjc3NfMSA9IHJlcXVpcmUoXCJAZW1vdGlvbi9jc3NcIik7XG5jb25zdCByZWFjdF8yID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAbWRpL3JlYWN0XCIpKTtcbmNvbnN0IE5hdmlnYXRpb25CYXJTZWdtZW50ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBzY2hlbWUgfSA9ICgwLCBpbmRleF8xLnVzZVRoZW1lKSgpO1xuICAgIGNvbnN0IG9uYmFja2dyb3VuZCA9IHByb3BzLmFjdGl2YXRlZFxuICAgICAgICA/ICgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5oZXhGcm9tQXJnYikoc2NoZW1lW1wib25QcmltYXJ5Q29udGFpbmVyXCJdKVxuICAgICAgICA6ICgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5oZXhGcm9tQXJnYikoc2NoZW1lW1wib25QcmltYXJ5Q29udGFpbmVyXCJdKTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgdGFiSW5kZXg6IDEsIGNsYXNzTmFtZTogKDAsIGNzc18xLmNzcykgYFxyXG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuXHRcdFx0XHRnYXA6IDRweDtcclxuXHRcdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdFx0XHRcdCYgZGl2LFxyXG5cdFx0XHRcdHNwYW4ge1xyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAzMDBtcyBlYXNlLWluLW91dCwgY29sb3IgMzAwbXMgZWFzZS1pbi1vdXQ7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgJjpmb2N1cy12aXNpYmxlIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiB1bnNldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG5cdFx0XHRgLCBvbkNsaWNrOiBwcm9wcy5vbkNsaWNrLCBvbktleURvd246IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIiAmJiBwcm9wcy5vbkNsaWNrKVxuICAgICAgICAgICAgICAgIHByb3BzLm9uQ2xpY2soZSk7XG4gICAgICAgIH0gfSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6ICgwLCBjc3NfMS5jc3MpIGBcclxuXHRcdFx0XHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuXHRcdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiA5OXB4O1xyXG5cdFx0XHRcdFx0d2lkdGg6ICR7cHJvcHMuaG9yaXpvbnRhbCA/IFwiNTZweFwiIDogXCI2NHB4XCJ9O1xyXG5cdFx0XHRcdFx0aGVpZ2h0OiAzMnB4O1xyXG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcy5hY3RpdmF0ZWQgJiYgKDAsIG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllc18xLmhleEZyb21BcmdiKShzY2hlbWUuc2Vjb25kYXJ5Q29udGFpbmVyKX07XHJcblx0XHRcdFx0XHRjb2xvcjogJHtwcm9wcy5hY3RpdmF0ZWRcbiAgICAgICAgICAgICAgICA/ICgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5oZXhGcm9tQXJnYikoc2NoZW1lLm9uU3VyZmFjZSlcbiAgICAgICAgICAgICAgICA6ICgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5oZXhGcm9tQXJnYikoc2NoZW1lLm9uU3VyZmFjZVZhcmlhbnQpfTtcclxuXHRcdFx0XHRcdGRpdjpob3ZlciA+ICYge1xyXG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAke29uYmFja2dyb3VuZCArXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgwLjA4ICogMjU2KVxuICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICAgIC5wYWRTdGFydCgyLCBcIjBcIil9O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZGl2OmFjdGl2ZSA+ICYge1xyXG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAke29uYmFja2dyb3VuZCArXG4gICAgICAgICAgICAgICAgTWF0aC5yb3VuZCgwLjEyICogMjU2KVxuICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICAgIC5wYWRTdGFydCgyLCBcIjBcIil9O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZGl2OmZvY3VzLXZpc2libGUgPiAmIHtcclxuXHRcdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHtvbmJhY2tncm91bmQgK1xuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoMC4xMiAqIDI1NilcbiAgICAgICAgICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgICAucGFkU3RhcnQoMiwgXCIwXCIpfTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRgIH0sIHByb3BzLmljb24gJiYgcHJvcHMuYWN0aXZhdGVkID8gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHJlYWN0XzIuZGVmYXVsdCwgeyBzaXplOiBcIjI0cHhcIiwgcGF0aDogcHJvcHMuaWNvbiB9KSkgOiBwcm9wcy5pbkFjdGl2ZUljb24gJiYgIXByb3BzLmFjdGl2YXRlZCA/IChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF8yLmRlZmF1bHQsIHsgc2l6ZTogXCIyNHB4XCIsIHBhdGg6IHByb3BzLmluQWN0aXZlSWNvbiB9KSkgOiAocHJvcHMuaWNvbiAmJiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF8yLmRlZmF1bHQsIHsgc2l6ZTogXCIyNHB4XCIsIHBhdGg6IHByb3BzLmljb24gfSkpKSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoaW5kZXhfMS5UZXh0LCB7IHN0eWxlOiB7IHRleHRBbGlnbjogXCJjZW50ZXJcIiB9LCB0eXBlOiBcImxhYmVsTWVkaXVtXCIsIGNvbG9yOiBwcm9wcy5hY3RpdmF0ZWQgPyBcIm9uU3VyZmFjZVwiIDogXCJvblN1cmZhY2VWYXJpYW50XCIgfSwgcHJvcHMubGFiZWwpKSk7XG59O1xuY29uc3QgTmF2aWdhdGlvbkJhciA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgc2NoZW1lIH0gPSAoMCwgaW5kZXhfMS51c2VUaGVtZSkoKTtcbiAgICBjb25zdCBbYWN0aXZlSW5kZXgsIHNldEFjdGl2ZUluZGV4XSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgwKTtcbiAgICBjb25zdCB7IGhvcml6b250YWwsIHNlZ21lbnRzLCBoYW5kbGVTZWxlY3RlZCB9ID0gcHJvcHMsIG5hdmlnYXRpb25iYXJQcm9wcyA9IF9fcmVzdChwcm9wcywgW1wiaG9yaXpvbnRhbFwiLCBcInNlZ21lbnRzXCIsIFwiaGFuZGxlU2VsZWN0ZWRcIl0pO1xuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJuYXZcIiwgT2JqZWN0LmFzc2lnbih7IGNsYXNzTmFtZTogKDAsIGNzc18xLmNzcykgYFxyXG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XHJcblx0XHRcdFx0ZmxleC1kaXJlY3Rpb246ICR7cHJvcHMuaG9yaXpvbnRhbCA/IFwiY29sdW1uXCIgOiBcInJvd1wifTtcclxuXHRcdFx0XHRnYXA6IDE2cHg7XHJcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZS5zdXJmYWNlQ29udGFpbmVyKX07XHJcblx0XHRcdFx0d2lkdGg6IG1heC1jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgJHshaG9yaXpvbnRhbCAmJiBcImp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1wifTtcclxuXHRcdFx0XHRwYWRkaW5nLXRvcDogMTJweDtcclxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogMTZweDtcclxuXHRcdFx0XHQkeyFob3Jpem9udGFsICYmIFwid2lkdGg6IDEwMCU7XCJ9O1xyXG5cdFx0XHRcdCR7aG9yaXpvbnRhbCAmJiBcIndpZHRoOiA4MHB4O1wifTtcclxuXHRcdFx0YCB9LCBuYXZpZ2F0aW9uYmFyUHJvcHMpLCBwcm9wcy5zZWdtZW50cy5tYXAoKHNlZ21lbnQsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQmFyU2VnbWVudCwgT2JqZWN0LmFzc2lnbih7fSwgc2VnbWVudCwgeyB0aXRsZTogYWN0aXZlSW5kZXggPT09IGkgPyBcInRha1wiIDogXCJuaWVcIiwgYWN0aXZhdGVkOiBhY3RpdmVJbmRleCA9PT0gaSwga2V5OiBpLCBob3Jpem9udGFsOiBwcm9wcy5ob3Jpem9udGFsLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmhhbmRsZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmhhbmRsZVNlbGVjdGVkKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gfSkpKTtcbiAgICB9KSkpO1xufTtcbmV4cG9ydHMuTmF2aWdhdGlvbkJhciA9IE5hdmlnYXRpb25CYXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL05hdmlnYXRpb25CYXJcIiksIGV4cG9ydHMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRleHQgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzXCIpO1xuY29uc3QgY3NzXzEgPSByZXF1aXJlKFwiQGVtb3Rpb24vY3NzXCIpO1xuY29uc3QgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9pbmRleFwiKTtcbmNvbnN0IGluZGV4XzIgPSByZXF1aXJlKFwiLi4vLi4vaW5kZXhcIik7XG5jb25zdCBUZXh0ID0gKF9hKSA9PiB7XG4gICAgdmFyIHByb3BzID0gX19yZXN0KF9hLCBbXSk7XG4gICAgY29uc3QgeyBjb2xvciwgdHlwZSwgY2hpbGRyZW4gfSA9IHByb3BzLCBzcGFuUHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcImNvbG9yXCIsIFwidHlwZVwiLCBcImNoaWxkcmVuXCJdKTtcbiAgICBjb25zdCB7IHNjaGVtZSB9ID0gKDAsIGluZGV4XzEudXNlVGhlbWUpKCk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF8xLmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBPYmplY3QuYXNzaWduKHsgY2xhc3NOYW1lOiAoMCwgY3NzXzEuY3NzKSBgXHJcblx0XHRcdFx0XHQvL2NvbG9yOiAjJHtzY2hlbWVbY29sb3IgfHwgXCJvbkJhY2tncm91bmRcIl0udG9TdHJpbmcoMTYpLnNsaWNlKDAsIC0yKX07XHJcblx0XHRcdFx0XHRjb2xvcjogJHsoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZVtjb2xvciB8fCBcIm9uQmFja2dyb3VuZFwiXSl9O1xyXG5cdFx0XHRcdFx0JHsoMCwgaW5kZXhfMi50ZXh0U3R5bGVzRm9yVHlwZSkodHlwZSB8fCBcImJvZHlNZWRpdW1cIil9XHJcblx0XHRcdFx0YCB9LCBzcGFuUHJvcHMpLCBjaGlsZHJlbikpKTtcbn07XG5leHBvcnRzLlRleHQgPSBUZXh0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9UZXh0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBvZ3JhcGh5XCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50ZXh0U3R5bGVzRm9yVHlwZSA9IGV4cG9ydHMudHlwb2dyYXBoeVNldCA9IHZvaWQgMDtcbmV4cG9ydHMudHlwb2dyYXBoeVNldCA9IHtcbiAgICBkaXNwbGF5TGFyZ2U6IHtcbiAgICAgICAgbGluZUhlaWdodDogNjQsXG4gICAgICAgIGZvbnRTaXplOiA1NyxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogLTAuMjUsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDQwMCxcbiAgICB9LFxuICAgIGRpc3BsYXlNZWRpdW06IHtcbiAgICAgICAgbGluZUhlaWdodDogNTIsXG4gICAgICAgIGZvbnRTaXplOiA0NSxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMCxcbiAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgIH0sXG4gICAgZGlzcGxheVNtYWxsOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IDQ0LFxuICAgICAgICBmb250U2l6ZTogMzYsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDQwMCxcbiAgICB9LFxuICAgIGhlYWRsaW5lTGFyZ2U6IHtcbiAgICAgICAgbGluZUhlaWdodDogNDQsXG4gICAgICAgIGZvbnRTaXplOiAzNixcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMCxcbiAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgIH0sXG4gICAgaGVhZGxpbmVNZWRpdW06IHtcbiAgICAgICAgbGluZUhlaWdodDogMzYsXG4gICAgICAgIGZvbnRTaXplOiAyOCxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMCxcbiAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgIH0sXG4gICAgaGVhZGxpbmVTbWFsbDoge1xuICAgICAgICBsaW5lSGVpZ2h0OiAzMixcbiAgICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgICBsZXR0ZXJTcGFjaW5nOiAwLFxuICAgICAgICBmb250V2VpZ2h0OiA0MDAsXG4gICAgfSxcbiAgICB0aXRsZUxhcmdlOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IDI4LFxuICAgICAgICBmb250U2l6ZTogMjIsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDQwMCxcbiAgICB9LFxuICAgIHRpdGxlTWVkaXVtOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IDI0LFxuICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAuMTUsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICB9LFxuICAgIHRpdGxlU21hbGw6IHtcbiAgICAgICAgbGluZUhlaWdodDogMjAsXG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMC4xLFxuICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgfSxcbiAgICBsYWJlbExhcmdlOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IDIwLFxuICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAuMSxcbiAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgIH0sXG4gICAgbGFiZWxNZWRpdW06IHtcbiAgICAgICAgbGluZUhlaWdodDogMTYsXG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMC41LFxuICAgICAgICBmb250V2VpZ2h0OiA1MDAsXG4gICAgfSxcbiAgICBsYWJlbFNtYWxsOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IDE2LFxuICAgICAgICBmb250U2l6ZTogMTEsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAuNSxcbiAgICAgICAgZm9udFdlaWdodDogNTAwLFxuICAgIH0sXG4gICAgYm9keUxhcmdlOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IDI0LFxuICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAuNSxcbiAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgIH0sXG4gICAgYm9keU1lZGl1bToge1xuICAgICAgICBsaW5lSGVpZ2h0OiAyMCxcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICBsZXR0ZXJTcGFjaW5nOiAwLjI1LFxuICAgICAgICBmb250V2VpZ2h0OiA0MDAsXG4gICAgfSxcbiAgICBib2R5U21hbGw6IHtcbiAgICAgICAgbGluZUhlaWdodDogMTYsXG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMC40LFxuICAgICAgICBmb250V2VpZ2h0OiA0MDAsXG4gICAgfSxcbn07XG5mdW5jdGlvbiB0ZXh0U3R5bGVzRm9yVHlwZSh0eXBlKSB7XG4gICAgY29uc3QgdGhpc1RleHRUeXBvZ3JhcGh5ID0gZXhwb3J0cy50eXBvZ3JhcGh5U2V0W3R5cGVdO1xuICAgIHJldHVybiBgXHJcbiAgbGluZS1oZWlnaHQ6ICR7dGhpc1RleHRUeXBvZ3JhcGh5LmxpbmVIZWlnaHR9cHg7XHJcbiAgZm9udC1zaXplOiAke3RoaXNUZXh0VHlwb2dyYXBoeS5mb250U2l6ZX1weDtcclxuICBsZXR0ZXItc3BhY2luZzogJHt0aGlzVGV4dFR5cG9ncmFwaHkubGV0dGVyU3BhY2luZ31weDtcclxuICBmb250LXdlaWdodDogJHt0aGlzVGV4dFR5cG9ncmFwaHkuZm9udFdlaWdodH07YDtcbn1cbmV4cG9ydHMudGV4dFN0eWxlc0ZvclR5cGUgPSB0ZXh0U3R5bGVzRm9yVHlwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29tcG9uZW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbGF5b3V0c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHMvVGhlbWVQcm92aWRlclwiKSwgZXhwb3J0cyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MYXlvdXRXaXRoTmF2aWdhdGlvbkJhciA9IHZvaWQgMDtcbmNvbnN0IGNzc18xID0gcmVxdWlyZShcIkBlbW90aW9uL2Nzc1wiKTtcbmNvbnN0IG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllc18xID0gcmVxdWlyZShcIkBtYXRlcmlhbC9tYXRlcmlhbC1jb2xvci11dGlsaXRpZXNcIik7XG5jb25zdCBpbmRleF8xID0gcmVxdWlyZShcIi4uL2luZGV4XCIpO1xuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gTGF5b3V0V2l0aE5hdmlnYXRpb25CYXIocHJvcHMpIHtcbiAgICBjb25zdCB7IHVwZGF0ZVNvdXJjZUNvbG9yLCBzY2hlbWUsIHRvZ2dsZVRoZW1lIH0gPSAoMCwgaW5kZXhfMS51c2VUaGVtZSkoKTtcbiAgICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgwKTtcbiAgICBjb25zdCBbaXNDb21wYWN0LCBzZXRJc0NvbXBhY3RdID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKHRydWUpO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gKGUpID0+IHNldElzQ29tcGFjdChlLm1hdGNoZXMpO1xuICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDYwMHB4KVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzLmNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBbcHJvcHMuY2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiAoMCwgY3NzXzEuY3NzKSBgXHJcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZS5iYWNrZ3JvdW5kKX07XHJcblx0XHRcdFx0ZmxleDogMTtcclxuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xyXG5cdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiAke2lzQ29tcGFjdCA/IFwiY29sdW1uLXJldmVyc2VcIiA6IFwicm93XCJ9O1xyXG5cdFx0XHRcdHdpZHRoOiAxMDAlO1xyXG5cdFx0XHRcdGhlaWdodDogMTAwJTtcclxuXHRcdFx0XHRjb2xvcjogJHsoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuaGV4RnJvbUFyZ2IpKHNjaGVtZS5vbkJhY2tncm91bmQpfTtcclxuXHRcdFx0YCB9LFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChpbmRleF8xLk5hdmlnYXRpb25CYXIsIHsgaGFuZGxlU2VsZWN0ZWQ6IChpKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWQoaSk7XG4gICAgICAgICAgICB9LCBob3Jpem9udGFsOiBpc0NvbXBhY3QgPyBmYWxzZSA6IHRydWUsIHNlZ21lbnRzOiBwcm9wcy5zZWdtZW50cyB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJtYWluXCIsIHsgY2xhc3NOYW1lOiAoMCwgY3NzXzEuY3NzKSBgXHJcblx0XHRcdFx0XHRmbGV4OiAxO1xyXG5cdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcclxuXHRcdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7KDAsIG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllc18xLmhleEZyb21BcmdiKShzY2hlbWUuYmFja2dyb3VuZCl9O1xyXG5cdFx0XHRcdFx0b3ZlcmZsb3c6IGF1dG87XHJcblx0XHRcdFx0YCB9LCBjaGlsZHJlbltzZWxlY3RlZF0pKSk7XG59XG5leHBvcnRzLkxheW91dFdpdGhOYXZpZ2F0aW9uQmFyID0gTGF5b3V0V2l0aE5hdmlnYXRpb25CYXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1dpdGhOYXZpZ2F0aW9uQmFyXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZVRoZW1lID0gZXhwb3J0cy5UaGVtZVByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiQG1hdGVyaWFsL21hdGVyaWFsLWNvbG9yLXV0aWxpdGllc1wiKTtcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IG1jdV9leHRyYV8xID0gcmVxdWlyZShcIm1jdS1leHRyYVwiKTtcbmNvbnN0IGRlZmF1bHRWYWx1ZXMgPSB7XG4gICAgdGhlbWU6IFwibGlnaHRcIixcbiAgICBzb3VyY2VDb2xvcjogXCIjNDQwMGVlXCIsXG4gICAgc2NoZW1lOiAoMCwgbWN1X2V4dHJhXzEudGhlbWVGcm9tU291cmNlQ29sb3IpKCgwLCBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMS5hcmdiRnJvbUhleCkoXCIjNDQwMGVlXCIpKS5zY2hlbWVzW1wibGlnaHRcIl0sXG4gICAgdG9nZ2xlVGhlbWU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICB1cGRhdGVTb3VyY2VDb2xvcjogZnVuY3Rpb24gKG5ld0NvbG9yKSB7IH0sXG59O1xuY29uc3QgVGhlbWVDb250ZXh0ID0gKDAsIHJlYWN0XzEuY3JlYXRlQ29udGV4dCkoZGVmYXVsdFZhbHVlcyk7XG5mdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHsgY2hpbGRyZW4gfSkge1xuICAgIGNvbnN0IFt0aGVtZSwgc2V0VGhlbWVdID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKFwibGlnaHRcIik7XG4gICAgY29uc3QgW3NvdXJjZUNvbG9yLCBzZXRTb3VyY2VDb2xvcl0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoXCIjNDQwMGVlXCIpO1xuICAgIGNvbnN0IFtzY2hlbWUsIHNldHNjaGVtZV0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoKDAsIG1jdV9leHRyYV8xLnRoZW1lRnJvbVNvdXJjZUNvbG9yKSgoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuYXJnYkZyb21IZXgpKFwiIzQ0MDBlZVwiKSwgW10pLnNjaGVtZXNbXCJsaWdodFwiXSk7IC8vIFN0b3JlIHRoZSBnZW5lcmF0ZWQgdGhlbWUgY29sb3JzIGhlcmVcbiAgICBjb25zdCB0b2dnbGVUaGVtZSA9ICh1dGhlbWUpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGhlbWUgPSB1dGhlbWUgIT09IHVuZGVmaW5lZCA/IHV0aGVtZSA6IHRoZW1lID09PSBcImxpZ2h0XCIgPyBcImRhcmtcIiA6IFwibGlnaHRcIjtcbiAgICAgICAgc2V0VGhlbWUobmV3VGhlbWUpO1xuICAgICAgICBzZXRzY2hlbWUoKDAsIG1jdV9leHRyYV8xLnRoZW1lRnJvbVNvdXJjZUNvbG9yKSgoMCwgbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzXzEuYXJnYkZyb21IZXgpKHNvdXJjZUNvbG9yKSwgW10pLnNjaGVtZXNbbmV3VGhlbWVdKTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZVNvdXJjZUNvbG9yID0gKG5ld0NvbG9yKSA9PiB7XG4gICAgICAgIHNldFNvdXJjZUNvbG9yKG5ld0NvbG9yKTtcbiAgICAgICAgc2V0c2NoZW1lKCgwLCBtY3VfZXh0cmFfMS50aGVtZUZyb21Tb3VyY2VDb2xvcikoKDAsIG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllc18xLmFyZ2JGcm9tSGV4KShuZXdDb2xvciksIFtdKS5zY2hlbWVzW3RoZW1lXSk7XG4gICAgfTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogeyB0aGVtZSwgdG9nZ2xlVGhlbWUsIHNvdXJjZUNvbG9yLCB1cGRhdGVTb3VyY2VDb2xvciwgc2NoZW1lIH0gfSwgY2hpbGRyZW4pKTtcbn1cbmV4cG9ydHMuVGhlbWVQcm92aWRlciA9IFRoZW1lUHJvdmlkZXI7XG5mdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gKDAsIHJlYWN0XzEudXNlQ29udGV4dCkoVGhlbWVDb250ZXh0KTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXNlVGhlbWUgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFRoZW1lUHJvdmlkZXJcIik7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xufVxuZXhwb3J0cy51c2VUaGVtZSA9IHVzZVRoZW1lO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX185OV9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTU2X187IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC4gRG8gbm90IG1vZGlmeSBpdC5cbi8qKlxuICogVXRpbGl0eSBtZXRob2RzIGZvciBtYXRoZW1hdGljYWwgb3BlcmF0aW9ucy5cbiAqL1xuLyoqXG4gKiBUaGUgc2lnbnVtIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm4gMSBpZiBudW0gPiAwLCAtMSBpZiBudW0gPCAwLCBhbmQgMCBpZiBudW0gPSAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWdudW0obnVtKSB7XG4gICAgaWYgKG51bSA8IDApIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChudW0gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHN0YXJ0IGlmIGFtb3VudCA9IDAgYW5kIHN0b3AgaWYgYW1vdW50ID0gMVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChzdGFydCwgc3RvcCwgYW1vdW50KSB7XG4gICAgcmV0dXJuICgxLjAgLSBhbW91bnQpICogc3RhcnQgKyBhbW91bnQgKiBzdG9wO1xufVxuLyoqXG4gKiBDbGFtcHMgYW4gaW50ZWdlciBiZXR3ZWVuIHR3byBpbnRlZ2Vycy5cbiAqXG4gKiBAcmV0dXJuIGlucHV0IHdoZW4gbWluIDw9IGlucHV0IDw9IG1heCwgYW5kIGVpdGhlciBtaW4gb3IgbWF4XG4gKiBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcEludChtaW4sIG1heCwgaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgPCBtaW4pIHtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaW5wdXQgPiBtYXgpIHtcbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufVxuLyoqXG4gKiBDbGFtcHMgYW4gaW50ZWdlciBiZXR3ZWVuIHR3byBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICpcbiAqIEByZXR1cm4gaW5wdXQgd2hlbiBtaW4gPD0gaW5wdXQgPD0gbWF4LCBhbmQgZWl0aGVyIG1pbiBvciBtYXhcbiAqIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wRG91YmxlKG1pbiwgbWF4LCBpbnB1dCkge1xuICAgIGlmIChpbnB1dCA8IG1pbikge1xuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dCA+IG1heCkge1xuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQ7XG59XG4vKipcbiAqIFNhbml0aXplcyBhIGRlZ3JlZSBtZWFzdXJlIGFzIGFuIGludGVnZXIuXG4gKlxuICogQHJldHVybiBhIGRlZ3JlZSBtZWFzdXJlIGJldHdlZW4gMCAoaW5jbHVzaXZlKSBhbmQgMzYwXG4gKiAoZXhjbHVzaXZlKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplRGVncmVlc0ludChkZWdyZWVzKSB7XG4gICAgZGVncmVlcyA9IGRlZ3JlZXMgJSAzNjA7XG4gICAgaWYgKGRlZ3JlZXMgPCAwKSB7XG4gICAgICAgIGRlZ3JlZXMgPSBkZWdyZWVzICsgMzYwO1xuICAgIH1cbiAgICByZXR1cm4gZGVncmVlcztcbn1cbi8qKlxuICogU2FuaXRpemVzIGEgZGVncmVlIG1lYXN1cmUgYXMgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gKlxuICogQHJldHVybiBhIGRlZ3JlZSBtZWFzdXJlIGJldHdlZW4gMC4wIChpbmNsdXNpdmUpIGFuZCAzNjAuMFxuICogKGV4Y2x1c2l2ZSkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZURlZ3JlZXNEb3VibGUoZGVncmVlcykge1xuICAgIGRlZ3JlZXMgPSBkZWdyZWVzICUgMzYwLjA7XG4gICAgaWYgKGRlZ3JlZXMgPCAwKSB7XG4gICAgICAgIGRlZ3JlZXMgPSBkZWdyZWVzICsgMzYwLjA7XG4gICAgfVxuICAgIHJldHVybiBkZWdyZWVzO1xufVxuLyoqXG4gKiBTaWduIG9mIGRpcmVjdGlvbiBjaGFuZ2UgbmVlZGVkIHRvIHRyYXZlbCBmcm9tIG9uZSBhbmdsZSB0b1xuICogYW5vdGhlci5cbiAqXG4gKiBGb3IgYW5nbGVzIHRoYXQgYXJlIDE4MCBkZWdyZWVzIGFwYXJ0IGZyb20gZWFjaCBvdGhlciwgYm90aFxuICogZGlyZWN0aW9ucyBoYXZlIHRoZSBzYW1lIHRyYXZlbCBkaXN0YW5jZSwgc28gZWl0aGVyIGRpcmVjdGlvbiBpc1xuICogc2hvcnRlc3QuIFRoZSB2YWx1ZSAxLjAgaXMgcmV0dXJuZWQgaW4gdGhpcyBjYXNlLlxuICpcbiAqIEBwYXJhbSBmcm9tIFRoZSBhbmdsZSB0cmF2ZWwgc3RhcnRzIGZyb20sIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0gdG8gVGhlIGFuZ2xlIHRyYXZlbCBlbmRzIGF0LCBpbiBkZWdyZWVzLlxuICogQHJldHVybiAtMSBpZiBkZWNyZWFzaW5nIGZyb20gbGVhZHMgdG8gdGhlIHNob3J0ZXN0IHRyYXZlbFxuICogZGlzdGFuY2UsIDEgaWYgaW5jcmVhc2luZyBmcm9tIGxlYWRzIHRvIHRoZSBzaG9ydGVzdCB0cmF2ZWxcbiAqIGRpc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRpb25EaXJlY3Rpb24oZnJvbSwgdG8pIHtcbiAgICBjb25zdCBpbmNyZWFzaW5nRGlmZmVyZW5jZSA9IHNhbml0aXplRGVncmVlc0RvdWJsZSh0byAtIGZyb20pO1xuICAgIHJldHVybiBpbmNyZWFzaW5nRGlmZmVyZW5jZSA8PSAxODAuMCA/IDEuMCA6IC0xLjA7XG59XG4vKipcbiAqIERpc3RhbmNlIG9mIHR3byBwb2ludHMgb24gYSBjaXJjbGUsIHJlcHJlc2VudGVkIHVzaW5nIGRlZ3JlZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbmNlRGVncmVlcyhhLCBiKSB7XG4gICAgcmV0dXJuIDE4MC4wIC0gTWF0aC5hYnMoTWF0aC5hYnMoYSAtIGIpIC0gMTgwLjApO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIGEgMXgzIHJvdyB2ZWN0b3Igd2l0aCBhIDN4MyBtYXRyaXguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRyaXhNdWx0aXBseShyb3csIG1hdHJpeCkge1xuICAgIGNvbnN0IGEgPSByb3dbMF0gKiBtYXRyaXhbMF1bMF0gKyByb3dbMV0gKiBtYXRyaXhbMF1bMV0gKyByb3dbMl0gKiBtYXRyaXhbMF1bMl07XG4gICAgY29uc3QgYiA9IHJvd1swXSAqIG1hdHJpeFsxXVswXSArIHJvd1sxXSAqIG1hdHJpeFsxXVsxXSArIHJvd1syXSAqIG1hdHJpeFsxXVsyXTtcbiAgICBjb25zdCBjID0gcm93WzBdICogbWF0cml4WzJdWzBdICsgcm93WzFdICogbWF0cml4WzJdWzFdICsgcm93WzJdICogbWF0cml4WzJdWzJdO1xuICAgIHJldHVybiBbYSwgYiwgY107XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRoX3V0aWxzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuIERvIG5vdCBtb2RpZnkgaXQuXG5pbXBvcnQgKiBhcyBtYXRoVXRpbHMgZnJvbSAnLi9tYXRoX3V0aWxzLmpzJztcbi8qKlxuICogQ29sb3Igc2NpZW5jZSB1dGlsaXRpZXMuXG4gKlxuICogVXRpbGl0eSBtZXRob2RzIGZvciBjb2xvciBzY2llbmNlIGNvbnN0YW50cyBhbmQgY29sb3Igc3BhY2VcbiAqIGNvbnZlcnNpb25zIHRoYXQgYXJlbid0IEhDVCBvciBDQU0xNi5cbiAqL1xuY29uc3QgU1JHQl9UT19YWVogPSBbXG4gICAgWzAuNDEyMzM4OTUsIDAuMzU3NjIwNjQsIDAuMTgwNTEwNDJdLFxuICAgIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSxcbiAgICBbMC4wMTkzMjE0MSwgMC4xMTkxNjM4MiwgMC45NTAzNDQ3OF0sXG5dO1xuY29uc3QgWFlaX1RPX1NSR0IgPSBbXG4gICAgW1xuICAgICAgICAzLjI0MTM3NzQ3OTIzODg2ODUsXG4gICAgICAgIC0xLjUzNzY2NTI0MDI4NTE4NTEsXG4gICAgICAgIC0wLjQ5ODg1MzY2ODQ2MjY4MDUzLFxuICAgIF0sXG4gICAgW1xuICAgICAgICAtMC45NjkxNDUyNTEzMDA1MzIxLFxuICAgICAgICAxLjg3NTg4NTM0NTEwNjc4NzIsXG4gICAgICAgIDAuMDQxNTY1ODU2MTY5MTIwNjEsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDAuMDU1NjIwOTM2ODk2OTEzMDUsXG4gICAgICAgIC0wLjIwMzk1NTI0NTY0NzQyMTIzLFxuICAgICAgICAxLjA1NzE3OTkxMTEyMjAzMzUsXG4gICAgXSxcbl07XG5jb25zdCBXSElURV9QT0lOVF9ENjUgPSBbOTUuMDQ3LCAxMDAuMCwgMTA4Ljg4M107XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBSR0IgY29tcG9uZW50cyB0byBBUkdCIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFyZ2JGcm9tUmdiKHJlZCwgZ3JlZW4sIGJsdWUpIHtcbiAgICByZXR1cm4gKDI1NSA8PCAyNCB8IChyZWQgJiAyNTUpIDw8IDE2IHwgKGdyZWVuICYgMjU1KSA8PCA4IHwgYmx1ZSAmIDI1NSkgPj4+XG4gICAgICAgIDA7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBsaW5lYXIgUkdCIGNvbXBvbmVudHMgdG8gQVJHQiBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcmdiRnJvbUxpbnJnYihsaW5yZ2IpIHtcbiAgICBjb25zdCByID0gZGVsaW5lYXJpemVkKGxpbnJnYlswXSk7XG4gICAgY29uc3QgZyA9IGRlbGluZWFyaXplZChsaW5yZ2JbMV0pO1xuICAgIGNvbnN0IGIgPSBkZWxpbmVhcml6ZWQobGlucmdiWzJdKTtcbiAgICByZXR1cm4gYXJnYkZyb21SZ2IociwgZywgYik7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFscGhhIGNvbXBvbmVudCBvZiBhIGNvbG9yIGluIEFSR0IgZm9ybWF0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxwaGFGcm9tQXJnYihhcmdiKSB7XG4gICAgcmV0dXJuIGFyZ2IgPj4gMjQgJiAyNTU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHJlZCBjb21wb25lbnQgb2YgYSBjb2xvciBpbiBBUkdCIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZEZyb21BcmdiKGFyZ2IpIHtcbiAgICByZXR1cm4gYXJnYiA+PiAxNiAmIDI1NTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZ3JlZW4gY29tcG9uZW50IG9mIGEgY29sb3IgaW4gQVJHQiBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBncmVlbkZyb21BcmdiKGFyZ2IpIHtcbiAgICByZXR1cm4gYXJnYiA+PiA4ICYgMjU1O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBibHVlIGNvbXBvbmVudCBvZiBhIGNvbG9yIGluIEFSR0IgZm9ybWF0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmx1ZUZyb21BcmdiKGFyZ2IpIHtcbiAgICByZXR1cm4gYXJnYiAmIDI1NTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIGEgY29sb3IgaW4gQVJHQiBmb3JtYXQgaXMgb3BhcXVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcGFxdWUoYXJnYikge1xuICAgIHJldHVybiBhbHBoYUZyb21BcmdiKGFyZ2IpID49IDI1NTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIEFSR0IgdG8gWFlaLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJnYkZyb21YeXooeCwgeSwgeikge1xuICAgIGNvbnN0IG1hdHJpeCA9IFhZWl9UT19TUkdCO1xuICAgIGNvbnN0IGxpbmVhclIgPSBtYXRyaXhbMF1bMF0gKiB4ICsgbWF0cml4WzBdWzFdICogeSArIG1hdHJpeFswXVsyXSAqIHo7XG4gICAgY29uc3QgbGluZWFyRyA9IG1hdHJpeFsxXVswXSAqIHggKyBtYXRyaXhbMV1bMV0gKiB5ICsgbWF0cml4WzFdWzJdICogejtcbiAgICBjb25zdCBsaW5lYXJCID0gbWF0cml4WzJdWzBdICogeCArIG1hdHJpeFsyXVsxXSAqIHkgKyBtYXRyaXhbMl1bMl0gKiB6O1xuICAgIGNvbnN0IHIgPSBkZWxpbmVhcml6ZWQobGluZWFyUik7XG4gICAgY29uc3QgZyA9IGRlbGluZWFyaXplZChsaW5lYXJHKTtcbiAgICBjb25zdCBiID0gZGVsaW5lYXJpemVkKGxpbmVhckIpO1xuICAgIHJldHVybiBhcmdiRnJvbVJnYihyLCBnLCBiKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIFhZWiB0byBBUkdCLlxuICovXG5leHBvcnQgZnVuY3Rpb24geHl6RnJvbUFyZ2IoYXJnYikge1xuICAgIGNvbnN0IHIgPSBsaW5lYXJpemVkKHJlZEZyb21BcmdiKGFyZ2IpKTtcbiAgICBjb25zdCBnID0gbGluZWFyaXplZChncmVlbkZyb21BcmdiKGFyZ2IpKTtcbiAgICBjb25zdCBiID0gbGluZWFyaXplZChibHVlRnJvbUFyZ2IoYXJnYikpO1xuICAgIHJldHVybiBtYXRoVXRpbHMubWF0cml4TXVsdGlwbHkoW3IsIGcsIGJdLCBTUkdCX1RPX1hZWik7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgcmVwcmVzZW50ZWQgaW4gTGFiIGNvbG9yIHNwYWNlIGludG8gYW4gQVJHQlxuICogaW50ZWdlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFyZ2JGcm9tTGFiKGwsIGEsIGIpIHtcbiAgICBjb25zdCB3aGl0ZVBvaW50ID0gV0hJVEVfUE9JTlRfRDY1O1xuICAgIGNvbnN0IGZ5ID0gKGwgKyAxNi4wKSAvIDExNi4wO1xuICAgIGNvbnN0IGZ4ID0gYSAvIDUwMC4wICsgZnk7XG4gICAgY29uc3QgZnogPSBmeSAtIGIgLyAyMDAuMDtcbiAgICBjb25zdCB4Tm9ybWFsaXplZCA9IGxhYkludmYoZngpO1xuICAgIGNvbnN0IHlOb3JtYWxpemVkID0gbGFiSW52ZihmeSk7XG4gICAgY29uc3Qgek5vcm1hbGl6ZWQgPSBsYWJJbnZmKGZ6KTtcbiAgICBjb25zdCB4ID0geE5vcm1hbGl6ZWQgKiB3aGl0ZVBvaW50WzBdO1xuICAgIGNvbnN0IHkgPSB5Tm9ybWFsaXplZCAqIHdoaXRlUG9pbnRbMV07XG4gICAgY29uc3QgeiA9IHpOb3JtYWxpemVkICogd2hpdGVQb2ludFsyXTtcbiAgICByZXR1cm4gYXJnYkZyb21YeXooeCwgeSwgeik7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBBUkdCIHJlcHJlc2VudGF0aW9uIHRvIEwqYSpiKlxuICogcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIGFyZ2IgdGhlIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xvclxuICogQHJldHVybiBhIExhYiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjb2xvclxuICovXG5leHBvcnQgZnVuY3Rpb24gbGFiRnJvbUFyZ2IoYXJnYikge1xuICAgIGNvbnN0IGxpbmVhclIgPSBsaW5lYXJpemVkKHJlZEZyb21BcmdiKGFyZ2IpKTtcbiAgICBjb25zdCBsaW5lYXJHID0gbGluZWFyaXplZChncmVlbkZyb21BcmdiKGFyZ2IpKTtcbiAgICBjb25zdCBsaW5lYXJCID0gbGluZWFyaXplZChibHVlRnJvbUFyZ2IoYXJnYikpO1xuICAgIGNvbnN0IG1hdHJpeCA9IFNSR0JfVE9fWFlaO1xuICAgIGNvbnN0IHggPSBtYXRyaXhbMF1bMF0gKiBsaW5lYXJSICsgbWF0cml4WzBdWzFdICogbGluZWFyRyArIG1hdHJpeFswXVsyXSAqIGxpbmVhckI7XG4gICAgY29uc3QgeSA9IG1hdHJpeFsxXVswXSAqIGxpbmVhclIgKyBtYXRyaXhbMV1bMV0gKiBsaW5lYXJHICsgbWF0cml4WzFdWzJdICogbGluZWFyQjtcbiAgICBjb25zdCB6ID0gbWF0cml4WzJdWzBdICogbGluZWFyUiArIG1hdHJpeFsyXVsxXSAqIGxpbmVhckcgKyBtYXRyaXhbMl1bMl0gKiBsaW5lYXJCO1xuICAgIGNvbnN0IHdoaXRlUG9pbnQgPSBXSElURV9QT0lOVF9ENjU7XG4gICAgY29uc3QgeE5vcm1hbGl6ZWQgPSB4IC8gd2hpdGVQb2ludFswXTtcbiAgICBjb25zdCB5Tm9ybWFsaXplZCA9IHkgLyB3aGl0ZVBvaW50WzFdO1xuICAgIGNvbnN0IHpOb3JtYWxpemVkID0geiAvIHdoaXRlUG9pbnRbMl07XG4gICAgY29uc3QgZnggPSBsYWJGKHhOb3JtYWxpemVkKTtcbiAgICBjb25zdCBmeSA9IGxhYkYoeU5vcm1hbGl6ZWQpO1xuICAgIGNvbnN0IGZ6ID0gbGFiRih6Tm9ybWFsaXplZCk7XG4gICAgY29uc3QgbCA9IDExNi4wICogZnkgLSAxNjtcbiAgICBjb25zdCBhID0gNTAwLjAgKiAoZnggLSBmeSk7XG4gICAgY29uc3QgYiA9IDIwMC4wICogKGZ5IC0gZnopO1xuICAgIHJldHVybiBbbCwgYSwgYl07XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEwqIHZhbHVlIHRvIGFuIEFSR0IgcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIGxzdGFyIEwqIGluIEwqYSpiKlxuICogQHJldHVybiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGdyYXlzY2FsZSBjb2xvciB3aXRoIGxpZ2h0bmVzc1xuICogbWF0Y2hpbmcgTCpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFyZ2JGcm9tTHN0YXIobHN0YXIpIHtcbiAgICBjb25zdCB5ID0geUZyb21Mc3Rhcihsc3Rhcik7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZGVsaW5lYXJpemVkKHkpO1xuICAgIHJldHVybiBhcmdiRnJvbVJnYihjb21wb25lbnQsIGNvbXBvbmVudCwgY29tcG9uZW50KTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIEwqIHZhbHVlIG9mIGEgY29sb3IgaW4gQVJHQiByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gYXJnYiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGEgY29sb3JcbiAqIEByZXR1cm4gTCosIGZyb20gTCphKmIqLCBjb29yZGluYXRlIG9mIHRoZSBjb2xvclxuICovXG5leHBvcnQgZnVuY3Rpb24gbHN0YXJGcm9tQXJnYihhcmdiKSB7XG4gICAgY29uc3QgeSA9IHh5ekZyb21BcmdiKGFyZ2IpWzFdO1xuICAgIHJldHVybiAxMTYuMCAqIGxhYkYoeSAvIDEwMC4wKSAtIDE2LjA7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEwqIHZhbHVlIHRvIGEgWSB2YWx1ZS5cbiAqXG4gKiBMKiBpbiBMKmEqYiogYW5kIFkgaW4gWFlaIG1lYXN1cmUgdGhlIHNhbWUgcXVhbnRpdHksIGx1bWluYW5jZS5cbiAqXG4gKiBMKiBtZWFzdXJlcyBwZXJjZXB0dWFsIGx1bWluYW5jZSwgYSBsaW5lYXIgc2NhbGUuIFkgaW4gWFlaXG4gKiBtZWFzdXJlcyByZWxhdGl2ZSBsdW1pbmFuY2UsIGEgbG9nYXJpdGhtaWMgc2NhbGUuXG4gKlxuICogQHBhcmFtIGxzdGFyIEwqIGluIEwqYSpiKlxuICogQHJldHVybiBZIGluIFhZWlxuICovXG5leHBvcnQgZnVuY3Rpb24geUZyb21Mc3Rhcihsc3Rhcikge1xuICAgIHJldHVybiAxMDAuMCAqIGxhYkludmYoKGxzdGFyICsgMTYuMCkgLyAxMTYuMCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgWSB2YWx1ZSB0byBhbiBMKiB2YWx1ZS5cbiAqXG4gKiBMKiBpbiBMKmEqYiogYW5kIFkgaW4gWFlaIG1lYXN1cmUgdGhlIHNhbWUgcXVhbnRpdHksIGx1bWluYW5jZS5cbiAqXG4gKiBMKiBtZWFzdXJlcyBwZXJjZXB0dWFsIGx1bWluYW5jZSwgYSBsaW5lYXIgc2NhbGUuIFkgaW4gWFlaXG4gKiBtZWFzdXJlcyByZWxhdGl2ZSBsdW1pbmFuY2UsIGEgbG9nYXJpdGhtaWMgc2NhbGUuXG4gKlxuICogQHBhcmFtIHkgWSBpbiBYWVpcbiAqIEByZXR1cm4gTCogaW4gTCphKmIqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsc3RhckZyb21ZKHkpIHtcbiAgICByZXR1cm4gbGFiRih5IC8gMTAwLjApICogMTE2LjAgLSAxNi4wO1xufVxuLyoqXG4gKiBMaW5lYXJpemVzIGFuIFJHQiBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHJnYkNvbXBvbmVudCAwIDw9IHJnYl9jb21wb25lbnQgPD0gMjU1LCByZXByZXNlbnRzIFIvRy9CXG4gKiBjaGFubmVsXG4gKiBAcmV0dXJuIDAuMCA8PSBvdXRwdXQgPD0gMTAwLjAsIGNvbG9yIGNoYW5uZWwgY29udmVydGVkIHRvXG4gKiBsaW5lYXIgUkdCIHNwYWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpemVkKHJnYkNvbXBvbmVudCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSByZ2JDb21wb25lbnQgLyAyNTUuMDtcbiAgICBpZiAobm9ybWFsaXplZCA8PSAwLjA0MDQ0OTkzNikge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZCAvIDEyLjkyICogMTAwLjA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coKG5vcm1hbGl6ZWQgKyAwLjA1NSkgLyAxLjA1NSwgMi40KSAqIDEwMC4wO1xuICAgIH1cbn1cbi8qKlxuICogRGVsaW5lYXJpemVzIGFuIFJHQiBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHJnYkNvbXBvbmVudCAwLjAgPD0gcmdiX2NvbXBvbmVudCA8PSAxMDAuMCwgcmVwcmVzZW50c1xuICogbGluZWFyIFIvRy9CIGNoYW5uZWxcbiAqIEByZXR1cm4gMCA8PSBvdXRwdXQgPD0gMjU1LCBjb2xvciBjaGFubmVsIGNvbnZlcnRlZCB0byByZWd1bGFyXG4gKiBSR0Igc3BhY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGluZWFyaXplZChyZ2JDb21wb25lbnQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gcmdiQ29tcG9uZW50IC8gMTAwLjA7XG4gICAgbGV0IGRlbGluZWFyaXplZCA9IDAuMDtcbiAgICBpZiAobm9ybWFsaXplZCA8PSAwLjAwMzEzMDgpIHtcbiAgICAgICAgZGVsaW5lYXJpemVkID0gbm9ybWFsaXplZCAqIDEyLjkyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVsaW5lYXJpemVkID0gMS4wNTUgKiBNYXRoLnBvdyhub3JtYWxpemVkLCAxLjAgLyAyLjQpIC0gMC4wNTU7XG4gICAgfVxuICAgIHJldHVybiBtYXRoVXRpbHMuY2xhbXBJbnQoMCwgMjU1LCBNYXRoLnJvdW5kKGRlbGluZWFyaXplZCAqIDI1NS4wKSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHN0YW5kYXJkIHdoaXRlIHBvaW50OyB3aGl0ZSBvbiBhIHN1bm55IGRheS5cbiAqXG4gKiBAcmV0dXJuIFRoZSB3aGl0ZSBwb2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVQb2ludEQ2NSgpIHtcbiAgICByZXR1cm4gV0hJVEVfUE9JTlRfRDY1O1xufVxuLyoqXG4gKiBSZXR1cm4gUkdCQSBmcm9tIGEgZ2l2ZW4gaW50MzIgY29sb3JcbiAqXG4gKiBAcGFyYW0gYXJnYiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGEgaW50MzIgY29sb3IuXG4gKiBAcmV0dXJuIFJHQkEgcmVwcmVzZW50YXRpb24gb2YgYSBpbnQzMiBjb2xvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYmFGcm9tQXJnYihhcmdiKSB7XG4gICAgY29uc3QgciA9IHJlZEZyb21BcmdiKGFyZ2IpO1xuICAgIGNvbnN0IGcgPSBncmVlbkZyb21BcmdiKGFyZ2IpO1xuICAgIGNvbnN0IGIgPSBibHVlRnJvbUFyZ2IoYXJnYik7XG4gICAgY29uc3QgYSA9IGFscGhhRnJvbUFyZ2IoYXJnYik7XG4gICAgcmV0dXJuIHsgciwgZywgYiwgYSB9O1xufVxuLyoqXG4gKiBSZXR1cm4gaW50MzIgY29sb3IgZnJvbSBhIGdpdmVuIFJHQkEgY29tcG9uZW50XG4gKlxuICogQHBhcmFtIHJnYmEgUkdCQSByZXByZXNlbnRhdGlvbiBvZiBhIGludDMyIGNvbG9yLlxuICogQHJldHVybnMgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGludDMyIGNvbG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJnYkZyb21SZ2JhKHsgciwgZywgYiwgYSB9KSB7XG4gICAgY29uc3QgclZhbHVlID0gY2xhbXBDb21wb25lbnQocik7XG4gICAgY29uc3QgZ1ZhbHVlID0gY2xhbXBDb21wb25lbnQoZyk7XG4gICAgY29uc3QgYlZhbHVlID0gY2xhbXBDb21wb25lbnQoYik7XG4gICAgY29uc3QgYVZhbHVlID0gY2xhbXBDb21wb25lbnQoYSk7XG4gICAgcmV0dXJuIChhVmFsdWUgPDwgMjQpIHwgKHJWYWx1ZSA8PCAxNikgfCAoZ1ZhbHVlIDw8IDgpIHwgYlZhbHVlO1xufVxuZnVuY3Rpb24gY2xhbXBDb21wb25lbnQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPCAwKVxuICAgICAgICByZXR1cm4gMDtcbiAgICBpZiAodmFsdWUgPiAyNTUpXG4gICAgICAgIHJldHVybiAyNTU7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gbGFiRih0KSB7XG4gICAgY29uc3QgZSA9IDIxNi4wIC8gMjQzODkuMDtcbiAgICBjb25zdCBrYXBwYSA9IDI0Mzg5LjAgLyAyNy4wO1xuICAgIGlmICh0ID4gZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3codCwgMS4wIC8gMy4wKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAoa2FwcGEgKiB0ICsgMTYpIC8gMTE2O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxhYkludmYoZnQpIHtcbiAgICBjb25zdCBlID0gMjE2LjAgLyAyNDM4OS4wO1xuICAgIGNvbnN0IGthcHBhID0gMjQzODkuMCAvIDI3LjA7XG4gICAgY29uc3QgZnQzID0gZnQgKiBmdCAqIGZ0O1xuICAgIGlmIChmdDMgPiBlKSB7XG4gICAgICAgIHJldHVybiBmdDM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKDExNiAqIGZ0IC0gMTYpIC8ga2FwcGE7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3JfdXRpbHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL2NvbG9yX3V0aWxzLmpzJztcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi4vdXRpbHMvbWF0aF91dGlscy5qcyc7XG4vKipcbiAqIEluIHRyYWRpdGlvbmFsIGNvbG9yIHNwYWNlcywgYSBjb2xvciBjYW4gYmUgaWRlbnRpZmllZCBzb2xlbHkgYnkgdGhlXG4gKiBvYnNlcnZlcidzIG1lYXN1cmVtZW50IG9mIHRoZSBjb2xvci4gQ29sb3IgYXBwZWFyYW5jZSBtb2RlbHMgc3VjaCBhcyBDQU0xNlxuICogYWxzbyB1c2UgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVudmlyb25tZW50IHdoZXJlIHRoZSBjb2xvciB3YXNcbiAqIG9ic2VydmVkLCBrbm93biBhcyB0aGUgdmlld2luZyBjb25kaXRpb25zLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGl0ZSB1bmRlciB0aGUgdHJhZGl0aW9uYWwgYXNzdW1wdGlvbiBvZiBhIG1pZGRheSBzdW4gd2hpdGVcbiAqIHBvaW50IGlzIGFjY3VyYXRlbHkgbWVhc3VyZWQgYXMgYSBzbGlnaHRseSBjaHJvbWF0aWMgYmx1ZSBieSBDQU0xNi4gKHJvdWdobHksXG4gKiBodWUgMjAzLCBjaHJvbWEgMywgbGlnaHRuZXNzIDEwMClcbiAqXG4gKiBUaGlzIGNsYXNzIGNhY2hlcyBpbnRlcm1lZGlhdGUgdmFsdWVzIG9mIHRoZSBDQU0xNiBjb252ZXJzaW9uIHByb2Nlc3MgdGhhdFxuICogZGVwZW5kIG9ubHkgb24gdmlld2luZyBjb25kaXRpb25zLCBlbmFibGluZyBzcGVlZCB1cHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3aW5nQ29uZGl0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIFZpZXdpbmdDb25kaXRpb25zIGZyb20gYSBzaW1wbGUsIHBoeXNpY2FsbHkgcmVsZXZhbnQsIHNldCBvZlxuICAgICAqIHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2hpdGVQb2ludCBXaGl0ZSBwb2ludCwgbWVhc3VyZWQgaW4gdGhlIFhZWiBjb2xvciBzcGFjZS5cbiAgICAgKiAgICAgZGVmYXVsdCA9IEQ2NSwgb3Igc3VubnkgZGF5IGFmdGVybm9vblxuICAgICAqIEBwYXJhbSBhZGFwdGluZ0x1bWluYW5jZSBUaGUgbHVtaW5hbmNlIG9mIHRoZSBhZGFwdGluZyBmaWVsZC4gSW5mb3JtYWxseSxcbiAgICAgKiAgICAgaG93IGJyaWdodCBpdCBpcyBpbiB0aGUgcm9vbSB3aGVyZSB0aGUgY29sb3IgaXMgdmlld2VkLiBDYW4gYmVcbiAgICAgKiAgICAgY2FsY3VsYXRlZCBmcm9tIGx1eCBieSBtdWx0aXBseWluZyBsdXggYnkgMC4wNTg2LiBkZWZhdWx0ID0gMTEuNzIsXG4gICAgICogICAgIG9yIDIwMCBsdXguXG4gICAgICogQHBhcmFtIGJhY2tncm91bmRMc3RhciBUaGUgbGlnaHRuZXNzIG9mIHRoZSBhcmVhIHN1cnJvdW5kaW5nIHRoZSBjb2xvci5cbiAgICAgKiAgICAgbWVhc3VyZWQgYnkgTCogaW4gTCphKmIqLiBkZWZhdWx0ID0gNTAuMFxuICAgICAqIEBwYXJhbSBzdXJyb3VuZCBBIGdlbmVyYWwgZGVzY3JpcHRpb24gb2YgdGhlIGxpZ2h0aW5nIHN1cnJvdW5kaW5nIHRoZVxuICAgICAqICAgICBjb2xvci4gMCBpcyBwaXRjaCBkYXJrLCBsaWtlIHdhdGNoaW5nIGEgbW92aWUgaW4gYSB0aGVhdGVyLiAxLjAgaXMgYVxuICAgICAqICAgICBkaW1seSBsaWdodCByb29tLCBsaWtlIHdhdGNoaW5nIFRWIGF0IGhvbWUgYXQgbmlnaHQuIDIuMCBtZWFucyB0aGVyZVxuICAgICAqICAgICBpcyBubyBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxpZ2h0aW5nIG9uIHRoZSBjb2xvciBhbmQgYXJvdW5kIGl0LlxuICAgICAqICAgICBkZWZhdWx0ID0gMi4wXG4gICAgICogQHBhcmFtIGRpc2NvdW50aW5nSWxsdW1pbmFudCBXaGV0aGVyIHRoZSBleWUgYWNjb3VudHMgZm9yIHRoZSB0aW50IG9mIHRoZVxuICAgICAqICAgICBhbWJpZW50IGxpZ2h0aW5nLCBzdWNoIGFzIGtub3dpbmcgYW4gYXBwbGUgaXMgc3RpbGwgcmVkIGluIGdyZWVuIGxpZ2h0LlxuICAgICAqICAgICBkZWZhdWx0ID0gZmFsc2UsIHRoZSBleWUgZG9lcyBub3QgcGVyZm9ybSB0aGlzIHByb2Nlc3Mgb25cbiAgICAgKiAgICAgICBzZWxmLWx1bWlub3VzIG9iamVjdHMgbGlrZSBkaXNwbGF5cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgbWFrZSh3aGl0ZVBvaW50ID0gdXRpbHMud2hpdGVQb2ludEQ2NSgpLCBhZGFwdGluZ0x1bWluYW5jZSA9ICgyMDAuMCAvIE1hdGguUEkpICogdXRpbHMueUZyb21Mc3Rhcig1MC4wKSAvIDEwMC4wLCBiYWNrZ3JvdW5kTHN0YXIgPSA1MC4wLCBzdXJyb3VuZCA9IDIuMCwgZGlzY291bnRpbmdJbGx1bWluYW50ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgeHl6ID0gd2hpdGVQb2ludDtcbiAgICAgICAgY29uc3QgclcgPSB4eXpbMF0gKiAwLjQwMTI4OCArIHh5elsxXSAqIDAuNjUwMTczICsgeHl6WzJdICogLTAuMDUxNDYxO1xuICAgICAgICBjb25zdCBnVyA9IHh5elswXSAqIC0wLjI1MDI2OCArIHh5elsxXSAqIDEuMjA0NDE0ICsgeHl6WzJdICogMC4wNDU4NTQ7XG4gICAgICAgIGNvbnN0IGJXID0geHl6WzBdICogLTAuMDAyMDc5ICsgeHl6WzFdICogMC4wNDg5NTIgKyB4eXpbMl0gKiAwLjk1MzEyNztcbiAgICAgICAgY29uc3QgZiA9IDAuOCArIHN1cnJvdW5kIC8gMTAuMDtcbiAgICAgICAgY29uc3QgYyA9IGYgPj0gMC45ID8gbWF0aC5sZXJwKDAuNTksIDAuNjksIChmIC0gMC45KSAqIDEwLjApIDpcbiAgICAgICAgICAgIG1hdGgubGVycCgwLjUyNSwgMC41OSwgKGYgLSAwLjgpICogMTAuMCk7XG4gICAgICAgIGxldCBkID0gZGlzY291bnRpbmdJbGx1bWluYW50ID9cbiAgICAgICAgICAgIDEuMCA6XG4gICAgICAgICAgICBmICogKDEuMCAtICgxLjAgLyAzLjYpICogTWF0aC5leHAoKC1hZGFwdGluZ0x1bWluYW5jZSAtIDQyLjApIC8gOTIuMCkpO1xuICAgICAgICBkID0gZCA+IDEuMCA/IDEuMCA6IGQgPCAwLjAgPyAwLjAgOiBkO1xuICAgICAgICBjb25zdCBuYyA9IGY7XG4gICAgICAgIGNvbnN0IHJnYkQgPSBbXG4gICAgICAgICAgICBkICogKDEwMC4wIC8gclcpICsgMS4wIC0gZCxcbiAgICAgICAgICAgIGQgKiAoMTAwLjAgLyBnVykgKyAxLjAgLSBkLFxuICAgICAgICAgICAgZCAqICgxMDAuMCAvIGJXKSArIDEuMCAtIGQsXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGsgPSAxLjAgLyAoNS4wICogYWRhcHRpbmdMdW1pbmFuY2UgKyAxLjApO1xuICAgICAgICBjb25zdCBrNCA9IGsgKiBrICogayAqIGs7XG4gICAgICAgIGNvbnN0IGs0RiA9IDEuMCAtIGs0O1xuICAgICAgICBjb25zdCBmbCA9IGs0ICogYWRhcHRpbmdMdW1pbmFuY2UgK1xuICAgICAgICAgICAgMC4xICogazRGICogazRGICogTWF0aC5jYnJ0KDUuMCAqIGFkYXB0aW5nTHVtaW5hbmNlKTtcbiAgICAgICAgY29uc3QgbiA9IHV0aWxzLnlGcm9tTHN0YXIoYmFja2dyb3VuZExzdGFyKSAvIHdoaXRlUG9pbnRbMV07XG4gICAgICAgIGNvbnN0IHogPSAxLjQ4ICsgTWF0aC5zcXJ0KG4pO1xuICAgICAgICBjb25zdCBuYmIgPSAwLjcyNSAvIE1hdGgucG93KG4sIDAuMik7XG4gICAgICAgIGNvbnN0IG5jYiA9IG5iYjtcbiAgICAgICAgY29uc3QgcmdiQUZhY3RvcnMgPSBbXG4gICAgICAgICAgICBNYXRoLnBvdygoZmwgKiByZ2JEWzBdICogclcpIC8gMTAwLjAsIDAuNDIpLFxuICAgICAgICAgICAgTWF0aC5wb3coKGZsICogcmdiRFsxXSAqIGdXKSAvIDEwMC4wLCAwLjQyKSxcbiAgICAgICAgICAgIE1hdGgucG93KChmbCAqIHJnYkRbMl0gKiBiVykgLyAxMDAuMCwgMC40MiksXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IHJnYkEgPSBbXG4gICAgICAgICAgICAoNDAwLjAgKiByZ2JBRmFjdG9yc1swXSkgLyAocmdiQUZhY3RvcnNbMF0gKyAyNy4xMyksXG4gICAgICAgICAgICAoNDAwLjAgKiByZ2JBRmFjdG9yc1sxXSkgLyAocmdiQUZhY3RvcnNbMV0gKyAyNy4xMyksXG4gICAgICAgICAgICAoNDAwLjAgKiByZ2JBRmFjdG9yc1syXSkgLyAocmdiQUZhY3RvcnNbMl0gKyAyNy4xMyksXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGF3ID0gKDIuMCAqIHJnYkFbMF0gKyByZ2JBWzFdICsgMC4wNSAqIHJnYkFbMl0pICogbmJiO1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdpbmdDb25kaXRpb25zKG4sIGF3LCBuYmIsIG5jYiwgYywgbmMsIHJnYkQsIGZsLCBNYXRoLnBvdyhmbCwgMC4yNSksIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJhbWV0ZXJzIGFyZSBpbnRlcm1lZGlhdGUgdmFsdWVzIG9mIHRoZSBDQU0xNiBjb252ZXJzaW9uIHByb2Nlc3MuIFRoZWlyXG4gICAgICogbmFtZXMgYXJlIHNob3J0aGFuZCBmb3IgdGVjaG5pY2FsIGNvbG9yIHNjaWVuY2UgdGVybWlub2xvZ3ksIHRoaXMgY2xhc3NcbiAgICAgKiB3b3VsZCBub3QgYmVuZWZpdCBmcm9tIGRvY3VtZW50aW5nIHRoZW0gaW5kaXZpZHVhbGx5LiBBIGJyaWVmIG92ZXJ2aWV3XG4gICAgICogaXMgYXZhaWxhYmxlIGluIHRoZSBDQU0xNiBzcGVjaWZpY2F0aW9uLCBhbmQgYSBjb21wbGV0ZSBvdmVydmlldyByZXF1aXJlc1xuICAgICAqIGEgY29sb3Igc2NpZW5jZSB0ZXh0Ym9vaywgc3VjaCBhcyBGYWlyY2hpbGQncyBDb2xvciBBcHBlYXJhbmNlIE1vZGVscy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuLCBhdywgbmJiLCBuY2IsIGMsIG5jLCByZ2JELCBmbCwgZkxSb290LCB6KSB7XG4gICAgICAgIHRoaXMubiA9IG47XG4gICAgICAgIHRoaXMuYXcgPSBhdztcbiAgICAgICAgdGhpcy5uYmIgPSBuYmI7XG4gICAgICAgIHRoaXMubmNiID0gbmNiO1xuICAgICAgICB0aGlzLmMgPSBjO1xuICAgICAgICB0aGlzLm5jID0gbmM7XG4gICAgICAgIHRoaXMucmdiRCA9IHJnYkQ7XG4gICAgICAgIHRoaXMuZmwgPSBmbDtcbiAgICAgICAgdGhpcy5mTFJvb3QgPSBmTFJvb3Q7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxufVxuLyoqIHNSR0ItbGlrZSB2aWV3aW5nIGNvbmRpdGlvbnMuICAqL1xuVmlld2luZ0NvbmRpdGlvbnMuREVGQVVMVCA9IFZpZXdpbmdDb25kaXRpb25zLm1ha2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpZXdpbmdfY29uZGl0aW9ucy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMvY29sb3JfdXRpbHMuanMnO1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuLi91dGlscy9tYXRoX3V0aWxzLmpzJztcbmltcG9ydCB7IFZpZXdpbmdDb25kaXRpb25zIH0gZnJvbSAnLi92aWV3aW5nX2NvbmRpdGlvbnMuanMnO1xuLyoqXG4gKiBDQU0xNiwgYSBjb2xvciBhcHBlYXJhbmNlIG1vZGVsLiBDb2xvcnMgYXJlIG5vdCBqdXN0IGRlZmluZWQgYnkgdGhlaXIgaGV4XG4gKiBjb2RlLCBidXQgcmF0aGVyLCBhIGhleCBjb2RlIGFuZCB2aWV3aW5nIGNvbmRpdGlvbnMuXG4gKlxuICogQ0FNMTYgaW5zdGFuY2VzIGFsc28gaGF2ZSBjb29yZGluYXRlcyBpbiB0aGUgQ0FNMTYtVUNTIHNwYWNlLCBjYWxsZWQgSiosIGEqLFxuICogYiosIG9yIGpzdGFyLCBhc3RhciwgYnN0YXIgaW4gY29kZS4gQ0FNMTYtVUNTIGlzIGluY2x1ZGVkIGluIHRoZSBDQU0xNlxuICogc3BlY2lmaWNhdGlvbiwgYW5kIHNob3VsZCBiZSB1c2VkIHdoZW4gbWVhc3VyaW5nIGRpc3RhbmNlcyBiZXR3ZWVuIGNvbG9ycy5cbiAqXG4gKiBJbiB0cmFkaXRpb25hbCBjb2xvciBzcGFjZXMsIGEgY29sb3IgY2FuIGJlIGlkZW50aWZpZWQgc29sZWx5IGJ5IHRoZVxuICogb2JzZXJ2ZXIncyBtZWFzdXJlbWVudCBvZiB0aGUgY29sb3IuIENvbG9yIGFwcGVhcmFuY2UgbW9kZWxzIHN1Y2ggYXMgQ0FNMTZcbiAqIGFsc28gdXNlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlbnZpcm9ubWVudCB3aGVyZSB0aGUgY29sb3Igd2FzXG4gKiBvYnNlcnZlZCwga25vd24gYXMgdGhlIHZpZXdpbmcgY29uZGl0aW9ucy5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hpdGUgdW5kZXIgdGhlIHRyYWRpdGlvbmFsIGFzc3VtcHRpb24gb2YgYSBtaWRkYXkgc3VuIHdoaXRlXG4gKiBwb2ludCBpcyBhY2N1cmF0ZWx5IG1lYXN1cmVkIGFzIGEgc2xpZ2h0bHkgY2hyb21hdGljIGJsdWUgYnkgQ0FNMTYuIChyb3VnaGx5LFxuICogaHVlIDIwMywgY2hyb21hIDMsIGxpZ2h0bmVzcyAxMDApXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW0xNiB7XG4gICAgLyoqXG4gICAgICogQWxsIG9mIHRoZSBDQU0xNiBkaW1lbnNpb25zIGNhbiBiZSBjYWxjdWxhdGVkIGZyb20gMyBvZiB0aGUgZGltZW5zaW9ucywgaW5cbiAgICAgKiB0aGUgZm9sbG93aW5nIGNvbWJpbmF0aW9uczpcbiAgICAgKiAgICAgIC0gIHtqIG9yIHF9IGFuZCB7YywgbSwgb3Igc30gYW5kIGh1ZVxuICAgICAqICAgICAgLSBqc3RhciwgYXN0YXIsIGJzdGFyXG4gICAgICogUHJlZmVyIHVzaW5nIGEgc3RhdGljIG1ldGhvZCB0aGF0IGNvbnN0cnVjdHMgZnJvbSAzIG9mIHRob3NlIGRpbWVuc2lvbnMuXG4gICAgICogVGhpcyBjb25zdHJ1Y3RvciBpcyBpbnRlbmRlZCBmb3IgdGhvc2UgbWV0aG9kcyB0byB1c2UgdG8gcmV0dXJuIGFsbFxuICAgICAqIHBvc3NpYmxlIGRpbWVuc2lvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHVlXG4gICAgICogQHBhcmFtIGNocm9tYSBpbmZvcm1hbGx5LCBjb2xvcmZ1bG5lc3MgLyBjb2xvciBpbnRlbnNpdHkuIGxpa2Ugc2F0dXJhdGlvblxuICAgICAqICAgICBpbiBIU0wsIGV4Y2VwdCBwZXJjZXB0dWFsbHkgYWNjdXJhdGUuXG4gICAgICogQHBhcmFtIGogbGlnaHRuZXNzXG4gICAgICogQHBhcmFtIHEgYnJpZ2h0bmVzczsgcmF0aW8gb2YgbGlnaHRuZXNzIHRvIHdoaXRlIHBvaW50J3MgbGlnaHRuZXNzXG4gICAgICogQHBhcmFtIG0gY29sb3JmdWxuZXNzXG4gICAgICogQHBhcmFtIHMgc2F0dXJhdGlvbjsgcmF0aW8gb2YgY2hyb21hIHRvIHdoaXRlIHBvaW50J3MgY2hyb21hXG4gICAgICogQHBhcmFtIGpzdGFyIENBTTE2LVVDUyBKIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gYXN0YXIgQ0FNMTYtVUNTIGEgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSBic3RhciBDQU0xNi1VQ1MgYiBjb29yZGluYXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaHVlLCBjaHJvbWEsIGosIHEsIG0sIHMsIGpzdGFyLCBhc3RhciwgYnN0YXIpIHtcbiAgICAgICAgdGhpcy5odWUgPSBodWU7XG4gICAgICAgIHRoaXMuY2hyb21hID0gY2hyb21hO1xuICAgICAgICB0aGlzLmogPSBqO1xuICAgICAgICB0aGlzLnEgPSBxO1xuICAgICAgICB0aGlzLm0gPSBtO1xuICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICB0aGlzLmpzdGFyID0ganN0YXI7XG4gICAgICAgIHRoaXMuYXN0YXIgPSBhc3RhcjtcbiAgICAgICAgdGhpcy5ic3RhciA9IGJzdGFyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDQU0xNiBpbnN0YW5jZXMgYWxzbyBoYXZlIGNvb3JkaW5hdGVzIGluIHRoZSBDQU0xNi1VQ1Mgc3BhY2UsIGNhbGxlZCBKKixcbiAgICAgKiBhKiwgYiosIG9yIGpzdGFyLCBhc3RhciwgYnN0YXIgaW4gY29kZS4gQ0FNMTYtVUNTIGlzIGluY2x1ZGVkIGluIHRoZSBDQU0xNlxuICAgICAqIHNwZWNpZmljYXRpb24sIGFuZCBpcyB1c2VkIHRvIG1lYXN1cmUgZGlzdGFuY2VzIGJldHdlZW4gY29sb3JzLlxuICAgICAqL1xuICAgIGRpc3RhbmNlKG90aGVyKSB7XG4gICAgICAgIGNvbnN0IGRKID0gdGhpcy5qc3RhciAtIG90aGVyLmpzdGFyO1xuICAgICAgICBjb25zdCBkQSA9IHRoaXMuYXN0YXIgLSBvdGhlci5hc3RhcjtcbiAgICAgICAgY29uc3QgZEIgPSB0aGlzLmJzdGFyIC0gb3RoZXIuYnN0YXI7XG4gICAgICAgIGNvbnN0IGRFUHJpbWUgPSBNYXRoLnNxcnQoZEogKiBkSiArIGRBICogZEEgKyBkQiAqIGRCKTtcbiAgICAgICAgY29uc3QgZEUgPSAxLjQxICogTWF0aC5wb3coZEVQcmltZSwgMC42Myk7XG4gICAgICAgIHJldHVybiBkRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gQ0FNMTYgY29sb3IsIGFzc3VtaW5nIHRoZSBjb2xvciB3YXMgdmlld2VkIGluIGRlZmF1bHQgdmlld2luZ1xuICAgICAqICAgICBjb25kaXRpb25zLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tSW50KGFyZ2IpIHtcbiAgICAgICAgcmV0dXJuIENhbTE2LmZyb21JbnRJblZpZXdpbmdDb25kaXRpb25zKGFyZ2IsIFZpZXdpbmdDb25kaXRpb25zLkRFRkFVTFQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYXJnYiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGEgY29sb3IuXG4gICAgICogQHBhcmFtIHZpZXdpbmdDb25kaXRpb25zIEluZm9ybWF0aW9uIGFib3V0IHRoZSBlbnZpcm9ubWVudCB3aGVyZSB0aGUgY29sb3JcbiAgICAgKiAgICAgd2FzIG9ic2VydmVkLlxuICAgICAqIEByZXR1cm4gQ0FNMTYgY29sb3IuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21JbnRJblZpZXdpbmdDb25kaXRpb25zKGFyZ2IsIHZpZXdpbmdDb25kaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlZCA9IChhcmdiICYgMHgwMGZmMDAwMCkgPj4gMTY7XG4gICAgICAgIGNvbnN0IGdyZWVuID0gKGFyZ2IgJiAweDAwMDBmZjAwKSA+PiA4O1xuICAgICAgICBjb25zdCBibHVlID0gKGFyZ2IgJiAweDAwMDAwMGZmKTtcbiAgICAgICAgY29uc3QgcmVkTCA9IHV0aWxzLmxpbmVhcml6ZWQocmVkKTtcbiAgICAgICAgY29uc3QgZ3JlZW5MID0gdXRpbHMubGluZWFyaXplZChncmVlbik7XG4gICAgICAgIGNvbnN0IGJsdWVMID0gdXRpbHMubGluZWFyaXplZChibHVlKTtcbiAgICAgICAgY29uc3QgeCA9IDAuNDEyMzM4OTUgKiByZWRMICsgMC4zNTc2MjA2NCAqIGdyZWVuTCArIDAuMTgwNTEwNDIgKiBibHVlTDtcbiAgICAgICAgY29uc3QgeSA9IDAuMjEyNiAqIHJlZEwgKyAwLjcxNTIgKiBncmVlbkwgKyAwLjA3MjIgKiBibHVlTDtcbiAgICAgICAgY29uc3QgeiA9IDAuMDE5MzIxNDEgKiByZWRMICsgMC4xMTkxNjM4MiAqIGdyZWVuTCArIDAuOTUwMzQ0NzggKiBibHVlTDtcbiAgICAgICAgY29uc3QgckMgPSAwLjQwMTI4OCAqIHggKyAwLjY1MDE3MyAqIHkgLSAwLjA1MTQ2MSAqIHo7XG4gICAgICAgIGNvbnN0IGdDID0gLTAuMjUwMjY4ICogeCArIDEuMjA0NDE0ICogeSArIDAuMDQ1ODU0ICogejtcbiAgICAgICAgY29uc3QgYkMgPSAtMC4wMDIwNzkgKiB4ICsgMC4wNDg5NTIgKiB5ICsgMC45NTMxMjcgKiB6O1xuICAgICAgICBjb25zdCByRCA9IHZpZXdpbmdDb25kaXRpb25zLnJnYkRbMF0gKiByQztcbiAgICAgICAgY29uc3QgZ0QgPSB2aWV3aW5nQ29uZGl0aW9ucy5yZ2JEWzFdICogZ0M7XG4gICAgICAgIGNvbnN0IGJEID0gdmlld2luZ0NvbmRpdGlvbnMucmdiRFsyXSAqIGJDO1xuICAgICAgICBjb25zdCByQUYgPSBNYXRoLnBvdygodmlld2luZ0NvbmRpdGlvbnMuZmwgKiBNYXRoLmFicyhyRCkpIC8gMTAwLjAsIDAuNDIpO1xuICAgICAgICBjb25zdCBnQUYgPSBNYXRoLnBvdygodmlld2luZ0NvbmRpdGlvbnMuZmwgKiBNYXRoLmFicyhnRCkpIC8gMTAwLjAsIDAuNDIpO1xuICAgICAgICBjb25zdCBiQUYgPSBNYXRoLnBvdygodmlld2luZ0NvbmRpdGlvbnMuZmwgKiBNYXRoLmFicyhiRCkpIC8gMTAwLjAsIDAuNDIpO1xuICAgICAgICBjb25zdCByQSA9IChtYXRoLnNpZ251bShyRCkgKiA0MDAuMCAqIHJBRikgLyAockFGICsgMjcuMTMpO1xuICAgICAgICBjb25zdCBnQSA9IChtYXRoLnNpZ251bShnRCkgKiA0MDAuMCAqIGdBRikgLyAoZ0FGICsgMjcuMTMpO1xuICAgICAgICBjb25zdCBiQSA9IChtYXRoLnNpZ251bShiRCkgKiA0MDAuMCAqIGJBRikgLyAoYkFGICsgMjcuMTMpO1xuICAgICAgICBjb25zdCBhID0gKDExLjAgKiByQSArIC0xMi4wICogZ0EgKyBiQSkgLyAxMS4wO1xuICAgICAgICBjb25zdCBiID0gKHJBICsgZ0EgLSAyLjAgKiBiQSkgLyA5LjA7XG4gICAgICAgIGNvbnN0IHUgPSAoMjAuMCAqIHJBICsgMjAuMCAqIGdBICsgMjEuMCAqIGJBKSAvIDIwLjA7XG4gICAgICAgIGNvbnN0IHAyID0gKDQwLjAgKiByQSArIDIwLjAgKiBnQSArIGJBKSAvIDIwLjA7XG4gICAgICAgIGNvbnN0IGF0YW4yID0gTWF0aC5hdGFuMihiLCBhKTtcbiAgICAgICAgY29uc3QgYXRhbkRlZ3JlZXMgPSAoYXRhbjIgKiAxODAuMCkgLyBNYXRoLlBJO1xuICAgICAgICBjb25zdCBodWUgPSBhdGFuRGVncmVlcyA8IDAgPyBhdGFuRGVncmVlcyArIDM2MC4wIDpcbiAgICAgICAgICAgIGF0YW5EZWdyZWVzID49IDM2MCA/IGF0YW5EZWdyZWVzIC0gMzYwLjAgOlxuICAgICAgICAgICAgICAgIGF0YW5EZWdyZWVzO1xuICAgICAgICBjb25zdCBodWVSYWRpYW5zID0gKGh1ZSAqIE1hdGguUEkpIC8gMTgwLjA7XG4gICAgICAgIGNvbnN0IGFjID0gcDIgKiB2aWV3aW5nQ29uZGl0aW9ucy5uYmI7XG4gICAgICAgIGNvbnN0IGogPSAxMDAuMCAqXG4gICAgICAgICAgICBNYXRoLnBvdyhhYyAvIHZpZXdpbmdDb25kaXRpb25zLmF3LCB2aWV3aW5nQ29uZGl0aW9ucy5jICogdmlld2luZ0NvbmRpdGlvbnMueik7XG4gICAgICAgIGNvbnN0IHEgPSAoNC4wIC8gdmlld2luZ0NvbmRpdGlvbnMuYykgKiBNYXRoLnNxcnQoaiAvIDEwMC4wKSAqXG4gICAgICAgICAgICAodmlld2luZ0NvbmRpdGlvbnMuYXcgKyA0LjApICogdmlld2luZ0NvbmRpdGlvbnMuZkxSb290O1xuICAgICAgICBjb25zdCBodWVQcmltZSA9IGh1ZSA8IDIwLjE0ID8gaHVlICsgMzYwIDogaHVlO1xuICAgICAgICBjb25zdCBlSHVlID0gMC4yNSAqIChNYXRoLmNvcygoaHVlUHJpbWUgKiBNYXRoLlBJKSAvIDE4MC4wICsgMi4wKSArIDMuOCk7XG4gICAgICAgIGNvbnN0IHAxID0gKDUwMDAwLjAgLyAxMy4wKSAqIGVIdWUgKiB2aWV3aW5nQ29uZGl0aW9ucy5uYyAqIHZpZXdpbmdDb25kaXRpb25zLm5jYjtcbiAgICAgICAgY29uc3QgdCA9IChwMSAqIE1hdGguc3FydChhICogYSArIGIgKiBiKSkgLyAodSArIDAuMzA1KTtcbiAgICAgICAgY29uc3QgYWxwaGEgPSBNYXRoLnBvdyh0LCAwLjkpICpcbiAgICAgICAgICAgIE1hdGgucG93KDEuNjQgLSBNYXRoLnBvdygwLjI5LCB2aWV3aW5nQ29uZGl0aW9ucy5uKSwgMC43Myk7XG4gICAgICAgIGNvbnN0IGMgPSBhbHBoYSAqIE1hdGguc3FydChqIC8gMTAwLjApO1xuICAgICAgICBjb25zdCBtID0gYyAqIHZpZXdpbmdDb25kaXRpb25zLmZMUm9vdDtcbiAgICAgICAgY29uc3QgcyA9IDUwLjAgKlxuICAgICAgICAgICAgTWF0aC5zcXJ0KChhbHBoYSAqIHZpZXdpbmdDb25kaXRpb25zLmMpIC8gKHZpZXdpbmdDb25kaXRpb25zLmF3ICsgNC4wKSk7XG4gICAgICAgIGNvbnN0IGpzdGFyID0gKCgxLjAgKyAxMDAuMCAqIDAuMDA3KSAqIGopIC8gKDEuMCArIDAuMDA3ICogaik7XG4gICAgICAgIGNvbnN0IG1zdGFyID0gKDEuMCAvIDAuMDIyOCkgKiBNYXRoLmxvZygxLjAgKyAwLjAyMjggKiBtKTtcbiAgICAgICAgY29uc3QgYXN0YXIgPSBtc3RhciAqIE1hdGguY29zKGh1ZVJhZGlhbnMpO1xuICAgICAgICBjb25zdCBic3RhciA9IG1zdGFyICogTWF0aC5zaW4oaHVlUmFkaWFucyk7XG4gICAgICAgIHJldHVybiBuZXcgQ2FtMTYoaHVlLCBjLCBqLCBxLCBtLCBzLCBqc3RhciwgYXN0YXIsIGJzdGFyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGogQ0FNMTYgbGlnaHRuZXNzXG4gICAgICogQHBhcmFtIGMgQ0FNMTYgY2hyb21hXG4gICAgICogQHBhcmFtIGggQ0FNMTYgaHVlXG4gICAgICovXG4gICAgc3RhdGljIGZyb21KY2goaiwgYywgaCkge1xuICAgICAgICByZXR1cm4gQ2FtMTYuZnJvbUpjaEluVmlld2luZ0NvbmRpdGlvbnMoaiwgYywgaCwgVmlld2luZ0NvbmRpdGlvbnMuREVGQVVMVCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBqIENBTTE2IGxpZ2h0bmVzc1xuICAgICAqIEBwYXJhbSBjIENBTTE2IGNocm9tYVxuICAgICAqIEBwYXJhbSBoIENBTTE2IGh1ZVxuICAgICAqIEBwYXJhbSB2aWV3aW5nQ29uZGl0aW9ucyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgZW52aXJvbm1lbnQgd2hlcmUgdGhlIGNvbG9yXG4gICAgICogICAgIHdhcyBvYnNlcnZlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUpjaEluVmlld2luZ0NvbmRpdGlvbnMoaiwgYywgaCwgdmlld2luZ0NvbmRpdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcSA9ICg0LjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5jKSAqIE1hdGguc3FydChqIC8gMTAwLjApICpcbiAgICAgICAgICAgICh2aWV3aW5nQ29uZGl0aW9ucy5hdyArIDQuMCkgKiB2aWV3aW5nQ29uZGl0aW9ucy5mTFJvb3Q7XG4gICAgICAgIGNvbnN0IG0gPSBjICogdmlld2luZ0NvbmRpdGlvbnMuZkxSb290O1xuICAgICAgICBjb25zdCBhbHBoYSA9IGMgLyBNYXRoLnNxcnQoaiAvIDEwMC4wKTtcbiAgICAgICAgY29uc3QgcyA9IDUwLjAgKlxuICAgICAgICAgICAgTWF0aC5zcXJ0KChhbHBoYSAqIHZpZXdpbmdDb25kaXRpb25zLmMpIC8gKHZpZXdpbmdDb25kaXRpb25zLmF3ICsgNC4wKSk7XG4gICAgICAgIGNvbnN0IGh1ZVJhZGlhbnMgPSAoaCAqIE1hdGguUEkpIC8gMTgwLjA7XG4gICAgICAgIGNvbnN0IGpzdGFyID0gKCgxLjAgKyAxMDAuMCAqIDAuMDA3KSAqIGopIC8gKDEuMCArIDAuMDA3ICogaik7XG4gICAgICAgIGNvbnN0IG1zdGFyID0gKDEuMCAvIDAuMDIyOCkgKiBNYXRoLmxvZygxLjAgKyAwLjAyMjggKiBtKTtcbiAgICAgICAgY29uc3QgYXN0YXIgPSBtc3RhciAqIE1hdGguY29zKGh1ZVJhZGlhbnMpO1xuICAgICAgICBjb25zdCBic3RhciA9IG1zdGFyICogTWF0aC5zaW4oaHVlUmFkaWFucyk7XG4gICAgICAgIHJldHVybiBuZXcgQ2FtMTYoaCwgYywgaiwgcSwgbSwgcywganN0YXIsIGFzdGFyLCBic3Rhcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBqc3RhciBDQU0xNi1VQ1MgbGlnaHRuZXNzLlxuICAgICAqIEBwYXJhbSBhc3RhciBDQU0xNi1VQ1MgYSBkaW1lbnNpb24uIExpa2UgYSogaW4gTCphKmIqLCBpdCBpcyBhIENhcnRlc2lhblxuICAgICAqICAgICBjb29yZGluYXRlIG9uIHRoZSBZIGF4aXMuXG4gICAgICogQHBhcmFtIGJzdGFyIENBTTE2LVVDUyBiIGRpbWVuc2lvbi4gTGlrZSBhKiBpbiBMKmEqYiosIGl0IGlzIGEgQ2FydGVzaWFuXG4gICAgICogICAgIGNvb3JkaW5hdGUgb24gdGhlIFggYXhpcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVVjcyhqc3RhciwgYXN0YXIsIGJzdGFyKSB7XG4gICAgICAgIHJldHVybiBDYW0xNi5mcm9tVWNzSW5WaWV3aW5nQ29uZGl0aW9ucyhqc3RhciwgYXN0YXIsIGJzdGFyLCBWaWV3aW5nQ29uZGl0aW9ucy5ERUZBVUxUKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGpzdGFyIENBTTE2LVVDUyBsaWdodG5lc3MuXG4gICAgICogQHBhcmFtIGFzdGFyIENBTTE2LVVDUyBhIGRpbWVuc2lvbi4gTGlrZSBhKiBpbiBMKmEqYiosIGl0IGlzIGEgQ2FydGVzaWFuXG4gICAgICogICAgIGNvb3JkaW5hdGUgb24gdGhlIFkgYXhpcy5cbiAgICAgKiBAcGFyYW0gYnN0YXIgQ0FNMTYtVUNTIGIgZGltZW5zaW9uLiBMaWtlIGEqIGluIEwqYSpiKiwgaXQgaXMgYSBDYXJ0ZXNpYW5cbiAgICAgKiAgICAgY29vcmRpbmF0ZSBvbiB0aGUgWCBheGlzLlxuICAgICAqIEBwYXJhbSB2aWV3aW5nQ29uZGl0aW9ucyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgZW52aXJvbm1lbnQgd2hlcmUgdGhlIGNvbG9yXG4gICAgICogICAgIHdhcyBvYnNlcnZlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVVjc0luVmlld2luZ0NvbmRpdGlvbnMoanN0YXIsIGFzdGFyLCBic3Rhciwgdmlld2luZ0NvbmRpdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYSA9IGFzdGFyO1xuICAgICAgICBjb25zdCBiID0gYnN0YXI7XG4gICAgICAgIGNvbnN0IG0gPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICAgIGNvbnN0IE0gPSAoTWF0aC5leHAobSAqIDAuMDIyOCkgLSAxLjApIC8gMC4wMjI4O1xuICAgICAgICBjb25zdCBjID0gTSAvIHZpZXdpbmdDb25kaXRpb25zLmZMUm9vdDtcbiAgICAgICAgbGV0IGggPSBNYXRoLmF0YW4yKGIsIGEpICogKDE4MC4wIC8gTWF0aC5QSSk7XG4gICAgICAgIGlmIChoIDwgMC4wKSB7XG4gICAgICAgICAgICBoICs9IDM2MC4wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGogPSBqc3RhciAvICgxIC0gKGpzdGFyIC0gMTAwKSAqIDAuMDA3KTtcbiAgICAgICAgcmV0dXJuIENhbTE2LmZyb21KY2hJblZpZXdpbmdDb25kaXRpb25zKGosIGMsIGgsIHZpZXdpbmdDb25kaXRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEByZXR1cm4gQVJHQiByZXByZXNlbnRhdGlvbiBvZiBjb2xvciwgYXNzdW1pbmcgdGhlIGNvbG9yIHdhcyB2aWV3ZWQgaW5cbiAgICAgKiAgICAgZGVmYXVsdCB2aWV3aW5nIGNvbmRpdGlvbnMsIHdoaWNoIGFyZSBuZWFyLWlkZW50aWNhbCB0byB0aGUgZGVmYXVsdFxuICAgICAqICAgICB2aWV3aW5nIGNvbmRpdGlvbnMgZm9yIHNSR0IuXG4gICAgICovXG4gICAgdG9JbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdlZChWaWV3aW5nQ29uZGl0aW9ucy5ERUZBVUxUKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZpZXdpbmdDb25kaXRpb25zIEluZm9ybWF0aW9uIGFib3V0IHRoZSBlbnZpcm9ubWVudCB3aGVyZSB0aGUgY29sb3JcbiAgICAgKiAgICAgd2lsbCBiZSB2aWV3ZWQuXG4gICAgICogQHJldHVybiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGNvbG9yXG4gICAgICovXG4gICAgdmlld2VkKHZpZXdpbmdDb25kaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFscGhhID0gdGhpcy5jaHJvbWEgPT09IDAuMCB8fCB0aGlzLmogPT09IDAuMCA/XG4gICAgICAgICAgICAwLjAgOlxuICAgICAgICAgICAgdGhpcy5jaHJvbWEgLyBNYXRoLnNxcnQodGhpcy5qIC8gMTAwLjApO1xuICAgICAgICBjb25zdCB0ID0gTWF0aC5wb3coYWxwaGEgLyBNYXRoLnBvdygxLjY0IC0gTWF0aC5wb3coMC4yOSwgdmlld2luZ0NvbmRpdGlvbnMubiksIDAuNzMpLCAxLjAgLyAwLjkpO1xuICAgICAgICBjb25zdCBoUmFkID0gKHRoaXMuaHVlICogTWF0aC5QSSkgLyAxODAuMDtcbiAgICAgICAgY29uc3QgZUh1ZSA9IDAuMjUgKiAoTWF0aC5jb3MoaFJhZCArIDIuMCkgKyAzLjgpO1xuICAgICAgICBjb25zdCBhYyA9IHZpZXdpbmdDb25kaXRpb25zLmF3ICpcbiAgICAgICAgICAgIE1hdGgucG93KHRoaXMuaiAvIDEwMC4wLCAxLjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5jIC8gdmlld2luZ0NvbmRpdGlvbnMueik7XG4gICAgICAgIGNvbnN0IHAxID0gZUh1ZSAqICg1MDAwMC4wIC8gMTMuMCkgKiB2aWV3aW5nQ29uZGl0aW9ucy5uYyAqIHZpZXdpbmdDb25kaXRpb25zLm5jYjtcbiAgICAgICAgY29uc3QgcDIgPSBhYyAvIHZpZXdpbmdDb25kaXRpb25zLm5iYjtcbiAgICAgICAgY29uc3QgaFNpbiA9IE1hdGguc2luKGhSYWQpO1xuICAgICAgICBjb25zdCBoQ29zID0gTWF0aC5jb3MoaFJhZCk7XG4gICAgICAgIGNvbnN0IGdhbW1hID0gKDIzLjAgKiAocDIgKyAwLjMwNSkgKiB0KSAvXG4gICAgICAgICAgICAoMjMuMCAqIHAxICsgMTEuMCAqIHQgKiBoQ29zICsgMTA4LjAgKiB0ICogaFNpbik7XG4gICAgICAgIGNvbnN0IGEgPSBnYW1tYSAqIGhDb3M7XG4gICAgICAgIGNvbnN0IGIgPSBnYW1tYSAqIGhTaW47XG4gICAgICAgIGNvbnN0IHJBID0gKDQ2MC4wICogcDIgKyA0NTEuMCAqIGEgKyAyODguMCAqIGIpIC8gMTQwMy4wO1xuICAgICAgICBjb25zdCBnQSA9ICg0NjAuMCAqIHAyIC0gODkxLjAgKiBhIC0gMjYxLjAgKiBiKSAvIDE0MDMuMDtcbiAgICAgICAgY29uc3QgYkEgPSAoNDYwLjAgKiBwMiAtIDIyMC4wICogYSAtIDYzMDAuMCAqIGIpIC8gMTQwMy4wO1xuICAgICAgICBjb25zdCByQ0Jhc2UgPSBNYXRoLm1heCgwLCAoMjcuMTMgKiBNYXRoLmFicyhyQSkpIC8gKDQwMC4wIC0gTWF0aC5hYnMockEpKSk7XG4gICAgICAgIGNvbnN0IHJDID0gbWF0aC5zaWdudW0ockEpICogKDEwMC4wIC8gdmlld2luZ0NvbmRpdGlvbnMuZmwpICpcbiAgICAgICAgICAgIE1hdGgucG93KHJDQmFzZSwgMS4wIC8gMC40Mik7XG4gICAgICAgIGNvbnN0IGdDQmFzZSA9IE1hdGgubWF4KDAsICgyNy4xMyAqIE1hdGguYWJzKGdBKSkgLyAoNDAwLjAgLSBNYXRoLmFicyhnQSkpKTtcbiAgICAgICAgY29uc3QgZ0MgPSBtYXRoLnNpZ251bShnQSkgKiAoMTAwLjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5mbCkgKlxuICAgICAgICAgICAgTWF0aC5wb3coZ0NCYXNlLCAxLjAgLyAwLjQyKTtcbiAgICAgICAgY29uc3QgYkNCYXNlID0gTWF0aC5tYXgoMCwgKDI3LjEzICogTWF0aC5hYnMoYkEpKSAvICg0MDAuMCAtIE1hdGguYWJzKGJBKSkpO1xuICAgICAgICBjb25zdCBiQyA9IG1hdGguc2lnbnVtKGJBKSAqICgxMDAuMCAvIHZpZXdpbmdDb25kaXRpb25zLmZsKSAqXG4gICAgICAgICAgICBNYXRoLnBvdyhiQ0Jhc2UsIDEuMCAvIDAuNDIpO1xuICAgICAgICBjb25zdCByRiA9IHJDIC8gdmlld2luZ0NvbmRpdGlvbnMucmdiRFswXTtcbiAgICAgICAgY29uc3QgZ0YgPSBnQyAvIHZpZXdpbmdDb25kaXRpb25zLnJnYkRbMV07XG4gICAgICAgIGNvbnN0IGJGID0gYkMgLyB2aWV3aW5nQ29uZGl0aW9ucy5yZ2JEWzJdO1xuICAgICAgICBjb25zdCB4ID0gMS44NjIwNjc4NiAqIHJGIC0gMS4wMTEyNTQ2MyAqIGdGICsgMC4xNDkxODY3NyAqIGJGO1xuICAgICAgICBjb25zdCB5ID0gMC4zODc1MjY1NCAqIHJGICsgMC42MjE0NDc0NCAqIGdGIC0gMC4wMDg5NzM5OCAqIGJGO1xuICAgICAgICBjb25zdCB6ID0gLTAuMDE1ODQxNTAgKiByRiAtIDAuMDM0MTIyOTQgKiBnRiArIDEuMDQ5OTY0NDQgKiBiRjtcbiAgICAgICAgY29uc3QgYXJnYiA9IHV0aWxzLmFyZ2JGcm9tWHl6KHgsIHksIHopO1xuICAgICAgICByZXR1cm4gYXJnYjtcbiAgICB9XG4gICAgLy8vIEdpdmVuIGNvbG9yIGV4cHJlc3NlZCBpbiBYWVogYW5kIHZpZXdlZCBpbiBbdmlld2luZ0NvbmRpdGlvbnNdLCBjb252ZXJ0IHRvXG4gICAgLy8vIENBTTE2LlxuICAgIHN0YXRpYyBmcm9tWHl6SW5WaWV3aW5nQ29uZGl0aW9ucyh4LCB5LCB6LCB2aWV3aW5nQ29uZGl0aW9ucykge1xuICAgICAgICAvLyBUcmFuc2Zvcm0gWFlaIHRvICdjb25lJy8ncmdiJyByZXNwb25zZXNcbiAgICAgICAgY29uc3QgckMgPSAwLjQwMTI4OCAqIHggKyAwLjY1MDE3MyAqIHkgLSAwLjA1MTQ2MSAqIHo7XG4gICAgICAgIGNvbnN0IGdDID0gLTAuMjUwMjY4ICogeCArIDEuMjA0NDE0ICogeSArIDAuMDQ1ODU0ICogejtcbiAgICAgICAgY29uc3QgYkMgPSAtMC4wMDIwNzkgKiB4ICsgMC4wNDg5NTIgKiB5ICsgMC45NTMxMjcgKiB6O1xuICAgICAgICAvLyBEaXNjb3VudCBpbGx1bWluYW50XG4gICAgICAgIGNvbnN0IHJEID0gdmlld2luZ0NvbmRpdGlvbnMucmdiRFswXSAqIHJDO1xuICAgICAgICBjb25zdCBnRCA9IHZpZXdpbmdDb25kaXRpb25zLnJnYkRbMV0gKiBnQztcbiAgICAgICAgY29uc3QgYkQgPSB2aWV3aW5nQ29uZGl0aW9ucy5yZ2JEWzJdICogYkM7XG4gICAgICAgIC8vIGNocm9tYXRpYyBhZGFwdGF0aW9uXG4gICAgICAgIGNvbnN0IHJBRiA9IE1hdGgucG93KHZpZXdpbmdDb25kaXRpb25zLmZsICogTWF0aC5hYnMockQpIC8gMTAwLjAsIDAuNDIpO1xuICAgICAgICBjb25zdCBnQUYgPSBNYXRoLnBvdyh2aWV3aW5nQ29uZGl0aW9ucy5mbCAqIE1hdGguYWJzKGdEKSAvIDEwMC4wLCAwLjQyKTtcbiAgICAgICAgY29uc3QgYkFGID0gTWF0aC5wb3codmlld2luZ0NvbmRpdGlvbnMuZmwgKiBNYXRoLmFicyhiRCkgLyAxMDAuMCwgMC40Mik7XG4gICAgICAgIGNvbnN0IHJBID0gbWF0aC5zaWdudW0ockQpICogNDAwLjAgKiByQUYgLyAockFGICsgMjcuMTMpO1xuICAgICAgICBjb25zdCBnQSA9IG1hdGguc2lnbnVtKGdEKSAqIDQwMC4wICogZ0FGIC8gKGdBRiArIDI3LjEzKTtcbiAgICAgICAgY29uc3QgYkEgPSBtYXRoLnNpZ251bShiRCkgKiA0MDAuMCAqIGJBRiAvIChiQUYgKyAyNy4xMyk7XG4gICAgICAgIC8vIHJlZG5lc3MtZ3JlZW5uZXNzXG4gICAgICAgIGNvbnN0IGEgPSAoMTEuMCAqIHJBICsgLTEyLjAgKiBnQSArIGJBKSAvIDExLjA7XG4gICAgICAgIC8vIHllbGxvd25lc3MtYmx1ZW5lc3NcbiAgICAgICAgY29uc3QgYiA9IChyQSArIGdBIC0gMi4wICogYkEpIC8gOS4wO1xuICAgICAgICAvLyBhdXhpbGlhcnkgY29tcG9uZW50c1xuICAgICAgICBjb25zdCB1ID0gKDIwLjAgKiByQSArIDIwLjAgKiBnQSArIDIxLjAgKiBiQSkgLyAyMC4wO1xuICAgICAgICBjb25zdCBwMiA9ICg0MC4wICogckEgKyAyMC4wICogZ0EgKyBiQSkgLyAyMC4wO1xuICAgICAgICAvLyBodWVcbiAgICAgICAgY29uc3QgYXRhbjIgPSBNYXRoLmF0YW4yKGIsIGEpO1xuICAgICAgICBjb25zdCBhdGFuRGVncmVlcyA9IGF0YW4yICogMTgwLjAgLyBNYXRoLlBJO1xuICAgICAgICBjb25zdCBodWUgPSBhdGFuRGVncmVlcyA8IDAgPyBhdGFuRGVncmVlcyArIDM2MC4wIDpcbiAgICAgICAgICAgIGF0YW5EZWdyZWVzID49IDM2MCA/IGF0YW5EZWdyZWVzIC0gMzYwIDpcbiAgICAgICAgICAgICAgICBhdGFuRGVncmVlcztcbiAgICAgICAgY29uc3QgaHVlUmFkaWFucyA9IGh1ZSAqIE1hdGguUEkgLyAxODAuMDtcbiAgICAgICAgLy8gYWNocm9tYXRpYyByZXNwb25zZSB0byBjb2xvclxuICAgICAgICBjb25zdCBhYyA9IHAyICogdmlld2luZ0NvbmRpdGlvbnMubmJiO1xuICAgICAgICAvLyBDQU0xNiBsaWdodG5lc3MgYW5kIGJyaWdodG5lc3NcbiAgICAgICAgY29uc3QgSiA9IDEwMC4wICpcbiAgICAgICAgICAgIE1hdGgucG93KGFjIC8gdmlld2luZ0NvbmRpdGlvbnMuYXcsIHZpZXdpbmdDb25kaXRpb25zLmMgKiB2aWV3aW5nQ29uZGl0aW9ucy56KTtcbiAgICAgICAgY29uc3QgUSA9ICg0LjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5jKSAqIE1hdGguc3FydChKIC8gMTAwLjApICpcbiAgICAgICAgICAgICh2aWV3aW5nQ29uZGl0aW9ucy5hdyArIDQuMCkgKiAodmlld2luZ0NvbmRpdGlvbnMuZkxSb290KTtcbiAgICAgICAgY29uc3QgaHVlUHJpbWUgPSAoaHVlIDwgMjAuMTQpID8gaHVlICsgMzYwIDogaHVlO1xuICAgICAgICBjb25zdCBlSHVlID0gKDEuMCAvIDQuMCkgKiAoTWF0aC5jb3MoaHVlUHJpbWUgKiBNYXRoLlBJIC8gMTgwLjAgKyAyLjApICsgMy44KTtcbiAgICAgICAgY29uc3QgcDEgPSA1MDAwMC4wIC8gMTMuMCAqIGVIdWUgKiB2aWV3aW5nQ29uZGl0aW9ucy5uYyAqIHZpZXdpbmdDb25kaXRpb25zLm5jYjtcbiAgICAgICAgY29uc3QgdCA9IHAxICogTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpIC8gKHUgKyAwLjMwNSk7XG4gICAgICAgIGNvbnN0IGFscGhhID0gTWF0aC5wb3codCwgMC45KSAqXG4gICAgICAgICAgICBNYXRoLnBvdygxLjY0IC0gTWF0aC5wb3coMC4yOSwgdmlld2luZ0NvbmRpdGlvbnMubiksIDAuNzMpO1xuICAgICAgICAvLyBDQU0xNiBjaHJvbWEsIGNvbG9yZnVsbmVzcywgY2hyb21hXG4gICAgICAgIGNvbnN0IEMgPSBhbHBoYSAqIE1hdGguc3FydChKIC8gMTAwLjApO1xuICAgICAgICBjb25zdCBNID0gQyAqIHZpZXdpbmdDb25kaXRpb25zLmZMUm9vdDtcbiAgICAgICAgY29uc3QgcyA9IDUwLjAgKlxuICAgICAgICAgICAgTWF0aC5zcXJ0KChhbHBoYSAqIHZpZXdpbmdDb25kaXRpb25zLmMpIC8gKHZpZXdpbmdDb25kaXRpb25zLmF3ICsgNC4wKSk7XG4gICAgICAgIC8vIENBTTE2LVVDUyBjb21wb25lbnRzXG4gICAgICAgIGNvbnN0IGpzdGFyID0gKDEuMCArIDEwMC4wICogMC4wMDcpICogSiAvICgxLjAgKyAwLjAwNyAqIEopO1xuICAgICAgICBjb25zdCBtc3RhciA9IE1hdGgubG9nKDEuMCArIDAuMDIyOCAqIE0pIC8gMC4wMjI4O1xuICAgICAgICBjb25zdCBhc3RhciA9IG1zdGFyICogTWF0aC5jb3MoaHVlUmFkaWFucyk7XG4gICAgICAgIGNvbnN0IGJzdGFyID0gbXN0YXIgKiBNYXRoLnNpbihodWVSYWRpYW5zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDYW0xNihodWUsIEMsIEosIFEsIE0sIHMsIGpzdGFyLCBhc3RhciwgYnN0YXIpO1xuICAgIH1cbiAgICAvLy8gWFlaIHJlcHJlc2VudGF0aW9uIG9mIENBTTE2IHNlZW4gaW4gW3ZpZXdpbmdDb25kaXRpb25zXS5cbiAgICB4eXpJblZpZXdpbmdDb25kaXRpb25zKHZpZXdpbmdDb25kaXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFscGhhID0gKHRoaXMuY2hyb21hID09PSAwLjAgfHwgdGhpcy5qID09PSAwLjApID9cbiAgICAgICAgICAgIDAuMCA6XG4gICAgICAgICAgICB0aGlzLmNocm9tYSAvIE1hdGguc3FydCh0aGlzLmogLyAxMDAuMCk7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLnBvdyhhbHBoYSAvIE1hdGgucG93KDEuNjQgLSBNYXRoLnBvdygwLjI5LCB2aWV3aW5nQ29uZGl0aW9ucy5uKSwgMC43MyksIDEuMCAvIDAuOSk7XG4gICAgICAgIGNvbnN0IGhSYWQgPSB0aGlzLmh1ZSAqIE1hdGguUEkgLyAxODAuMDtcbiAgICAgICAgY29uc3QgZUh1ZSA9IDAuMjUgKiAoTWF0aC5jb3MoaFJhZCArIDIuMCkgKyAzLjgpO1xuICAgICAgICBjb25zdCBhYyA9IHZpZXdpbmdDb25kaXRpb25zLmF3ICpcbiAgICAgICAgICAgIE1hdGgucG93KHRoaXMuaiAvIDEwMC4wLCAxLjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5jIC8gdmlld2luZ0NvbmRpdGlvbnMueik7XG4gICAgICAgIGNvbnN0IHAxID0gZUh1ZSAqICg1MDAwMC4wIC8gMTMuMCkgKiB2aWV3aW5nQ29uZGl0aW9ucy5uYyAqIHZpZXdpbmdDb25kaXRpb25zLm5jYjtcbiAgICAgICAgY29uc3QgcDIgPSAoYWMgLyB2aWV3aW5nQ29uZGl0aW9ucy5uYmIpO1xuICAgICAgICBjb25zdCBoU2luID0gTWF0aC5zaW4oaFJhZCk7XG4gICAgICAgIGNvbnN0IGhDb3MgPSBNYXRoLmNvcyhoUmFkKTtcbiAgICAgICAgY29uc3QgZ2FtbWEgPSAyMy4wICogKHAyICsgMC4zMDUpICogdCAvXG4gICAgICAgICAgICAoMjMuMCAqIHAxICsgMTEgKiB0ICogaENvcyArIDEwOC4wICogdCAqIGhTaW4pO1xuICAgICAgICBjb25zdCBhID0gZ2FtbWEgKiBoQ29zO1xuICAgICAgICBjb25zdCBiID0gZ2FtbWEgKiBoU2luO1xuICAgICAgICBjb25zdCByQSA9ICg0NjAuMCAqIHAyICsgNDUxLjAgKiBhICsgMjg4LjAgKiBiKSAvIDE0MDMuMDtcbiAgICAgICAgY29uc3QgZ0EgPSAoNDYwLjAgKiBwMiAtIDg5MS4wICogYSAtIDI2MS4wICogYikgLyAxNDAzLjA7XG4gICAgICAgIGNvbnN0IGJBID0gKDQ2MC4wICogcDIgLSAyMjAuMCAqIGEgLSA2MzAwLjAgKiBiKSAvIDE0MDMuMDtcbiAgICAgICAgY29uc3QgckNCYXNlID0gTWF0aC5tYXgoMCwgKDI3LjEzICogTWF0aC5hYnMockEpKSAvICg0MDAuMCAtIE1hdGguYWJzKHJBKSkpO1xuICAgICAgICBjb25zdCByQyA9IG1hdGguc2lnbnVtKHJBKSAqICgxMDAuMCAvIHZpZXdpbmdDb25kaXRpb25zLmZsKSAqXG4gICAgICAgICAgICBNYXRoLnBvdyhyQ0Jhc2UsIDEuMCAvIDAuNDIpO1xuICAgICAgICBjb25zdCBnQ0Jhc2UgPSBNYXRoLm1heCgwLCAoMjcuMTMgKiBNYXRoLmFicyhnQSkpIC8gKDQwMC4wIC0gTWF0aC5hYnMoZ0EpKSk7XG4gICAgICAgIGNvbnN0IGdDID0gbWF0aC5zaWdudW0oZ0EpICogKDEwMC4wIC8gdmlld2luZ0NvbmRpdGlvbnMuZmwpICpcbiAgICAgICAgICAgIE1hdGgucG93KGdDQmFzZSwgMS4wIC8gMC40Mik7XG4gICAgICAgIGNvbnN0IGJDQmFzZSA9IE1hdGgubWF4KDAsICgyNy4xMyAqIE1hdGguYWJzKGJBKSkgLyAoNDAwLjAgLSBNYXRoLmFicyhiQSkpKTtcbiAgICAgICAgY29uc3QgYkMgPSBtYXRoLnNpZ251bShiQSkgKiAoMTAwLjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5mbCkgKlxuICAgICAgICAgICAgTWF0aC5wb3coYkNCYXNlLCAxLjAgLyAwLjQyKTtcbiAgICAgICAgY29uc3QgckYgPSByQyAvIHZpZXdpbmdDb25kaXRpb25zLnJnYkRbMF07XG4gICAgICAgIGNvbnN0IGdGID0gZ0MgLyB2aWV3aW5nQ29uZGl0aW9ucy5yZ2JEWzFdO1xuICAgICAgICBjb25zdCBiRiA9IGJDIC8gdmlld2luZ0NvbmRpdGlvbnMucmdiRFsyXTtcbiAgICAgICAgY29uc3QgeCA9IDEuODYyMDY3ODYgKiByRiAtIDEuMDExMjU0NjMgKiBnRiArIDAuMTQ5MTg2NzcgKiBiRjtcbiAgICAgICAgY29uc3QgeSA9IDAuMzg3NTI2NTQgKiByRiArIDAuNjIxNDQ3NDQgKiBnRiAtIDAuMDA4OTczOTggKiBiRjtcbiAgICAgICAgY29uc3QgeiA9IC0wLjAxNTg0MTUwICogckYgLSAwLjAzNDEyMjk0ICogZ0YgKyAxLjA0OTk2NDQ0ICogYkY7XG4gICAgICAgIHJldHVybiBbeCwgeSwgel07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FtMTYuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC4gRG8gbm90IG1vZGlmeSBpdC5cbmltcG9ydCAqIGFzIGNvbG9yVXRpbHMgZnJvbSAnLi4vdXRpbHMvY29sb3JfdXRpbHMuanMnO1xuaW1wb3J0ICogYXMgbWF0aFV0aWxzIGZyb20gJy4uL3V0aWxzL21hdGhfdXRpbHMuanMnO1xuaW1wb3J0IHsgQ2FtMTYgfSBmcm9tICcuL2NhbTE2LmpzJztcbmltcG9ydCB7IFZpZXdpbmdDb25kaXRpb25zIH0gZnJvbSAnLi92aWV3aW5nX2NvbmRpdGlvbnMuanMnO1xuLy8gbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzIGlzIGRlc2lnbmVkIHRvIGhhdmUgYSBjb25zaXN0ZW50IEFQSSBhY3Jvc3Ncbi8vIHBsYXRmb3JtcyBhbmQgbW9kdWxhciBjb21wb25lbnRzIHRoYXQgY2FuIGJlIG1vdmVkIGFyb3VuZCBlYXNpbHkuIFVzaW5nIGFcbi8vIGNsYXNzIGFzIGEgbmFtZXNwYWNlIGZhY2lsaXRhdGVzIHRoaXMuXG4vL1xuLy8gdHNsaW50OmRpc2FibGU6Y2xhc3MtYXMtbmFtZXNwYWNlXG4vKipcbiAqIEEgY2xhc3MgdGhhdCBzb2x2ZXMgdGhlIEhDVCBlcXVhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEhjdFNvbHZlciB7XG4gICAgLyoqXG4gICAgICogU2FuaXRpemVzIGEgc21hbGwgZW5vdWdoIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW5nbGUgQW4gYW5nbGUgaW4gcmFkaWFuczsgbXVzdCBub3QgZGV2aWF0ZSB0b28gbXVjaFxuICAgICAqIGZyb20gMC5cbiAgICAgKiBAcmV0dXJuIEEgY290ZXJtaW5hbCBhbmdsZSBiZXR3ZWVuIDAgYW5kIDJwaS5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2FuaXRpemVSYWRpYW5zKGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiAoYW5nbGUgKyBNYXRoLlBJICogOCkgJSAoTWF0aC5QSSAqIDIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxpbmVhcml6ZXMgYW4gUkdCIGNvbXBvbmVudCwgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnRcbiAgICAgKiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmdiQ29tcG9uZW50IDAuMCA8PSByZ2JfY29tcG9uZW50IDw9IDEwMC4wLCByZXByZXNlbnRzXG4gICAgICogbGluZWFyIFIvRy9CIGNoYW5uZWxcbiAgICAgKiBAcmV0dXJuIDAuMCA8PSBvdXRwdXQgPD0gMjU1LjAsIGNvbG9yIGNoYW5uZWwgY29udmVydGVkIHRvXG4gICAgICogcmVndWxhciBSR0Igc3BhY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgdHJ1ZURlbGluZWFyaXplZChyZ2JDb21wb25lbnQpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IHJnYkNvbXBvbmVudCAvIDEwMC4wO1xuICAgICAgICBsZXQgZGVsaW5lYXJpemVkID0gMC4wO1xuICAgICAgICBpZiAobm9ybWFsaXplZCA8PSAwLjAwMzEzMDgpIHtcbiAgICAgICAgICAgIGRlbGluZWFyaXplZCA9IG5vcm1hbGl6ZWQgKiAxMi45MjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGluZWFyaXplZCA9IDEuMDU1ICogTWF0aC5wb3cobm9ybWFsaXplZCwgMS4wIC8gMi40KSAtIDAuMDU1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxpbmVhcml6ZWQgKiAyNTUuMDtcbiAgICB9XG4gICAgc3RhdGljIGNocm9tYXRpY0FkYXB0YXRpb24oY29tcG9uZW50KSB7XG4gICAgICAgIGNvbnN0IGFmID0gTWF0aC5wb3coTWF0aC5hYnMoY29tcG9uZW50KSwgMC40Mik7XG4gICAgICAgIHJldHVybiBtYXRoVXRpbHMuc2lnbnVtKGNvbXBvbmVudCkgKiA0MDAuMCAqIGFmIC8gKGFmICsgMjcuMTMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBodWUgb2YgYSBsaW5lYXIgUkdCIGNvbG9yIGluIENBTTE2LlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbnJnYiBUaGUgbGluZWFyIFJHQiBjb29yZGluYXRlcyBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gVGhlIGh1ZSBvZiB0aGUgY29sb3IgaW4gQ0FNMTYsIGluIHJhZGlhbnMuXG4gICAgICovXG4gICAgc3RhdGljIGh1ZU9mKGxpbnJnYikge1xuICAgICAgICBjb25zdCBzY2FsZWREaXNjb3VudCA9IG1hdGhVdGlscy5tYXRyaXhNdWx0aXBseShsaW5yZ2IsIEhjdFNvbHZlci5TQ0FMRURfRElTQ09VTlRfRlJPTV9MSU5SR0IpO1xuICAgICAgICBjb25zdCByQSA9IEhjdFNvbHZlci5jaHJvbWF0aWNBZGFwdGF0aW9uKHNjYWxlZERpc2NvdW50WzBdKTtcbiAgICAgICAgY29uc3QgZ0EgPSBIY3RTb2x2ZXIuY2hyb21hdGljQWRhcHRhdGlvbihzY2FsZWREaXNjb3VudFsxXSk7XG4gICAgICAgIGNvbnN0IGJBID0gSGN0U29sdmVyLmNocm9tYXRpY0FkYXB0YXRpb24oc2NhbGVkRGlzY291bnRbMl0pO1xuICAgICAgICAvLyByZWRuZXNzLWdyZWVubmVzc1xuICAgICAgICBjb25zdCBhID0gKDExLjAgKiByQSArIC0xMi4wICogZ0EgKyBiQSkgLyAxMS4wO1xuICAgICAgICAvLyB5ZWxsb3duZXNzLWJsdWVuZXNzXG4gICAgICAgIGNvbnN0IGIgPSAockEgKyBnQSAtIDIuMCAqIGJBKSAvIDkuMDtcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIoYiwgYSk7XG4gICAgfVxuICAgIHN0YXRpYyBhcmVJbkN5Y2xpY09yZGVyKGEsIGIsIGMpIHtcbiAgICAgICAgY29uc3QgZGVsdGFBQiA9IEhjdFNvbHZlci5zYW5pdGl6ZVJhZGlhbnMoYiAtIGEpO1xuICAgICAgICBjb25zdCBkZWx0YUFDID0gSGN0U29sdmVyLnNhbml0aXplUmFkaWFucyhjIC0gYSk7XG4gICAgICAgIHJldHVybiBkZWx0YUFCIDwgZGVsdGFBQztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU29sdmVzIHRoZSBsZXJwIGVxdWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZSBUaGUgc3RhcnRpbmcgbnVtYmVyLlxuICAgICAqIEBwYXJhbSBtaWQgVGhlIG51bWJlciBpbiB0aGUgbWlkZGxlLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIGVuZGluZyBudW1iZXIuXG4gICAgICogQHJldHVybiBBIG51bWJlciB0IHN1Y2ggdGhhdCBsZXJwKHNvdXJjZSwgdGFyZ2V0LCB0KSA9IG1pZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50ZXJjZXB0KHNvdXJjZSwgbWlkLCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIChtaWQgLSBzb3VyY2UpIC8gKHRhcmdldCAtIHNvdXJjZSk7XG4gICAgfVxuICAgIHN0YXRpYyBsZXJwUG9pbnQoc291cmNlLCB0LCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHNvdXJjZVswXSArICh0YXJnZXRbMF0gLSBzb3VyY2VbMF0pICogdCxcbiAgICAgICAgICAgIHNvdXJjZVsxXSArICh0YXJnZXRbMV0gLSBzb3VyY2VbMV0pICogdCxcbiAgICAgICAgICAgIHNvdXJjZVsyXSArICh0YXJnZXRbMl0gLSBzb3VyY2VbMl0pICogdCxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJzZWN0cyBhIHNlZ21lbnQgd2l0aCBhIHBsYW5lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZSBUaGUgY29vcmRpbmF0ZXMgb2YgcG9pbnQgQS5cbiAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZSBUaGUgUi0sIEctLCBvciBCLWNvb3JkaW5hdGUgb2YgdGhlIHBsYW5lLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIGNvb3JkaW5hdGVzIG9mIHBvaW50IEIuXG4gICAgICogQHBhcmFtIGF4aXMgVGhlIGF4aXMgdGhlIHBsYW5lIGlzIHBlcnBlbmRpY3VsYXIgd2l0aC4gKDA6IFIsIDE6XG4gICAgICogRywgMjogQilcbiAgICAgKiBAcmV0dXJuIFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgb2YgdGhlIHNlZ21lbnQgQUIgd2l0aCB0aGUgcGxhbmVcbiAgICAgKiBSPWNvb3JkaW5hdGUsIEc9Y29vcmRpbmF0ZSwgb3IgQj1jb29yZGluYXRlXG4gICAgICovXG4gICAgc3RhdGljIHNldENvb3JkaW5hdGUoc291cmNlLCBjb29yZGluYXRlLCB0YXJnZXQsIGF4aXMpIHtcbiAgICAgICAgY29uc3QgdCA9IEhjdFNvbHZlci5pbnRlcmNlcHQoc291cmNlW2F4aXNdLCBjb29yZGluYXRlLCB0YXJnZXRbYXhpc10pO1xuICAgICAgICByZXR1cm4gSGN0U29sdmVyLmxlcnBQb2ludChzb3VyY2UsIHQsIHRhcmdldCk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0JvdW5kZWQoeCkge1xuICAgICAgICByZXR1cm4gMC4wIDw9IHggJiYgeCA8PSAxMDAuMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnRoIHBvc3NpYmxlIHZlcnRleCBvZiB0aGUgcG9seWdvbmFsIGludGVyc2VjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB5IFRoZSBZIHZhbHVlIG9mIHRoZSBwbGFuZS5cbiAgICAgKiBAcGFyYW0gbiBUaGUgemVyby1iYXNlZCBpbmRleCBvZiB0aGUgcG9pbnQuIDAgPD0gbiA8PSAxMS5cbiAgICAgKiBAcmV0dXJuIFRoZSBudGggcG9zc2libGUgdmVydGV4IG9mIHRoZSBwb2x5Z29uYWwgaW50ZXJzZWN0aW9uXG4gICAgICogb2YgdGhlIHkgcGxhbmUgYW5kIHRoZSBSR0IgY3ViZSwgaW4gbGluZWFyIFJHQiBjb29yZGluYXRlcywgaWZcbiAgICAgKiBpdCBleGlzdHMuIElmIHRoaXMgcG9zc2libGUgdmVydGV4IGxpZXMgb3V0c2lkZSBvZiB0aGUgY3ViZSxcbiAgICAgKiBbLTEuMCwgLTEuMCwgLTEuMF0gaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgc3RhdGljIG50aFZlcnRleCh5LCBuKSB7XG4gICAgICAgIGNvbnN0IGtSID0gSGN0U29sdmVyLllfRlJPTV9MSU5SR0JbMF07XG4gICAgICAgIGNvbnN0IGtHID0gSGN0U29sdmVyLllfRlJPTV9MSU5SR0JbMV07XG4gICAgICAgIGNvbnN0IGtCID0gSGN0U29sdmVyLllfRlJPTV9MSU5SR0JbMl07XG4gICAgICAgIGNvbnN0IGNvb3JkQSA9IG4gJSA0IDw9IDEgPyAwLjAgOiAxMDAuMDtcbiAgICAgICAgY29uc3QgY29vcmRCID0gbiAlIDIgPT09IDAgPyAwLjAgOiAxMDAuMDtcbiAgICAgICAgaWYgKG4gPCA0KSB7XG4gICAgICAgICAgICBjb25zdCBnID0gY29vcmRBO1xuICAgICAgICAgICAgY29uc3QgYiA9IGNvb3JkQjtcbiAgICAgICAgICAgIGNvbnN0IHIgPSAoeSAtIGcgKiBrRyAtIGIgKiBrQikgLyBrUjtcbiAgICAgICAgICAgIGlmIChIY3RTb2x2ZXIuaXNCb3VuZGVkKHIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtyLCBnLCBiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBbLTEuMCwgLTEuMCwgLTEuMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobiA8IDgpIHtcbiAgICAgICAgICAgIGNvbnN0IGIgPSBjb29yZEE7XG4gICAgICAgICAgICBjb25zdCByID0gY29vcmRCO1xuICAgICAgICAgICAgY29uc3QgZyA9ICh5IC0gciAqIGtSIC0gYiAqIGtCKSAvIGtHO1xuICAgICAgICAgICAgaWYgKEhjdFNvbHZlci5pc0JvdW5kZWQoZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3IsIGcsIGJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFstMS4wLCAtMS4wLCAtMS4wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBjb29yZEE7XG4gICAgICAgICAgICBjb25zdCBnID0gY29vcmRCO1xuICAgICAgICAgICAgY29uc3QgYiA9ICh5IC0gciAqIGtSIC0gZyAqIGtHKSAvIGtCO1xuICAgICAgICAgICAgaWYgKEhjdFNvbHZlci5pc0JvdW5kZWQoYikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3IsIGcsIGJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFstMS4wLCAtMS4wLCAtMS4wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgc2VnbWVudCBjb250YWluaW5nIHRoZSBkZXNpcmVkIGNvbG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHkgVGhlIFkgdmFsdWUgb2YgdGhlIGNvbG9yLlxuICAgICAqIEBwYXJhbSB0YXJnZXRIdWUgVGhlIGh1ZSBvZiB0aGUgY29sb3IuXG4gICAgICogQHJldHVybiBBIGxpc3Qgb2YgdHdvIHNldHMgb2YgbGluZWFyIFJHQiBjb29yZGluYXRlcywgZWFjaFxuICAgICAqIGNvcnJlc3BvbmRpbmcgdG8gYW4gZW5kcG9pbnQgb2YgdGhlIHNlZ21lbnQgY29udGFpbmluZyB0aGVcbiAgICAgKiBkZXNpcmVkIGNvbG9yLlxuICAgICAqL1xuICAgIHN0YXRpYyBiaXNlY3RUb1NlZ21lbnQoeSwgdGFyZ2V0SHVlKSB7XG4gICAgICAgIGxldCBsZWZ0ID0gWy0xLjAsIC0xLjAsIC0xLjBdO1xuICAgICAgICBsZXQgcmlnaHQgPSBsZWZ0O1xuICAgICAgICBsZXQgbGVmdEh1ZSA9IDAuMDtcbiAgICAgICAgbGV0IHJpZ2h0SHVlID0gMC4wO1xuICAgICAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHVuY3V0ID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCAxMjsgbisrKSB7XG4gICAgICAgICAgICBjb25zdCBtaWQgPSBIY3RTb2x2ZXIubnRoVmVydGV4KHksIG4pO1xuICAgICAgICAgICAgaWYgKG1pZFswXSA8IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1pZEh1ZSA9IEhjdFNvbHZlci5odWVPZihtaWQpO1xuICAgICAgICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIGxlZnQgPSBtaWQ7XG4gICAgICAgICAgICAgICAgcmlnaHQgPSBtaWQ7XG4gICAgICAgICAgICAgICAgbGVmdEh1ZSA9IG1pZEh1ZTtcbiAgICAgICAgICAgICAgICByaWdodEh1ZSA9IG1pZEh1ZTtcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5jdXQgfHwgSGN0U29sdmVyLmFyZUluQ3ljbGljT3JkZXIobGVmdEh1ZSwgbWlkSHVlLCByaWdodEh1ZSkpIHtcbiAgICAgICAgICAgICAgICB1bmN1dCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChIY3RTb2x2ZXIuYXJlSW5DeWNsaWNPcmRlcihsZWZ0SHVlLCB0YXJnZXRIdWUsIG1pZEh1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBtaWQ7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0SHVlID0gbWlkSHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IG1pZDtcbiAgICAgICAgICAgICAgICAgICAgbGVmdEh1ZSA9IG1pZEh1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtsZWZ0LCByaWdodF07XG4gICAgfVxuICAgIHN0YXRpYyBtaWRwb2ludChhLCBiKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAoYVswXSArIGJbMF0pIC8gMixcbiAgICAgICAgICAgIChhWzFdICsgYlsxXSkgLyAyLFxuICAgICAgICAgICAgKGFbMl0gKyBiWzJdKSAvIDIsXG4gICAgICAgIF07XG4gICAgfVxuICAgIHN0YXRpYyBjcml0aWNhbFBsYW5lQmVsb3coeCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih4IC0gMC41KTtcbiAgICB9XG4gICAgc3RhdGljIGNyaXRpY2FsUGxhbmVBYm92ZSh4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoeCAtIDAuNSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmRzIGEgY29sb3Igd2l0aCB0aGUgZ2l2ZW4gWSBhbmQgaHVlIG9uIHRoZSBib3VuZGFyeSBvZiB0aGVcbiAgICAgKiBjdWJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHkgVGhlIFkgdmFsdWUgb2YgdGhlIGNvbG9yLlxuICAgICAqIEBwYXJhbSB0YXJnZXRIdWUgVGhlIGh1ZSBvZiB0aGUgY29sb3IuXG4gICAgICogQHJldHVybiBUaGUgZGVzaXJlZCBjb2xvciwgaW4gbGluZWFyIFJHQiBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgYmlzZWN0VG9MaW1pdCh5LCB0YXJnZXRIdWUpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IEhjdFNvbHZlci5iaXNlY3RUb1NlZ21lbnQoeSwgdGFyZ2V0SHVlKTtcbiAgICAgICAgbGV0IGxlZnQgPSBzZWdtZW50WzBdO1xuICAgICAgICBsZXQgbGVmdEh1ZSA9IEhjdFNvbHZlci5odWVPZihsZWZ0KTtcbiAgICAgICAgbGV0IHJpZ2h0ID0gc2VnbWVudFsxXTtcbiAgICAgICAgZm9yIChsZXQgYXhpcyA9IDA7IGF4aXMgPCAzOyBheGlzKyspIHtcbiAgICAgICAgICAgIGlmIChsZWZ0W2F4aXNdICE9PSByaWdodFtheGlzXSkge1xuICAgICAgICAgICAgICAgIGxldCBsUGxhbmUgPSAtMTtcbiAgICAgICAgICAgICAgICBsZXQgclBsYW5lID0gMjU1O1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0W2F4aXNdIDwgcmlnaHRbYXhpc10pIHtcbiAgICAgICAgICAgICAgICAgICAgbFBsYW5lID0gSGN0U29sdmVyLmNyaXRpY2FsUGxhbmVCZWxvdyhIY3RTb2x2ZXIudHJ1ZURlbGluZWFyaXplZChsZWZ0W2F4aXNdKSk7XG4gICAgICAgICAgICAgICAgICAgIHJQbGFuZSA9IEhjdFNvbHZlci5jcml0aWNhbFBsYW5lQWJvdmUoSGN0U29sdmVyLnRydWVEZWxpbmVhcml6ZWQocmlnaHRbYXhpc10pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxQbGFuZSA9IEhjdFNvbHZlci5jcml0aWNhbFBsYW5lQWJvdmUoSGN0U29sdmVyLnRydWVEZWxpbmVhcml6ZWQobGVmdFtheGlzXSkpO1xuICAgICAgICAgICAgICAgICAgICByUGxhbmUgPSBIY3RTb2x2ZXIuY3JpdGljYWxQbGFuZUJlbG93KEhjdFNvbHZlci50cnVlRGVsaW5lYXJpemVkKHJpZ2h0W2F4aXNdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhyUGxhbmUgLSBsUGxhbmUpIDw9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbVBsYW5lID0gTWF0aC5mbG9vcigobFBsYW5lICsgclBsYW5lKSAvIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWRQbGFuZUNvb3JkaW5hdGUgPSBIY3RTb2x2ZXIuQ1JJVElDQUxfUExBTkVTW21QbGFuZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWQgPSBIY3RTb2x2ZXIuc2V0Q29vcmRpbmF0ZShsZWZ0LCBtaWRQbGFuZUNvb3JkaW5hdGUsIHJpZ2h0LCBheGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pZEh1ZSA9IEhjdFNvbHZlci5odWVPZihtaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEhjdFNvbHZlci5hcmVJbkN5Y2xpY09yZGVyKGxlZnRIdWUsIHRhcmdldEh1ZSwgbWlkSHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gbWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJQbGFuZSA9IG1QbGFuZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBtaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdEh1ZSA9IG1pZEh1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsUGxhbmUgPSBtUGxhbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEhjdFNvbHZlci5taWRwb2ludChsZWZ0LCByaWdodCk7XG4gICAgfVxuICAgIHN0YXRpYyBpbnZlcnNlQ2hyb21hdGljQWRhcHRhdGlvbihhZGFwdGVkKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZWRBYnMgPSBNYXRoLmFicyhhZGFwdGVkKTtcbiAgICAgICAgY29uc3QgYmFzZSA9IE1hdGgubWF4KDAsIDI3LjEzICogYWRhcHRlZEFicyAvICg0MDAuMCAtIGFkYXB0ZWRBYnMpKTtcbiAgICAgICAgcmV0dXJuIG1hdGhVdGlscy5zaWdudW0oYWRhcHRlZCkgKiBNYXRoLnBvdyhiYXNlLCAxLjAgLyAwLjQyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgYSBjb2xvciB3aXRoIHRoZSBnaXZlbiBodWUsIGNocm9tYSwgYW5kIFkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHVlUmFkaWFucyBUaGUgZGVzaXJlZCBodWUgaW4gcmFkaWFucy5cbiAgICAgKiBAcGFyYW0gY2hyb21hIFRoZSBkZXNpcmVkIGNocm9tYS5cbiAgICAgKiBAcGFyYW0geSBUaGUgZGVzaXJlZCBZLlxuICAgICAqIEByZXR1cm4gVGhlIGRlc2lyZWQgY29sb3IgYXMgYSBoZXhhZGVjaW1hbCBpbnRlZ2VyLCBpZiBmb3VuZDsgMFxuICAgICAqIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZmluZFJlc3VsdEJ5SihodWVSYWRpYW5zLCBjaHJvbWEsIHkpIHtcbiAgICAgICAgLy8gSW5pdGlhbCBlc3RpbWF0ZSBvZiBqLlxuICAgICAgICBsZXQgaiA9IE1hdGguc3FydCh5KSAqIDExLjA7XG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8vIE9wZXJhdGlvbnMgaW5saW5lZCBmcm9tIENhbTE2IHRvIGF2b2lkIHJlcGVhdGVkIGNhbGN1bGF0aW9uXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIGNvbnN0IHZpZXdpbmdDb25kaXRpb25zID0gVmlld2luZ0NvbmRpdGlvbnMuREVGQVVMVDtcbiAgICAgICAgY29uc3QgdElubmVyQ29lZmYgPSAxIC8gTWF0aC5wb3coMS42NCAtIE1hdGgucG93KDAuMjksIHZpZXdpbmdDb25kaXRpb25zLm4pLCAwLjczKTtcbiAgICAgICAgY29uc3QgZUh1ZSA9IDAuMjUgKiAoTWF0aC5jb3MoaHVlUmFkaWFucyArIDIuMCkgKyAzLjgpO1xuICAgICAgICBjb25zdCBwMSA9IGVIdWUgKiAoNTAwMDAuMCAvIDEzLjApICogdmlld2luZ0NvbmRpdGlvbnMubmMgKiB2aWV3aW5nQ29uZGl0aW9ucy5uY2I7XG4gICAgICAgIGNvbnN0IGhTaW4gPSBNYXRoLnNpbihodWVSYWRpYW5zKTtcbiAgICAgICAgY29uc3QgaENvcyA9IE1hdGguY29zKGh1ZVJhZGlhbnMpO1xuICAgICAgICBmb3IgKGxldCBpdGVyYXRpb25Sb3VuZCA9IDA7IGl0ZXJhdGlvblJvdW5kIDwgNTsgaXRlcmF0aW9uUm91bmQrKykge1xuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8vIE9wZXJhdGlvbnMgaW5saW5lZCBmcm9tIENhbTE2IHRvIGF2b2lkIHJlcGVhdGVkIGNhbGN1bGF0aW9uXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgY29uc3Qgak5vcm1hbGl6ZWQgPSBqIC8gMTAwLjA7XG4gICAgICAgICAgICBjb25zdCBhbHBoYSA9IGNocm9tYSA9PT0gMC4wIHx8IGogPT09IDAuMCA/IDAuMCA6IGNocm9tYSAvIE1hdGguc3FydChqTm9ybWFsaXplZCk7XG4gICAgICAgICAgICBjb25zdCB0ID0gTWF0aC5wb3coYWxwaGEgKiB0SW5uZXJDb2VmZiwgMS4wIC8gMC45KTtcbiAgICAgICAgICAgIGNvbnN0IGFjID0gdmlld2luZ0NvbmRpdGlvbnMuYXcgKlxuICAgICAgICAgICAgICAgIE1hdGgucG93KGpOb3JtYWxpemVkLCAxLjAgLyB2aWV3aW5nQ29uZGl0aW9ucy5jIC8gdmlld2luZ0NvbmRpdGlvbnMueik7XG4gICAgICAgICAgICBjb25zdCBwMiA9IGFjIC8gdmlld2luZ0NvbmRpdGlvbnMubmJiO1xuICAgICAgICAgICAgY29uc3QgZ2FtbWEgPSAyMy4wICogKHAyICsgMC4zMDUpICogdCAvXG4gICAgICAgICAgICAgICAgKDIzLjAgKiBwMSArIDExICogdCAqIGhDb3MgKyAxMDguMCAqIHQgKiBoU2luKTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBnYW1tYSAqIGhDb3M7XG4gICAgICAgICAgICBjb25zdCBiID0gZ2FtbWEgKiBoU2luO1xuICAgICAgICAgICAgY29uc3QgckEgPSAoNDYwLjAgKiBwMiArIDQ1MS4wICogYSArIDI4OC4wICogYikgLyAxNDAzLjA7XG4gICAgICAgICAgICBjb25zdCBnQSA9ICg0NjAuMCAqIHAyIC0gODkxLjAgKiBhIC0gMjYxLjAgKiBiKSAvIDE0MDMuMDtcbiAgICAgICAgICAgIGNvbnN0IGJBID0gKDQ2MC4wICogcDIgLSAyMjAuMCAqIGEgLSA2MzAwLjAgKiBiKSAvIDE0MDMuMDtcbiAgICAgICAgICAgIGNvbnN0IHJDU2NhbGVkID0gSGN0U29sdmVyLmludmVyc2VDaHJvbWF0aWNBZGFwdGF0aW9uKHJBKTtcbiAgICAgICAgICAgIGNvbnN0IGdDU2NhbGVkID0gSGN0U29sdmVyLmludmVyc2VDaHJvbWF0aWNBZGFwdGF0aW9uKGdBKTtcbiAgICAgICAgICAgIGNvbnN0IGJDU2NhbGVkID0gSGN0U29sdmVyLmludmVyc2VDaHJvbWF0aWNBZGFwdGF0aW9uKGJBKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbnJnYiA9IG1hdGhVdGlscy5tYXRyaXhNdWx0aXBseShbckNTY2FsZWQsIGdDU2NhbGVkLCBiQ1NjYWxlZF0sIEhjdFNvbHZlci5MSU5SR0JfRlJPTV9TQ0FMRURfRElTQ09VTlQpO1xuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8vIE9wZXJhdGlvbnMgaW5saW5lZCBmcm9tIENhbTE2IHRvIGF2b2lkIHJlcGVhdGVkIGNhbGN1bGF0aW9uXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgaWYgKGxpbnJnYlswXSA8IDAgfHwgbGlucmdiWzFdIDwgMCB8fCBsaW5yZ2JbMl0gPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrUiA9IEhjdFNvbHZlci5ZX0ZST01fTElOUkdCWzBdO1xuICAgICAgICAgICAgY29uc3Qga0cgPSBIY3RTb2x2ZXIuWV9GUk9NX0xJTlJHQlsxXTtcbiAgICAgICAgICAgIGNvbnN0IGtCID0gSGN0U29sdmVyLllfRlJPTV9MSU5SR0JbMl07XG4gICAgICAgICAgICBjb25zdCBmbmogPSBrUiAqIGxpbnJnYlswXSArIGtHICogbGlucmdiWzFdICsga0IgKiBsaW5yZ2JbMl07XG4gICAgICAgICAgICBpZiAoZm5qIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVyYXRpb25Sb3VuZCA9PT0gNCB8fCBNYXRoLmFicyhmbmogLSB5KSA8IDAuMDAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbnJnYlswXSA+IDEwMC4wMSB8fCBsaW5yZ2JbMV0gPiAxMDAuMDEgfHwgbGlucmdiWzJdID4gMTAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JVdGlscy5hcmdiRnJvbUxpbnJnYihsaW5yZ2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSXRlcmF0ZXMgd2l0aCBOZXd0b24gbWV0aG9kLFxuICAgICAgICAgICAgLy8gVXNpbmcgMiAqIGZuKGopIC8gaiBhcyB0aGUgYXBwcm94aW1hdGlvbiBvZiBmbicoailcbiAgICAgICAgICAgIGogPSBqIC0gKGZuaiAtIHkpICogaiAvICgyICogZm5qKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgYW4gc1JHQiBjb2xvciB3aXRoIHRoZSBnaXZlbiBodWUsIGNocm9tYSwgYW5kIEwqLCBpZlxuICAgICAqIHBvc3NpYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGh1ZURlZ3JlZXMgVGhlIGRlc2lyZWQgaHVlLCBpbiBkZWdyZWVzLlxuICAgICAqIEBwYXJhbSBjaHJvbWEgVGhlIGRlc2lyZWQgY2hyb21hLlxuICAgICAqIEBwYXJhbSBsc3RhciBUaGUgZGVzaXJlZCBMKi5cbiAgICAgKiBAcmV0dXJuIEEgaGV4YWRlY2ltYWwgcmVwcmVzZW50aW5nIHRoZSBzUkdCIGNvbG9yLiBUaGUgY29sb3JcbiAgICAgKiBoYXMgc3VmZmljaWVudGx5IGNsb3NlIGh1ZSwgY2hyb21hLCBhbmQgTCogdG8gdGhlIGRlc2lyZWRcbiAgICAgKiB2YWx1ZXMsIGlmIHBvc3NpYmxlOyBvdGhlcndpc2UsIHRoZSBodWUgYW5kIEwqIHdpbGwgYmVcbiAgICAgKiBzdWZmaWNpZW50bHkgY2xvc2UsIGFuZCBjaHJvbWEgd2lsbCBiZSBtYXhpbWl6ZWQuXG4gICAgICovXG4gICAgc3RhdGljIHNvbHZlVG9JbnQoaHVlRGVncmVlcywgY2hyb21hLCBsc3Rhcikge1xuICAgICAgICBpZiAoY2hyb21hIDwgMC4wMDAxIHx8IGxzdGFyIDwgMC4wMDAxIHx8IGxzdGFyID4gOTkuOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yVXRpbHMuYXJnYkZyb21Mc3Rhcihsc3Rhcik7XG4gICAgICAgIH1cbiAgICAgICAgaHVlRGVncmVlcyA9IG1hdGhVdGlscy5zYW5pdGl6ZURlZ3JlZXNEb3VibGUoaHVlRGVncmVlcyk7XG4gICAgICAgIGNvbnN0IGh1ZVJhZGlhbnMgPSBodWVEZWdyZWVzIC8gMTgwICogTWF0aC5QSTtcbiAgICAgICAgY29uc3QgeSA9IGNvbG9yVXRpbHMueUZyb21Mc3Rhcihsc3Rhcik7XG4gICAgICAgIGNvbnN0IGV4YWN0QW5zd2VyID0gSGN0U29sdmVyLmZpbmRSZXN1bHRCeUooaHVlUmFkaWFucywgY2hyb21hLCB5KTtcbiAgICAgICAgaWYgKGV4YWN0QW5zd2VyICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhhY3RBbnN3ZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlucmdiID0gSGN0U29sdmVyLmJpc2VjdFRvTGltaXQoeSwgaHVlUmFkaWFucyk7XG4gICAgICAgIHJldHVybiBjb2xvclV0aWxzLmFyZ2JGcm9tTGlucmdiKGxpbnJnYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFuIHNSR0IgY29sb3Igd2l0aCB0aGUgZ2l2ZW4gaHVlLCBjaHJvbWEsIGFuZCBMKiwgaWZcbiAgICAgKiBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodWVEZWdyZWVzIFRoZSBkZXNpcmVkIGh1ZSwgaW4gZGVncmVlcy5cbiAgICAgKiBAcGFyYW0gY2hyb21hIFRoZSBkZXNpcmVkIGNocm9tYS5cbiAgICAgKiBAcGFyYW0gbHN0YXIgVGhlIGRlc2lyZWQgTCouXG4gICAgICogQHJldHVybiBBbiBDQU0xNiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzUkdCIGNvbG9yLiBUaGUgY29sb3JcbiAgICAgKiBoYXMgc3VmZmljaWVudGx5IGNsb3NlIGh1ZSwgY2hyb21hLCBhbmQgTCogdG8gdGhlIGRlc2lyZWRcbiAgICAgKiB2YWx1ZXMsIGlmIHBvc3NpYmxlOyBvdGhlcndpc2UsIHRoZSBodWUgYW5kIEwqIHdpbGwgYmVcbiAgICAgKiBzdWZmaWNpZW50bHkgY2xvc2UsIGFuZCBjaHJvbWEgd2lsbCBiZSBtYXhpbWl6ZWQuXG4gICAgICovXG4gICAgc3RhdGljIHNvbHZlVG9DYW0oaHVlRGVncmVlcywgY2hyb21hLCBsc3Rhcikge1xuICAgICAgICByZXR1cm4gQ2FtMTYuZnJvbUludChIY3RTb2x2ZXIuc29sdmVUb0ludChodWVEZWdyZWVzLCBjaHJvbWEsIGxzdGFyKSk7XG4gICAgfVxufVxuSGN0U29sdmVyLlNDQUxFRF9ESVNDT1VOVF9GUk9NX0xJTlJHQiA9IFtcbiAgICBbXG4gICAgICAgIDAuMDAxMjAwODMzNTY4Nzg0NTA0LFxuICAgICAgICAwLjAwMjM4OTY5NDQ5MjE3MDg4OSxcbiAgICAgICAgMC4wMDAyNzk1NzQyODg1ODYxMTI0LFxuICAgIF0sXG4gICAgW1xuICAgICAgICAwLjAwMDU4OTEwODY2NTEzNzU5OTksXG4gICAgICAgIDAuMDAyOTc4NTUwMjU3MzQzODc1OCxcbiAgICAgICAgMC4wMDAzMjcwNjY2MTA0MDA4Mzk4LFxuICAgIF0sXG4gICAgW1xuICAgICAgICAwLjAwMDEwMTQ2NjkyNDkxNjQwNTcyLFxuICAgICAgICAwLjAwMDUzNjQyMTQzNTkxODY2OTQsXG4gICAgICAgIDAuMDAzMjk3OTQwMTc3MDcxMjA3NixcbiAgICBdLFxuXTtcbkhjdFNvbHZlci5MSU5SR0JfRlJPTV9TQ0FMRURfRElTQ09VTlQgPSBbXG4gICAgW1xuICAgICAgICAxMzczLjIxOTg3MDk1OTQyMzEsXG4gICAgICAgIC0xMTAwLjQyNTExOTA3NTQ4MjEsXG4gICAgICAgIC03LjI3ODY4MTA4OTEwMTIxMyxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgLTI3MS44MTU5NjkwNzc5MDMsXG4gICAgICAgIDU1OS42NTgwNDY1OTQwNzMzLFxuICAgICAgICAtMzIuNDYwNDc0ODI3OTExOTQsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDEuOTYyMjg5OTU5OTY2NTY2NixcbiAgICAgICAgLTU3LjE3MzgxNDUzODg0NDAwNixcbiAgICAgICAgMzA4LjcyMzMxOTc4MTIzODUsXG4gICAgXSxcbl07XG5IY3RTb2x2ZXIuWV9GUk9NX0xJTlJHQiA9IFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXTtcbkhjdFNvbHZlci5DUklUSUNBTF9QTEFORVMgPSBbXG4gICAgMC4wMTUxNzYzNDkxNzc0NDE4NzYsIDAuMDQ1NTI5MDQ3NTMyMzI1NjI0LCAwLjA3NTg4MTc0NTg4NzIwOTM4LFxuICAgIDAuMTA2MjM0NDQ0MjQyMDkzMTMsIDAuMTM2NTg3MTQyNTk2OTc2ODUsIDAuMTY2OTM5ODQwOTUxODYwNjIsXG4gICAgMC4xOTcyOTI1MzkzMDY3NDQzNCwgMC4yMjc2NDUyMzc2NjE2MjgxLCAwLjI1Nzk5NzkzNjAxNjUxMTksXG4gICAgMC4yODgzNTA2MzQzNzEzOTU2MywgMC4zMTg4MzAwOTA0NDMwNTMyLCAwLjM1MDkyNTkzNDk1ODEyMyxcbiAgICAwLjM4NDgzMTQ5MzMwOTY0MjYsIDAuNDIwNTc0ODAzMDEwNDk0NjYsIDAuNDU4MTgzMjc0MDUyODM4LFxuICAgIDAuNDk3NjgzNzI1MDI3NDAyMywgMC41MzkxMDI0MTU5ODA2MzgxLCAwLjU4MjQ2NTA3ODQwNDA4OTgsXG4gICAgMC42Mjc3OTY5NDI2OTE0MTA3LCAwLjY3NTEyMjc2MzM0OTg2MjMsIDAuNzI0NDY2ODQyMjEyODkyMSxcbiAgICAwLjc3NTg1MzA0OTg2Njc4NiwgMC44MjkzMDQ4NDU0NzYyMzMsIDAuODg0ODQ1Mjk1MTY5ODQ5OCxcbiAgICAwLjk0MjQ5NzA4OTEyNjYwOSwgMS4wMDIyODI1NTc0ODY5MDM5LCAxLjA2NDIyMzY4NTE5NzM1NzcsXG4gICAgMS4xMjgzNDIxMjU4ODU4Mjk3LCAxLjE5NDY1OTIxNDg1MjIxMjgsIDEuMjYzMTk1OTgxMjUxMTg2NCxcbiAgICAxLjMzMzk3MzE1OTUzNDkwMzQsIDEuNDA3MDExMjAwMjE2NDQ3LCAxLjQ4MjMzMDI4MDAwODY0MTUsXG4gICAgMS41NTk5NTAzMTEzODczMjcyLCAxLjYzOTg5MDk1MTYyMzM2NzcsIDEuNzIyMTcxNjExMzIzNDEwNSxcbiAgICAxLjgwNjgxMTQ2MjUxNTYzNzcsIDEuODkzODI5NDQ2MzEzNDA3MywgMS45ODMyNDQyODAxODY2ODUyLFxuICAgIDIuMDc1MDc0NDY0ODY4NTUxLCAyLjE2OTMzODI5MDkyMTYyMzQsIDIuMjY2MDUzODQ0OTg3MjA2MyxcbiAgICAyLjM2NTIzOTAxNTczNzk1LCAyLjQ2NjkxMTQ5OTU1MzIwMDcsIDIuNTcxMDg4ODA1OTM0NTc2NCxcbiAgICAyLjY3Nzc4ODI2MjY3Nzk3ODUsIDIuNzg3MDI3MDIwODE2OTI1NywgMi44OTg4MjIwNTkzNTA5OTcsXG4gICAgMy4wMTMxOTAxODk3NzIwOTA3LCAzLjEzMDE0ODA2MDQwMDI4NjMsIDMuMjQ5NzEyMTYwNTQwMjIyNixcbiAgICAzLjM3MTg5ODgyNDQ2ODEwODcsIDMuNDk2NzI0MjM1MjU4Nzk0NiwgMy42MjQyMDQ0Mjg0NjE2MzksXG4gICAgMy43NTQzNTUyOTU2MzMzMTEsIDMuODg3MTkyNTg3NzM1MTU4LCA0LjAyMjczMTkxODQwMjE4NSxcbiAgICA0LjE2MDk4ODc2NzA5MDI4OSwgNC4zMDE5Nzg0ODIxMDc5NDEsIDQuNDQ1NzE2MjgzNTM4MDkyLFxuICAgIDQuNTkyMjE3MjY2MDU1NzQ2LCA0Ljc0MTQ5NjQwMTY0NjI4MiwgNC44OTM1Njg1NDIyMjkyOTgsXG4gICAgNS4wNDg0NDg0MjIxOTI0ODgsIDUuMjA2MTUwNjYwODM5NzIsIDUuMzY2Njg5NzY0NzU3MzM3NSxcbiAgICA1LjUzMDA4MDEzMDEwMjM4NjUsIDUuNjk2MzM2MDQ0ODE2Mjk0LCA1Ljg2NTQ3MTY5MDc2NzM1NCxcbiAgICA2LjAzNzUwMTE0NTgyNTA4MiwgNi4yMTI0MzgzODU4Njk0NzUsIDYuMzkwMjk3Mjg2NzM3OTI0LFxuICAgIDYuNTcxMDkxNjI2MTEyNDYxLCA2Ljc1NDgzNTA4NTM0OTgwNDUsIDYuOTQxNTQxMjUxMjU2NjExLFxuICAgIDcuMTMxMjIzNjE3ODEyMTQzLCA3LjMyMzg5NTU4Nzg0MDU0MywgNy41MTk1NzA0NzQ2MzQ2NjY1LFxuICAgIDcuNzE4MjYxNTAzNTMzNDM0NSwgNy45MTk5ODE4MTM0NTQ1MDQsIDguMTI0NzQ0NDU4Mzg0MDQyLFxuICAgIDguMzMyNTYyNDA4ODI1MTY1LCA4LjU0MzQ0ODU1MzIwNjcwMywgOC43NTc0MTU2OTkyNTM2ODIsXG4gICAgOC45NzQ0NzY1NzUzMjEwNjMsIDkuMTk0NjQzODMxNjkxOTc3LCA5LjQxNzkzMDA0MTg0MTgzOSxcbiAgICA5LjY0NDM0NzcwMzY2OTUwMywgOS44NzM5MDkyNDA2OTY2OTQsIDEwLjEwNjYyNzAwMzIzNjc4MSxcbiAgICAxMC4zNDI1MTMyNjk1MzQwMjQsIDEwLjU4MTU4MDI0Njg3NDI3LCAxMC44MjM4NDAwNzI2NjgxLFxuICAgIDExLjA2OTMwNDgxNTUwNzM2NCwgMTEuMzE3OTg2NDc2MTk2MDA4LCAxMS41Njk4OTY5ODg3NTYwMDksXG4gICAgMTEuODI1MDQ4MjIxNDA5MzQxLCAxMi4wODM0NTE5Nzc1MzY2MDYsIDEyLjM0NTExOTk5NjYxMzI0NyxcbiAgICAxMi42MTAwNjM5NTUxMjM5MzgsIDEyLjg3ODI5NTQ2NzQ1NTk0MiwgMTMuMTQ5ODI2MDg2NzcyMDQ4LFxuICAgIDEzLjQyNDY2NzMwNTg2MzcyLCAxMy43MDI4MzA1NTc5ODUxMDgsIDEzLjk4NDMyNzIxNzY2ODUxMyxcbiAgICAxNC4yNjkxNjg2MDE1MjE4MjgsIDE0LjU1NzM2NTk2OTAwODU2LCAxNC44NDg5MzA1MjMyMTA4NzEsXG4gICAgMTUuMTQzODczNDExNTc2MjczLCAxNS40NDIyMDU3MjY2NDgzMiwgMTUuNzQzOTM4NTA2NzgxODkxLFxuICAgIDE2LjA0OTA4MjczNjg0MzM3LCAxNi4zNTc2NDkzNDg4OTYzNCwgMTYuNjY5NjQ5MjIyODczMDQsXG4gICAgMTYuOTg1MDkzMTg3MjMyMDUzLCAxNy4zMDM5OTIwMTk2MDI2OSwgMTcuNjI2MzU2NDQ3NDE2MjUsXG4gICAgMTcuOTUyMTk3MTQ4NTI0NzYsIDE4LjI4MTUyNDc1MTgwNzMzMiwgMTguNjE0MzQ5ODM3NzY0NTY0LFxuICAgIDE4Ljk1MDY4MjkzOTEwMTM4LCAxOS4yOTA1MzQ1NDEyOTg0NTYsIDE5LjYzMzkxNTA4MzE3MjY5MixcbiAgICAxOS45ODA4MzQ5NTc0MjY4OSwgMjAuMzMxMzA0NTExMTg5MDY3LCAyMC42ODUzMzQwNDY1NDE1MDIsXG4gICAgMjEuMDQyOTMzODIxMDM5OTc3LCAyMS40MDQxMTQwNDgyMjMyNTYsIDIxLjc2ODg4NDg5ODExMzIyLFxuICAgIDIyLjEzNzI1NjQ5NzcwNTg3NywgMjIuNTA5MjM4OTMxNDUzMjgsIDIyLjg4NDg0MjI0MTczNjkxNixcbiAgICAyMy4yNjQwNzY0MjkzMzI0NjIsIDIzLjY0Njk1MTQ1Mzg2NjMsIDI0LjAzMzQ3NzIzNDI2NDAxNixcbiAgICAyNC40MjM2NjM2NDkxOTA4MywgMjQuODE3NTIwNTM3NDg0NTU4LCAyNS4yMTUwNTc2OTg1ODA4OSxcbiAgICAyNS42MTYyODQ4OTI5MzEzOCwgMjYuMDIxMjExODQyNDE0MzQyLCAyNi40Mjk4NDgyMzA3Mzg2NjQsXG4gICAgMjYuODQyMjAzNzAzODQwODI3LCAyNy4yNTgyODc4NzAyNzUzNTMsIDI3LjY3ODExMDMwMTU5ODUyMixcbiAgICAyOC4xMDE2ODA1MzI3NDU5NywgMjguNTI5MDA4MDYyNDAzODkzLCAyOC45NjAxMDIzNTMzNzQyMixcbiAgICAyOS4zOTQ5NzI4MzI5MzM5NiwgMjkuODMzNjI4ODkzMTg4NDUsIDMwLjI3NjA3OTg5MTQxOTMzMixcbiAgICAzMC43MjIzMzUxNTA0MjY2MjcsIDMxLjE3MjQwMzk1ODg2NTUxMiwgMzEuNjI2Mjk1NTcxNTc3ODUsXG4gICAgMzIuMDg0MDE5MjA5OTE4MzcsIDMyLjU0NTU4NDA2MjA3NTkyLCAzMy4wMTA5OTkyODMzODk2NjUsXG4gICAgMzMuNDgwMjczOTk2NjYwMywgMzMuOTUzNDE3MjkyNDU2ODM0LCAzNC40MzA0MzgyMjk0MTgyNjQsXG4gICAgMzQuOTExMzQ1ODM0NTUxMDg1LCAzNS4zOTYxNDkxMDM1MjIwNywgMzUuODg0ODU3MDAwOTQ2NzEsXG4gICAgMzYuMzc3NDc4NDYwNjczNDksIDM2Ljg3NDAyMjM4NjA2MzgyLCAzNy4zNzQ0OTc2NTAyNjc4OSxcbiAgICAzNy44Nzg5MTMwOTY0OTY1OSwgMzguMzg3Mjc3NTM4Mjg5MjYsIDM4Ljg5OTU5OTc1OTc3Nzg1LFxuICAgIDM5LjQxNTg4ODUxNTk0Njk3LCAzOS45MzYxNTI1MzI4OTA1NCwgNDAuNDYwNDAwNTA4MDY0NTQ1LFxuICAgIDQwLjk4ODY0MTExMDUzNjI5LCA0MS41MjA4ODI5ODEyMzAxOTQsIDQyLjA1NzEzNDczMzE3MDE2LFxuICAgIDQyLjU5NzQwNDk1MTcxODM5NiwgNDMuMTQxNzAyMTk0ODExMjI0LCA0My42OTAwMzQ5OTMxOTEzLFxuICAgIDQ0LjI0MjQxMTg1MDYzNjk3LCA0NC43OTg4NDEyNDQxODgzMjQsIDQ1LjM1OTMzMTYyNDM3MDE3LFxuICAgIDQ1LjkyMzg5MTQxNTQxMjA5LCA0Ni40OTI1MjkwMTU0NjU1MiwgNDcuMDY1MjUyNzk2ODE3OTE2LFxuICAgIDQ3LjY0MjA3MTEwNjEwNDA5LCA0OC4yMjI5OTIyNjQ1MTQ2OCwgNDguODA4MDI0NTY4MDAyMDU0LFxuICAgIDQ5LjM5NzE3NjI4NzQ4MzMsIDQ5Ljk5MDQ1NTY2OTA0MDgsIDUwLjU4Nzg3MDkzNDExOTk4NCxcbiAgICA1MS4xODk0MzAyNzk3MjQ3MjUsIDUxLjc5NTE0MTg3ODYxMDE0LCA1Mi40MDUwMTM4Nzk0NzI4OCxcbiAgICA1My4wMTkwNTQ0MDcxMzkyLCA1My42MzcyNzE1NjI3NTAzNjQsIDU0LjI1OTY3MzQyMzk0NTk3NixcbiAgICA1NC44ODYyNjgwNDUwNDQ5MywgNTUuNTE3MDYzNDU3MjIzOTM0LCA1Ni4xNTIwNjc2Njg2OTQyNCxcbiAgICA1Ni43OTEyODg2NjQ4NzU3NCwgNTcuNDM0NzM0NDA4NTY5MTYsIDU4LjA4MjQxMjg0MDEyNjIxLFxuICAgIDU4LjczNDMzMTg3NzYxNzM2NSwgNTkuMzkwNDk5NDE2OTk4MDcsIDYwLjA1MDkyMzMzMjI3MjUxLFxuICAgIDYwLjcxNTYxMTQ3NTY1NTU4NSwgNjEuMzg0NTcxNjc3NzMzMTEsIDYyLjA1NzgxMTc0NzYxOTg5NCxcbiAgICA2Mi43MzUzMzk0NzMxMTU5LCA2My40MTcxNjI2MjA4NjA5MTQsIDY0LjEwMzI4ODkzNjQ4NjkyLFxuICAgIDY0Ljc5MzcyNjE0NDc2OTIxLCA2NS40ODg0ODE5NDk3NzUyOSwgNjYuMTg3NTY0MDM1MDEyMjQsXG4gICAgNjYuODkwOTgwMDYzNTcyNTgsIDY3LjU5ODczNzY3ODI3ODA4LCA2OC4zMTA4NDQ1MDE4MjIyMixcbiAgICA2OS4wMjczMDgxMzY5MTA5MywgNjkuNzQ4MTM2MTY2NDAxNjQsIDcwLjQ3MzMzNjE1MzQ0MTA3LFxuICAgIDcxLjIwMjkxNTY0MTYwMTA0LCA3MS45MzY4ODIxNTUwMTMxMiwgNzIuNjc1MjQzMTk4NTAxNzIsXG4gICAgNzMuNDE4MDA2MjU3NzE1NDIsIDc0LjE2NTE3ODc5OTI1NzMzLCA3NC45MTY3NjgyNzA4MTM2LFxuICAgIDc1LjY3Mjc4MjEwMTI4MDcyLCA3Ni40MzMyMjc3MDA4OTE0NiwgNzcuMTk4MTEyNDYxMzM5MyxcbiAgICA3Ny45Njc0NDM3NTU5MDE2NywgNzguNzQxMjI4OTM5NTYxNzQsIDc5LjUxOTQ3NTM0OTEyOTA0LFxuICAgIDgwLjMwMjE5MDMwMzM1ODY5LCA4MS4wODkzODExMDMwNjkzNCwgODEuODgxMDU1MDMxMjU5OTksXG4gICAgODIuNjc3MjE5MzUzMjI1NDEsIDgzLjQ3Nzg4MTMxNjY3MDYsIDg0LjI4MzA0ODE1MTgyMzcyLFxuICAgIDg1LjA5MjcyNzA3MTU0ODA4LCA4NS45MDY5MjUyNzE0NTMwMiwgODYuNzI1NjQ5OTMwMDAzNDMsXG4gICAgODcuNTQ4OTA4MjA4NjI4MTksIDg4LjM3NjcwNzI1MTgyNzcsIDg5LjIwOTA1NDE4NzI4MDEsXG4gICAgOTAuMDQ1OTU2MTI1OTQ2NTUsIDkwLjg4NzQyMDE2MjE3NTE4LCA5MS43MzM0NTMzNzM4MDQzOCxcbiAgICA5Mi41ODQwNjI4MjIyNjQ5MSwgOTMuNDM5MjU1NTUyNjgwNjYsIDk0LjI5OTAzODU5Mzk2OTAyLFxuICAgIDk1LjE2MzQxODk1ODkzOTY5LCA5Ni4wMzI0MDM2NDQzOTI3NCwgOTYuOTA1OTk5NjMxMjE1OSxcbiAgICA5Ny43ODQyMTM4ODQ0ODA0NCwgOTguNjY3MDUzMzUzNTM2NiwgOTkuNTU0NTI0OTcyMTA3NzYsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGN0X3NvbHZlci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGNvbG9yIHN5c3RlbSBidWlsdCB1c2luZyBDQU0xNiBodWUgYW5kIGNocm9tYSwgYW5kIEwqIGZyb21cbiAqIEwqYSpiKi5cbiAqXG4gKiBVc2luZyBMKiBjcmVhdGVzIGEgbGluayBiZXR3ZWVuIHRoZSBjb2xvciBzeXN0ZW0sIGNvbnRyYXN0LCBhbmQgdGh1c1xuICogYWNjZXNzaWJpbGl0eS4gQ29udHJhc3QgcmF0aW8gZGVwZW5kcyBvbiByZWxhdGl2ZSBsdW1pbmFuY2UsIG9yIFkgaW4gdGhlIFhZWlxuICogY29sb3Igc3BhY2UuIEwqLCBvciBwZXJjZXB0dWFsIGx1bWluYW5jZSBjYW4gYmUgY2FsY3VsYXRlZCBmcm9tIFkuXG4gKlxuICogVW5saWtlIFksIEwqIGlzIGxpbmVhciB0byBodW1hbiBwZXJjZXB0aW9uLCBhbGxvd2luZyB0cml2aWFsIGNyZWF0aW9uIG9mXG4gKiBhY2N1cmF0ZSBjb2xvciB0b25lcy5cbiAqXG4gKiBVbmxpa2UgY29udHJhc3QgcmF0aW8sIG1lYXN1cmluZyBjb250cmFzdCBpbiBMKiBpcyBsaW5lYXIsIGFuZCBzaW1wbGUgdG9cbiAqIGNhbGN1bGF0ZS4gQSBkaWZmZXJlbmNlIG9mIDQwIGluIEhDVCB0b25lIGd1YXJhbnRlZXMgYSBjb250cmFzdCByYXRpbyA+PSAzLjAsXG4gKiBhbmQgYSBkaWZmZXJlbmNlIG9mIDUwIGd1YXJhbnRlZXMgYSBjb250cmFzdCByYXRpbyA+PSA0LjUuXG4gKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL2NvbG9yX3V0aWxzLmpzJztcbmltcG9ydCB7IENhbTE2IH0gZnJvbSAnLi9jYW0xNi5qcyc7XG5pbXBvcnQgeyBIY3RTb2x2ZXIgfSBmcm9tICcuL2hjdF9zb2x2ZXIuanMnO1xuaW1wb3J0IHsgVmlld2luZ0NvbmRpdGlvbnMgfSBmcm9tICcuL3ZpZXdpbmdfY29uZGl0aW9ucy5qcyc7XG4vKipcbiAqIEhDVCwgaHVlLCBjaHJvbWEsIGFuZCB0b25lLiBBIGNvbG9yIHN5c3RlbSB0aGF0IHByb3ZpZGVzIGEgcGVyY2VwdHVhbGx5XG4gKiBhY2N1cmF0ZSBjb2xvciBtZWFzdXJlbWVudCBzeXN0ZW0gdGhhdCBjYW4gYWxzbyBhY2N1cmF0ZWx5IHJlbmRlciB3aGF0IGNvbG9yc1xuICogd2lsbCBhcHBlYXIgYXMgaW4gZGlmZmVyZW50IGxpZ2h0aW5nIGVudmlyb25tZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEhjdCB7XG4gICAgc3RhdGljIGZyb20oaHVlLCBjaHJvbWEsIHRvbmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIY3QoSGN0U29sdmVyLnNvbHZlVG9JbnQoaHVlLCBjaHJvbWEsIHRvbmUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gSENUIHJlcHJlc2VudGF0aW9uIG9mIGEgY29sb3IgaW4gZGVmYXVsdCB2aWV3aW5nIGNvbmRpdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUludChhcmdiKSB7XG4gICAgICAgIHJldHVybiBuZXcgSGN0KGFyZ2IpO1xuICAgIH1cbiAgICB0b0ludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJnYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBudW1iZXIsIGluIGRlZ3JlZXMsIHJlcHJlc2VudGluZyBleC4gcmVkLCBvcmFuZ2UsIHllbGxvdywgZXRjLlxuICAgICAqIFJhbmdlcyBmcm9tIDAgPD0gaHVlIDwgMzYwLlxuICAgICAqL1xuICAgIGdldCBodWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsSHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbmV3SHVlIDAgPD0gbmV3SHVlIDwgMzYwOyBpbnZhbGlkIHZhbHVlcyBhcmUgY29ycmVjdGVkLlxuICAgICAqIENocm9tYSBtYXkgZGVjcmVhc2UgYmVjYXVzZSBjaHJvbWEgaGFzIGEgZGlmZmVyZW50IG1heGltdW0gZm9yIGFueSBnaXZlblxuICAgICAqIGh1ZSBhbmQgdG9uZS5cbiAgICAgKi9cbiAgICBzZXQgaHVlKG5ld0h1ZSkge1xuICAgICAgICB0aGlzLnNldEludGVybmFsU3RhdGUoSGN0U29sdmVyLnNvbHZlVG9JbnQobmV3SHVlLCB0aGlzLmludGVybmFsQ2hyb21hLCB0aGlzLmludGVybmFsVG9uZSkpO1xuICAgIH1cbiAgICBnZXQgY2hyb21hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbENocm9tYTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5ld0Nocm9tYSAwIDw9IG5ld0Nocm9tYSA8ID9cbiAgICAgKiBDaHJvbWEgbWF5IGRlY3JlYXNlIGJlY2F1c2UgY2hyb21hIGhhcyBhIGRpZmZlcmVudCBtYXhpbXVtIGZvciBhbnkgZ2l2ZW5cbiAgICAgKiBodWUgYW5kIHRvbmUuXG4gICAgICovXG4gICAgc2V0IGNocm9tYShuZXdDaHJvbWEpIHtcbiAgICAgICAgdGhpcy5zZXRJbnRlcm5hbFN0YXRlKEhjdFNvbHZlci5zb2x2ZVRvSW50KHRoaXMuaW50ZXJuYWxIdWUsIG5ld0Nocm9tYSwgdGhpcy5pbnRlcm5hbFRvbmUpKTtcbiAgICB9XG4gICAgLyoqIExpZ2h0bmVzcy4gUmFuZ2VzIGZyb20gMCB0byAxMDAuICovXG4gICAgZ2V0IHRvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsVG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5ld1RvbmUgMCA8PSBuZXdUb25lIDw9IDEwMDsgaW52YWxpZCB2YWxpZHMgYXJlIGNvcnJlY3RlZC5cbiAgICAgKiBDaHJvbWEgbWF5IGRlY3JlYXNlIGJlY2F1c2UgY2hyb21hIGhhcyBhIGRpZmZlcmVudCBtYXhpbXVtIGZvciBhbnkgZ2l2ZW5cbiAgICAgKiBodWUgYW5kIHRvbmUuXG4gICAgICovXG4gICAgc2V0IHRvbmUobmV3VG9uZSkge1xuICAgICAgICB0aGlzLnNldEludGVybmFsU3RhdGUoSGN0U29sdmVyLnNvbHZlVG9JbnQodGhpcy5pbnRlcm5hbEh1ZSwgdGhpcy5pbnRlcm5hbENocm9tYSwgbmV3VG9uZSkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihhcmdiKSB7XG4gICAgICAgIHRoaXMuYXJnYiA9IGFyZ2I7XG4gICAgICAgIGNvbnN0IGNhbSA9IENhbTE2LmZyb21JbnQoYXJnYik7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxIdWUgPSBjYW0uaHVlO1xuICAgICAgICB0aGlzLmludGVybmFsQ2hyb21hID0gY2FtLmNocm9tYTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFRvbmUgPSB1dGlscy5sc3RhckZyb21BcmdiKGFyZ2IpO1xuICAgICAgICB0aGlzLmFyZ2IgPSBhcmdiO1xuICAgIH1cbiAgICBzZXRJbnRlcm5hbFN0YXRlKGFyZ2IpIHtcbiAgICAgICAgY29uc3QgY2FtID0gQ2FtMTYuZnJvbUludChhcmdiKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbEh1ZSA9IGNhbS5odWU7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxDaHJvbWEgPSBjYW0uY2hyb21hO1xuICAgICAgICB0aGlzLmludGVybmFsVG9uZSA9IHV0aWxzLmxzdGFyRnJvbUFyZ2IoYXJnYik7XG4gICAgICAgIHRoaXMuYXJnYiA9IGFyZ2I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgYSBjb2xvciBpbnRvIGRpZmZlcmVudCBbVmlld2luZ0NvbmRpdGlvbnNdLlxuICAgICAqXG4gICAgICogQ29sb3JzIGNoYW5nZSBhcHBlYXJhbmNlLiBUaGV5IGxvb2sgZGlmZmVyZW50IHdpdGggbGlnaHRzIG9uIHZlcnN1cyBvZmYsXG4gICAgICogdGhlIHNhbWUgY29sb3IsIGFzIGluIGhleCBjb2RlLCBvbiB3aGl0ZSBsb29rcyBkaWZmZXJlbnQgd2hlbiBvbiBibGFjay5cbiAgICAgKiBUaGlzIGlzIGNhbGxlZCBjb2xvciByZWxhdGl2aXR5LCBtb3N0IGZhbW91c2x5IGV4cGxpY2F0ZWQgYnkgSm9zZWYgQWxiZXJzXG4gICAgICogaW4gSW50ZXJhY3Rpb24gb2YgQ29sb3IuXG4gICAgICpcbiAgICAgKiBJbiBjb2xvciBzY2llbmNlLCBjb2xvciBhcHBlYXJhbmNlIG1vZGVscyBjYW4gYWNjb3VudCBmb3IgdGhpcyBhbmRcbiAgICAgKiBjYWxjdWxhdGUgdGhlIGFwcGVhcmFuY2Ugb2YgYSBjb2xvciBpbiBkaWZmZXJlbnQgc2V0dGluZ3MuIEhDVCBpcyBiYXNlZCBvblxuICAgICAqIENBTTE2LCBhIGNvbG9yIGFwcGVhcmFuY2UgbW9kZWwsIGFuZCB1c2VzIGl0IHRvIG1ha2UgdGhlc2UgY2FsY3VsYXRpb25zLlxuICAgICAqXG4gICAgICogU2VlIFtWaWV3aW5nQ29uZGl0aW9ucy5tYWtlXSBmb3IgcGFyYW1ldGVycyBhZmZlY3RpbmcgY29sb3IgYXBwZWFyYW5jZS5cbiAgICAgKi9cbiAgICBpblZpZXdpbmdDb25kaXRpb25zKHZjKSB7XG4gICAgICAgIC8vIDEuIFVzZSBDQU0xNiB0byBmaW5kIFhZWiBjb29yZGluYXRlcyBvZiBjb2xvciBpbiBzcGVjaWZpZWQgVkMuXG4gICAgICAgIGNvbnN0IGNhbSA9IENhbTE2LmZyb21JbnQodGhpcy50b0ludCgpKTtcbiAgICAgICAgY29uc3Qgdmlld2VkSW5WYyA9IGNhbS54eXpJblZpZXdpbmdDb25kaXRpb25zKHZjKTtcbiAgICAgICAgLy8gMi4gQ3JlYXRlIENBTTE2IG9mIHRob3NlIFhZWiBjb29yZGluYXRlcyBpbiBkZWZhdWx0IFZDLlxuICAgICAgICBjb25zdCByZWNhc3RJblZjID0gQ2FtMTYuZnJvbVh5ekluVmlld2luZ0NvbmRpdGlvbnModmlld2VkSW5WY1swXSwgdmlld2VkSW5WY1sxXSwgdmlld2VkSW5WY1syXSwgVmlld2luZ0NvbmRpdGlvbnMubWFrZSgpKTtcbiAgICAgICAgLy8gMy4gQ3JlYXRlIEhDVCBmcm9tOlxuICAgICAgICAvLyAtIENBTTE2IHVzaW5nIGRlZmF1bHQgVkMgd2l0aCBYWVogY29vcmRpbmF0ZXMgaW4gc3BlY2lmaWVkIFZDLlxuICAgICAgICAvLyAtIEwqIGNvbnZlcnRlZCBmcm9tIFkgaW4gWFlaIGNvb3JkaW5hdGVzIGluIHNwZWNpZmllZCBWQy5cbiAgICAgICAgY29uc3QgcmVjYXN0SGN0ID0gSGN0LmZyb20ocmVjYXN0SW5WYy5odWUsIHJlY2FzdEluVmMuY2hyb21hLCB1dGlscy5sc3RhckZyb21ZKHZpZXdlZEluVmNbMV0pKTtcbiAgICAgICAgcmV0dXJuIHJlY2FzdEhjdDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oY3QuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC4gRG8gbm90IG1vZGlmeSBpdC5cbmltcG9ydCB7IENhbTE2IH0gZnJvbSAnLi4vaGN0L2NhbTE2LmpzJztcbmltcG9ydCB7IEhjdCB9IGZyb20gJy4uL2hjdC9oY3QuanMnO1xuaW1wb3J0ICogYXMgY29sb3JVdGlscyBmcm9tICcuLi91dGlscy9jb2xvcl91dGlscy5qcyc7XG5pbXBvcnQgKiBhcyBtYXRoVXRpbHMgZnJvbSAnLi4vdXRpbHMvbWF0aF91dGlscy5qcyc7XG4vLyBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXMgaXMgZGVzaWduZWQgdG8gaGF2ZSBhIGNvbnNpc3RlbnQgQVBJIGFjcm9zc1xuLy8gcGxhdGZvcm1zIGFuZCBtb2R1bGFyIGNvbXBvbmVudHMgdGhhdCBjYW4gYmUgbW92ZWQgYXJvdW5kIGVhc2lseS4gVXNpbmcgYVxuLy8gY2xhc3MgYXMgYSBuYW1lc3BhY2UgZmFjaWxpdGF0ZXMgdGhpcy5cbi8vXG4vLyB0c2xpbnQ6ZGlzYWJsZTpjbGFzcy1hcy1uYW1lc3BhY2Vcbi8qKlxuICogRnVuY3Rpb25zIGZvciBibGVuZGluZyBpbiBIQ1QgYW5kIENBTTE2LlxuICovXG5leHBvcnQgY2xhc3MgQmxlbmQge1xuICAgIC8qKlxuICAgICAqIEJsZW5kIHRoZSBkZXNpZ24gY29sb3IncyBIQ1QgaHVlIHRvd2FyZHMgdGhlIGtleSBjb2xvcidzIEhDVFxuICAgICAqIGh1ZSwgaW4gYSB3YXkgdGhhdCBsZWF2ZXMgdGhlIG9yaWdpbmFsIGNvbG9yIHJlY29nbml6YWJsZSBhbmRcbiAgICAgKiByZWNvZ25pemFibHkgc2hpZnRlZCB0b3dhcmRzIHRoZSBrZXkgY29sb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVzaWduQ29sb3IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhbiBhcmJpdHJhcnkgY29sb3IuXG4gICAgICogQHBhcmFtIHNvdXJjZUNvbG9yIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1haW4gdGhlbWUgY29sb3IuXG4gICAgICogQHJldHVybiBUaGUgZGVzaWduIGNvbG9yIHdpdGggYSBodWUgc2hpZnRlZCB0b3dhcmRzIHRoZVxuICAgICAqIHN5c3RlbSdzIGNvbG9yLCBhIHNsaWdodGx5IHdhcm1lci9jb29sZXIgdmFyaWFudCBvZiB0aGUgZGVzaWduXG4gICAgICogY29sb3IncyBodWUuXG4gICAgICovXG4gICAgc3RhdGljIGhhcm1vbml6ZShkZXNpZ25Db2xvciwgc291cmNlQ29sb3IpIHtcbiAgICAgICAgY29uc3QgZnJvbUhjdCA9IEhjdC5mcm9tSW50KGRlc2lnbkNvbG9yKTtcbiAgICAgICAgY29uc3QgdG9IY3QgPSBIY3QuZnJvbUludChzb3VyY2VDb2xvcik7XG4gICAgICAgIGNvbnN0IGRpZmZlcmVuY2VEZWdyZWVzID0gbWF0aFV0aWxzLmRpZmZlcmVuY2VEZWdyZWVzKGZyb21IY3QuaHVlLCB0b0hjdC5odWUpO1xuICAgICAgICBjb25zdCByb3RhdGlvbkRlZ3JlZXMgPSBNYXRoLm1pbihkaWZmZXJlbmNlRGVncmVlcyAqIDAuNSwgMTUuMCk7XG4gICAgICAgIGNvbnN0IG91dHB1dEh1ZSA9IG1hdGhVdGlscy5zYW5pdGl6ZURlZ3JlZXNEb3VibGUoZnJvbUhjdC5odWUgK1xuICAgICAgICAgICAgcm90YXRpb25EZWdyZWVzICogbWF0aFV0aWxzLnJvdGF0aW9uRGlyZWN0aW9uKGZyb21IY3QuaHVlLCB0b0hjdC5odWUpKTtcbiAgICAgICAgcmV0dXJuIEhjdC5mcm9tKG91dHB1dEh1ZSwgZnJvbUhjdC5jaHJvbWEsIGZyb21IY3QudG9uZSkudG9JbnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmxlbmRzIGh1ZSBmcm9tIG9uZSBjb2xvciBpbnRvIGFub3RoZXIuIFRoZSBjaHJvbWEgYW5kIHRvbmUgb2ZcbiAgICAgKiB0aGUgb3JpZ2luYWwgY29sb3IgYXJlIG1haW50YWluZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnJvbSBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGNvbG9yXG4gICAgICogQHBhcmFtIHRvIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgY29sb3JcbiAgICAgKiBAcGFyYW0gYW1vdW50IGhvdyBtdWNoIGJsZW5kaW5nIHRvIHBlcmZvcm07IDAuMCA+PSBhbmQgPD0gMS4wXG4gICAgICogQHJldHVybiBmcm9tLCB3aXRoIGEgaHVlIGJsZW5kZWQgdG93YXJkcyB0by4gQ2hyb21hIGFuZCB0b25lXG4gICAgICogYXJlIGNvbnN0YW50LlxuICAgICAqL1xuICAgIHN0YXRpYyBoY3RIdWUoZnJvbSwgdG8sIGFtb3VudCkge1xuICAgICAgICBjb25zdCB1Y3MgPSBCbGVuZC5jYW0xNlVjcyhmcm9tLCB0bywgYW1vdW50KTtcbiAgICAgICAgY29uc3QgdWNzQ2FtID0gQ2FtMTYuZnJvbUludCh1Y3MpO1xuICAgICAgICBjb25zdCBmcm9tQ2FtID0gQ2FtMTYuZnJvbUludChmcm9tKTtcbiAgICAgICAgY29uc3QgYmxlbmRlZCA9IEhjdC5mcm9tKHVjc0NhbS5odWUsIGZyb21DYW0uY2hyb21hLCBjb2xvclV0aWxzLmxzdGFyRnJvbUFyZ2IoZnJvbSkpO1xuICAgICAgICByZXR1cm4gYmxlbmRlZC50b0ludCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCbGVuZCBpbiBDQU0xNi1VQ1Mgc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnJvbSBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGNvbG9yXG4gICAgICogQHBhcmFtIHRvIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgY29sb3JcbiAgICAgKiBAcGFyYW0gYW1vdW50IGhvdyBtdWNoIGJsZW5kaW5nIHRvIHBlcmZvcm07IDAuMCA+PSBhbmQgPD0gMS4wXG4gICAgICogQHJldHVybiBmcm9tLCBibGVuZGVkIHRvd2FyZHMgdG8uIEh1ZSwgY2hyb21hLCBhbmQgdG9uZSB3aWxsXG4gICAgICogY2hhbmdlLlxuICAgICAqL1xuICAgIHN0YXRpYyBjYW0xNlVjcyhmcm9tLCB0bywgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IGZyb21DYW0gPSBDYW0xNi5mcm9tSW50KGZyb20pO1xuICAgICAgICBjb25zdCB0b0NhbSA9IENhbTE2LmZyb21JbnQodG8pO1xuICAgICAgICBjb25zdCBmcm9tSiA9IGZyb21DYW0uanN0YXI7XG4gICAgICAgIGNvbnN0IGZyb21BID0gZnJvbUNhbS5hc3RhcjtcbiAgICAgICAgY29uc3QgZnJvbUIgPSBmcm9tQ2FtLmJzdGFyO1xuICAgICAgICBjb25zdCB0b0ogPSB0b0NhbS5qc3RhcjtcbiAgICAgICAgY29uc3QgdG9BID0gdG9DYW0uYXN0YXI7XG4gICAgICAgIGNvbnN0IHRvQiA9IHRvQ2FtLmJzdGFyO1xuICAgICAgICBjb25zdCBqc3RhciA9IGZyb21KICsgKHRvSiAtIGZyb21KKSAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgYXN0YXIgPSBmcm9tQSArICh0b0EgLSBmcm9tQSkgKiBhbW91bnQ7XG4gICAgICAgIGNvbnN0IGJzdGFyID0gZnJvbUIgKyAodG9CIC0gZnJvbUIpICogYW1vdW50O1xuICAgICAgICByZXR1cm4gQ2FtMTYuZnJvbVVjcyhqc3RhciwgYXN0YXIsIGJzdGFyKS50b0ludCgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsZW5kLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXMgaXMgZGVzaWduZWQgdG8gaGF2ZSBhIGNvbnNpc3RlbnQgQVBJIGFjcm9zc1xuLy8gcGxhdGZvcm1zIGFuZCBtb2R1bGFyIGNvbXBvbmVudHMgdGhhdCBjYW4gYmUgbW92ZWQgYXJvdW5kIGVhc2lseS4gVXNpbmcgYVxuLy8gY2xhc3MgYXMgYSBuYW1lc3BhY2UgZmFjaWxpdGF0ZXMgdGhpcy5cbi8vXG4vLyB0c2xpbnQ6ZGlzYWJsZTpjbGFzcy1hcy1uYW1lc3BhY2VcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL2NvbG9yX3V0aWxzLmpzJztcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi4vdXRpbHMvbWF0aF91dGlscy5qcyc7XG4vKipcbiAqIFV0aWxpdHkgbWV0aG9kcyBmb3IgY2FsY3VsYXRpbmcgY29udHJhc3QgZ2l2ZW4gdHdvIGNvbG9ycywgb3IgY2FsY3VsYXRpbmcgYVxuICogY29sb3IgZ2l2ZW4gb25lIGNvbG9yIGFuZCBhIGNvbnRyYXN0IHJhdGlvLlxuICpcbiAqIENvbnRyYXN0IHJhdGlvIGlzIGNhbGN1bGF0ZWQgdXNpbmcgWFlaJ3MgWS4gV2hlbiBsaW5lYXJpemVkIHRvIG1hdGNoIGh1bWFuXG4gKiBwZXJjZXB0aW9uLCBZIGJlY29tZXMgSENUJ3MgdG9uZSBhbmQgTCphKmIqJ3MnIEwqLiBJbmZvcm1hbGx5LCB0aGlzIGlzIHRoZVxuICogbGlnaHRuZXNzIG9mIGEgY29sb3IuXG4gKlxuICogTWV0aG9kcyByZWZlciB0byB0b25lLCBUIGluIHRoZSB0aGUgSENUIGNvbG9yIHNwYWNlLlxuICogVG9uZSBpcyBlcXVpdmFsZW50IHRvIEwqIGluIHRoZSBMKmEqYiogY29sb3Igc3BhY2UsIG9yIEwgaW4gdGhlIExDSCBjb2xvclxuICogc3BhY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250cmFzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvbnRyYXN0IHJhdGlvLCB3aGljaCByYW5nZXMgZnJvbSAxIHRvIDIxLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRvbmVBIFRvbmUgYmV0d2VlbiAwIGFuZCAxMDAuIFZhbHVlcyBvdXRzaWRlIHdpbGwgYmUgY2xhbXBlZC5cbiAgICAgKiBAcGFyYW0gdG9uZUIgVG9uZSBiZXR3ZWVuIDAgYW5kIDEwMC4gVmFsdWVzIG91dHNpZGUgd2lsbCBiZSBjbGFtcGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyByYXRpb09mVG9uZXModG9uZUEsIHRvbmVCKSB7XG4gICAgICAgIHRvbmVBID0gbWF0aC5jbGFtcERvdWJsZSgwLjAsIDEwMC4wLCB0b25lQSk7XG4gICAgICAgIHRvbmVCID0gbWF0aC5jbGFtcERvdWJsZSgwLjAsIDEwMC4wLCB0b25lQik7XG4gICAgICAgIHJldHVybiBDb250cmFzdC5yYXRpb09mWXModXRpbHMueUZyb21Mc3Rhcih0b25lQSksIHV0aWxzLnlGcm9tTHN0YXIodG9uZUIpKTtcbiAgICB9XG4gICAgc3RhdGljIHJhdGlvT2ZZcyh5MSwgeTIpIHtcbiAgICAgICAgY29uc3QgbGlnaHRlciA9IHkxID4geTIgPyB5MSA6IHkyO1xuICAgICAgICBjb25zdCBkYXJrZXIgPSAobGlnaHRlciA9PT0geTIpID8geTEgOiB5MjtcbiAgICAgICAgcmV0dXJuIChsaWdodGVyICsgNS4wKSAvIChkYXJrZXIgKyA1LjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdG9uZSA+PSB0b25lIHBhcmFtZXRlciB0aGF0IGVuc3VyZXMgcmF0aW8gcGFyYW1ldGVyLlxuICAgICAqIFJldHVybiB2YWx1ZSBpcyBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICAgKiBSZXR1cm5zIC0xIGlmIHJhdGlvIGNhbm5vdCBiZSBhY2hpZXZlZCB3aXRoIHRvbmUgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRvbmUgVG9uZSByZXR1cm4gdmFsdWUgbXVzdCBjb250cmFzdCB3aXRoLlxuICAgICAqIFJhbmdlIGlzIDAgdG8gMTAwLiBJbnZhbGlkIHZhbHVlcyB3aWxsIHJlc3VsdCBpbiAtMSBiZWluZyByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gcmF0aW8gQ29udHJhc3QgcmF0aW8gb2YgcmV0dXJuIHZhbHVlIGFuZCB0b25lLlxuICAgICAqIFJhbmdlIGlzIDEgdG8gMjEsIGludmFsaWQgdmFsdWVzIGhhdmUgdW5kZWZpbmVkIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIHN0YXRpYyBsaWdodGVyKHRvbmUsIHJhdGlvKSB7XG4gICAgICAgIGlmICh0b25lIDwgMC4wIHx8IHRvbmUgPiAxMDAuMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xLjA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGFya1kgPSB1dGlscy55RnJvbUxzdGFyKHRvbmUpO1xuICAgICAgICBjb25zdCBsaWdodFkgPSByYXRpbyAqIChkYXJrWSArIDUuMCkgLSA1LjA7XG4gICAgICAgIGNvbnN0IHJlYWxDb250cmFzdCA9IENvbnRyYXN0LnJhdGlvT2ZZcyhsaWdodFksIGRhcmtZKTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBNYXRoLmFicyhyZWFsQ29udHJhc3QgLSByYXRpbyk7XG4gICAgICAgIGlmIChyZWFsQ29udHJhc3QgPCByYXRpbyAmJiBkZWx0YSA+IDAuMDQpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgZ2FtdXQgbWFwcGluZywgd2hpY2ggcmVxdWlyZXMgYSAncmFuZ2UnIG9uIHRvbmUsIHdpbGwgc3RpbGwgcmVzdWx0XG4gICAgICAgIC8vIHRoZSBjb3JyZWN0IHJhdGlvIGJ5IGRhcmtlbmluZyBzbGlnaHRseS5cbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSB1dGlscy5sc3RhckZyb21ZKGxpZ2h0WSkgKyAwLjQ7XG4gICAgICAgIGlmIChyZXR1cm5WYWx1ZSA8IDAgfHwgcmV0dXJuVmFsdWUgPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB0b25lIDw9IHRvbmUgcGFyYW1ldGVyIHRoYXQgZW5zdXJlcyByYXRpbyBwYXJhbWV0ZXIuXG4gICAgICogUmV0dXJuIHZhbHVlIGlzIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgICAqIFJldHVybnMgLTEgaWYgcmF0aW8gY2Fubm90IGJlIGFjaGlldmVkIHdpdGggdG9uZSBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9uZSBUb25lIHJldHVybiB2YWx1ZSBtdXN0IGNvbnRyYXN0IHdpdGguXG4gICAgICogUmFuZ2UgaXMgMCB0byAxMDAuIEludmFsaWQgdmFsdWVzIHdpbGwgcmVzdWx0IGluIC0xIGJlaW5nIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSByYXRpbyBDb250cmFzdCByYXRpbyBvZiByZXR1cm4gdmFsdWUgYW5kIHRvbmUuXG4gICAgICogUmFuZ2UgaXMgMSB0byAyMSwgaW52YWxpZCB2YWx1ZXMgaGF2ZSB1bmRlZmluZWQgYmVoYXZpb3IuXG4gICAgICovXG4gICAgc3RhdGljIGRhcmtlcih0b25lLCByYXRpbykge1xuICAgICAgICBpZiAodG9uZSA8IDAuMCB8fCB0b25lID4gMTAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiAtMS4wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpZ2h0WSA9IHV0aWxzLnlGcm9tTHN0YXIodG9uZSk7XG4gICAgICAgIGNvbnN0IGRhcmtZID0gKChsaWdodFkgKyA1LjApIC8gcmF0aW8pIC0gNS4wO1xuICAgICAgICBjb25zdCByZWFsQ29udHJhc3QgPSBDb250cmFzdC5yYXRpb09mWXMobGlnaHRZLCBkYXJrWSk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gTWF0aC5hYnMocmVhbENvbnRyYXN0IC0gcmF0aW8pO1xuICAgICAgICBpZiAocmVhbENvbnRyYXN0IDwgcmF0aW8gJiYgZGVsdGEgPiAwLjA0KSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIGdhbXV0IG1hcHBpbmcsIHdoaWNoIHJlcXVpcmVzIGEgJ3JhbmdlJyBvbiB0b25lLCB3aWxsIHN0aWxsIHJlc3VsdFxuICAgICAgICAvLyB0aGUgY29ycmVjdCByYXRpbyBieSBkYXJrZW5pbmcgc2xpZ2h0bHkuXG4gICAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gdXRpbHMubHN0YXJGcm9tWShkYXJrWSkgLSAwLjQ7XG4gICAgICAgIGlmIChyZXR1cm5WYWx1ZSA8IDAgfHwgcmV0dXJuVmFsdWUgPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB0b25lID49IHRvbmUgcGFyYW1ldGVyIHRoYXQgZW5zdXJlcyByYXRpbyBwYXJhbWV0ZXIuXG4gICAgICogUmV0dXJuIHZhbHVlIGlzIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgICAqIFJldHVybnMgMTAwIGlmIHJhdGlvIGNhbm5vdCBiZSBhY2hpZXZlZCB3aXRoIHRvbmUgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdW5zYWZlIGJlY2F1c2UgdGhlIHJldHVybmVkIHZhbHVlIGlzIGd1YXJhbnRlZWQgdG8gYmUgaW5cbiAgICAgKiBib3VuZHMgZm9yIHRvbmUsIGkuZS4gYmV0d2VlbiAwIGFuZCAxMDAuIEhvd2V2ZXIsIHRoYXQgdmFsdWUgbWF5IG5vdCByZWFjaFxuICAgICAqIHRoZSByYXRpbyB3aXRoIHRvbmUuIEZvciBleGFtcGxlLCB0aGVyZSBpcyBubyBjb2xvciBsaWdodGVyIHRoYW4gVDEwMC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0b25lIFRvbmUgcmV0dXJuIHZhbHVlIG11c3QgY29udHJhc3Qgd2l0aC5cbiAgICAgKiBSYW5nZSBpcyAwIHRvIDEwMC4gSW52YWxpZCB2YWx1ZXMgd2lsbCByZXN1bHQgaW4gMTAwIGJlaW5nIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSByYXRpbyBEZXNpcmVkIGNvbnRyYXN0IHJhdGlvIG9mIHJldHVybiB2YWx1ZSBhbmQgdG9uZSBwYXJhbWV0ZXIuXG4gICAgICogUmFuZ2UgaXMgMSB0byAyMSwgaW52YWxpZCB2YWx1ZXMgaGF2ZSB1bmRlZmluZWQgYmVoYXZpb3IuXG4gICAgICovXG4gICAgc3RhdGljIGxpZ2h0ZXJVbnNhZmUodG9uZSwgcmF0aW8pIHtcbiAgICAgICAgY29uc3QgbGlnaHRlclNhZmUgPSBDb250cmFzdC5saWdodGVyKHRvbmUsIHJhdGlvKTtcbiAgICAgICAgcmV0dXJuIChsaWdodGVyU2FmZSA8IDAuMCkgPyAxMDAuMCA6IGxpZ2h0ZXJTYWZlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdG9uZSA+PSB0b25lIHBhcmFtZXRlciB0aGF0IGVuc3VyZXMgcmF0aW8gcGFyYW1ldGVyLlxuICAgICAqIFJldHVybiB2YWx1ZSBpcyBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICAgKiBSZXR1cm5zIDEwMCBpZiByYXRpbyBjYW5ub3QgYmUgYWNoaWV2ZWQgd2l0aCB0b25lIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVuc2FmZSBiZWNhdXNlIHRoZSByZXR1cm5lZCB2YWx1ZSBpcyBndWFyYW50ZWVkIHRvIGJlIGluXG4gICAgICogYm91bmRzIGZvciB0b25lLCBpLmUuIGJldHdlZW4gMCBhbmQgMTAwLiBIb3dldmVyLCB0aGF0IHZhbHVlIG1heSBub3QgcmVhY2hcbiAgICAgKiB0aGUgW3JhdGlvIHdpdGggW3RvbmVdLiBGb3IgZXhhbXBsZSwgdGhlcmUgaXMgbm8gY29sb3IgZGFya2VyIHRoYW4gVDAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9uZSBUb25lIHJldHVybiB2YWx1ZSBtdXN0IGNvbnRyYXN0IHdpdGguXG4gICAgICogUmFuZ2UgaXMgMCB0byAxMDAuIEludmFsaWQgdmFsdWVzIHdpbGwgcmVzdWx0IGluIDAgYmVpbmcgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHJhdGlvIERlc2lyZWQgY29udHJhc3QgcmF0aW8gb2YgcmV0dXJuIHZhbHVlIGFuZCB0b25lIHBhcmFtZXRlci5cbiAgICAgKiBSYW5nZSBpcyAxIHRvIDIxLCBpbnZhbGlkIHZhbHVlcyBoYXZlIHVuZGVmaW5lZCBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGFya2VyVW5zYWZlKHRvbmUsIHJhdGlvKSB7XG4gICAgICAgIGNvbnN0IGRhcmtlclNhZmUgPSBDb250cmFzdC5kYXJrZXIodG9uZSwgcmF0aW8pO1xuICAgICAgICByZXR1cm4gKGRhcmtlclNhZmUgPCAwLjApID8gMC4wIDogZGFya2VyU2FmZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cmFzdC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSGN0IH0gZnJvbSAnLi4vaGN0L2hjdC5qcyc7XG4vLyBtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXMgaXMgZGVzaWduZWQgdG8gaGF2ZSBhIGNvbnNpc3RlbnQgQVBJIGFjcm9zc1xuLy8gcGxhdGZvcm1zIGFuZCBtb2R1bGFyIGNvbXBvbmVudHMgdGhhdCBjYW4gYmUgbW92ZWQgYXJvdW5kIGVhc2lseS4gVXNpbmcgYVxuLy8gY2xhc3MgYXMgYSBuYW1lc3BhY2UgZmFjaWxpdGF0ZXMgdGhpcy5cbi8vXG4vLyB0c2xpbnQ6ZGlzYWJsZTpjbGFzcy1hcy1uYW1lc3BhY2Vcbi8qKlxuICogQ2hlY2sgYW5kL29yIGZpeCB1bml2ZXJzYWxseSBkaXNsaWtlZCBjb2xvcnMuXG4gKiBDb2xvciBzY2llbmNlIHN0dWRpZXMgb2YgY29sb3IgcHJlZmVyZW5jZSBpbmRpY2F0ZSB1bml2ZXJzYWwgZGlzdGFzdGUgZm9yXG4gKiBkYXJrIHllbGxvdy1ncmVlbnMsIGFuZCBhbHNvIHNob3cgdGhpcyBpcyBjb3JyZWxhdGVkIHRvIGRpc3RhdGUgZm9yXG4gKiBiaW9sb2dpY2FsIHdhc3RlIGFuZCByb3R0aW5nIGZvb2QuXG4gKlxuICogU2VlIFBhbG1lciBhbmQgU2NobG9zcywgMjAxMCBvciBTY2hsb3NzIGFuZCBQYWxtZXIncyBDaGFwdGVyIDIxIGluIEhhbmRib29rXG4gKiBvZiBDb2xvciBQc3ljaG9sb2d5ICgyMDE1KS5cbiAqL1xuZXhwb3J0IGNsYXNzIERpc2xpa2VBbmFseXplciB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGEgY29sb3IgaXMgZGlzbGlrZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGN0IEEgY29sb3IgdG8gYmUganVkZ2VkLlxuICAgICAqIEByZXR1cm4gV2hldGhlciB0aGUgY29sb3IgaXMgZGlzbGlrZWQuXG4gICAgICpcbiAgICAgKiBEaXNsaWtlZCBpcyBkZWZpbmVkIGFzIGEgZGFyayB5ZWxsb3ctZ3JlZW4gdGhhdCBpcyBub3QgbmV1dHJhbC5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNEaXNsaWtlZChoY3QpIHtcbiAgICAgICAgY29uc3QgaHVlUGFzc2VzID0gTWF0aC5yb3VuZChoY3QuaHVlKSA+PSA5MC4wICYmIE1hdGgucm91bmQoaGN0Lmh1ZSkgPD0gMTExLjA7XG4gICAgICAgIGNvbnN0IGNocm9tYVBhc3NlcyA9IE1hdGgucm91bmQoaGN0LmNocm9tYSkgPiAxNi4wO1xuICAgICAgICBjb25zdCB0b25lUGFzc2VzID0gTWF0aC5yb3VuZChoY3QudG9uZSkgPCA2NS4wO1xuICAgICAgICByZXR1cm4gaHVlUGFzc2VzICYmIGNocm9tYVBhc3NlcyAmJiB0b25lUGFzc2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiBhIGNvbG9yIGlzIGRpc2xpa2VkLCBsaWdodGVuIGl0IHRvIG1ha2UgaXQgbGlrYWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoY3QgQSBjb2xvciB0byBiZSBqdWRnZWQuXG4gICAgICogQHJldHVybiBBIG5ldyBjb2xvciBpZiB0aGUgb3JpZ2luYWwgY29sb3IgaXMgZGlzbGlrZWQsIG9yIHRoZSBvcmlnaW5hbFxuICAgICAqICAgY29sb3IgaWYgaXQgaXMgYWNjZXB0YWJsZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZml4SWZEaXNsaWtlZChoY3QpIHtcbiAgICAgICAgaWYgKERpc2xpa2VBbmFseXplci5pc0Rpc2xpa2VkKGhjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBIY3QuZnJvbShoY3QuaHVlLCBoY3QuY2hyb21hLCA3MC4wKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGN0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc2xpa2VfYW5hbHl6ZXIuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvbnRyYXN0IH0gZnJvbSAnLi4vY29udHJhc3QvY29udHJhc3QuanMnO1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuLi91dGlscy9tYXRoX3V0aWxzLmpzJztcbi8qKlxuICogQSBjb2xvciB0aGF0IGFkanVzdHMgaXRzZWxmIGJhc2VkIG9uIFVJIHN0YXRlIHByb3ZpZGVkIGJ5IER5bmFtaWNTY2hlbWUuXG4gKlxuICogQ29sb3JzIHdpdGhvdXQgYmFja2dyb3VuZHMgZG8gbm90IGNoYW5nZSB0b25lIHdoZW4gY29udHJhc3QgY2hhbmdlcy4gQ29sb3JzXG4gKiB3aXRoIGJhY2tncm91bmRzIGJlY29tZSBjbG9zZXIgdG8gdGhlaXIgYmFja2dyb3VuZCBhcyBjb250cmFzdCBsb3dlcnMsIGFuZFxuICogZnVydGhlciB3aGVuIGNvbnRyYXN0IGluY3JlYXNlcy5cbiAqXG4gKiBQcmVmZXIgc3RhdGljIGNvbnN0cnVjdG9ycy4gVGhleSByZXF1aXJlIGVpdGhlciBhIGhleGNvZGUsIGEgcGFsZXR0ZSBhbmRcbiAqIHRvbmUsIG9yIGEgaHVlIGFuZCBjaHJvbWEuIE9wdGlvbmFsbHksIHRoZXkgY2FuIHByb3ZpZGUgYSBiYWNrZ3JvdW5kXG4gKiBEeW5hbWljQ29sb3IuXG4gKi9cbmV4cG9ydCBjbGFzcyBEeW5hbWljQ29sb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIER5bmFtaWNDb2xvciBkZWZpbmVkIGJ5IGEgVG9uYWxQYWxldHRlIGFuZCBIQ1QgdG9uZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIEZ1bmN0aW9ucyB3aXRoIER5bmFtaWNTY2hlbWUgYXMgaW5wdXQuIE11c3QgcHJvdmlkZSBhIHBhbGV0dGVcbiAgICAgKiBhbmQgdG9uZS4gTWF5IHByb3ZpZGUgYSBiYWNrZ3JvdW5kIER5bmFtaWNDb2xvciBhbmQgVG9uZURlbHRhQ29uc3RyYWludC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVBhbGV0dGUoYXJncykge1xuICAgICAgICByZXR1cm4gbmV3IER5bmFtaWNDb2xvcihhcmdzLm5hbWUgPz8gJycsIGFyZ3MucGFsZXR0ZSwgYXJncy50b25lLCBhcmdzLmlzQmFja2dyb3VuZCA/PyBmYWxzZSwgYXJncy5iYWNrZ3JvdW5kLCBhcmdzLnNlY29uZEJhY2tncm91bmQsIGFyZ3MuY29udHJhc3RDdXJ2ZSwgYXJncy50b25lRGVsdGFQYWlyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIER5bmFtaWNDb2xvci5cbiAgICAgKlxuICAgICAqIF9TdHJvbmdseV8gcHJlZmVyIHVzaW5nIG9uZSBvZiB0aGUgY29udmVuaWVuY2UgY29uc3RydWN0b3JzLiBUaGlzIGNsYXNzIGlzXG4gICAgICogYXJndWFibHkgdG9vIGZsZXhpYmxlIHRvIGVuc3VyZSBpdCBjYW4gc3VwcG9ydCBhbnkgc2NlbmFyaW8uIEZ1bmN0aW9uYWxcbiAgICAgKiBhcmd1bWVudHMgYWxsb3cgIG92ZXJyaWRpbmcgd2l0aG91dCByaXNrcyB0aGF0IGNvbWUgd2l0aCBzdWJjbGFzc2VzLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGUsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIGFkanVzdCB0b25lIGF0IG1heCBjb250cmFzdFxuICAgICAqIHRvIGJlIGF0IGEgNy4wIHJhdGlvIHdpdGggaXRzIGJhY2tncm91bmQgaXMgcHJpbmNpcGxlZCBhbmRcbiAgICAgKiBtYXRjaGVzIGFjY2Vzc2liaWxpdHkgZ3VpZGFuY2UuIFRoYXQgZG9lcyBub3QgbWVhbiBpdCdzIHRoZSBkZXNpcmVkXG4gICAgICogYXBwcm9hY2ggZm9yIF9ldmVyeV8gZGVzaWduIHN5c3RlbSwgYW5kIGV2ZXJ5IGNvbG9yIHBhaXJpbmcsXG4gICAgICogYWx3YXlzLCBpbiBldmVyeSBjYXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGR5bmFtaWMgY29sb3IuIERlZmF1bHRzIHRvIGVtcHR5LlxuICAgICAqIEBwYXJhbSBwYWxldHRlIEZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYSBUb25hbFBhbGV0dGUgZ2l2ZW5cbiAgICAgKiBEeW5hbWljU2NoZW1lLiBBIFRvbmFsUGFsZXR0ZSBpcyBkZWZpbmVkIGJ5IGEgaHVlIGFuZCBjaHJvbWEsIHNvIHRoaXNcbiAgICAgKiByZXBsYWNlcyB0aGUgbmVlZCB0byBzcGVjaWZ5IGh1ZS9jaHJvbWEuIEJ5IHByb3ZpZGluZyBhIHRvbmFsIHBhbGV0dGUsIHdoZW5cbiAgICAgKiBjb250cmFzdCBhZGp1c3RtZW50cyBhcmUgbWFkZSwgaW50ZW5kZWQgY2hyb21hIGNhbiBiZSBwcmVzZXJ2ZWQuXG4gICAgICogQHBhcmFtIHRvbmUgRnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhIHRvbmUsIGdpdmVuIGEgRHluYW1pY1NjaGVtZS5cbiAgICAgKiBAcGFyYW0gaXNCYWNrZ3JvdW5kIFdoZXRoZXIgdGhpcyBkeW5hbWljIGNvbG9yIGlzIGEgYmFja2dyb3VuZCwgd2l0aFxuICAgICAqIHNvbWUgb3RoZXIgY29sb3IgYXMgdGhlIGZvcmVncm91bmQuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEBwYXJhbSBiYWNrZ3JvdW5kIFRoZSBiYWNrZ3JvdW5kIG9mIHRoZSBkeW5hbWljIGNvbG9yIChhcyBhIGZ1bmN0aW9uIG9mIGFcbiAgICAgKiAgICAgYER5bmFtaWNTY2hlbWVgKSwgaWYgaXQgZXhpc3RzLlxuICAgICAqIEBwYXJhbSBzZWNvbmRCYWNrZ3JvdW5kIEEgc2Vjb25kIGJhY2tncm91bmQgb2YgdGhlIGR5bmFtaWMgY29sb3IgKGFzIGFcbiAgICAgKiAgICAgZnVuY3Rpb24gb2YgYSBgRHluYW1pY1NjaGVtZWApLCBpZiBpdFxuICAgICAqIGV4aXN0cy5cbiAgICAgKiBAcGFyYW0gY29udHJhc3RDdXJ2ZSBBIGBDb250cmFzdEN1cnZlYCBvYmplY3Qgc3BlY2lmeWluZyBob3cgaXRzIGNvbnRyYXN0XG4gICAgICogYWdhaW5zdCBpdHMgYmFja2dyb3VuZCBzaG91bGQgYmVoYXZlIGluIHZhcmlvdXMgY29udHJhc3QgbGV2ZWxzIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHRvbmVEZWx0YVBhaXIgQSBgVG9uZURlbHRhUGFpcmAgb2JqZWN0IHNwZWNpZnlpbmcgYSB0b25lIGRlbHRhXG4gICAgICogY29uc3RyYWludCBiZXR3ZWVuIHR3byBjb2xvcnMuIE9uZSBvZiB0aGVtIG11c3QgYmUgdGhlIGNvbG9yIGJlaW5nXG4gICAgICogY29uc3RydWN0ZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgcGFsZXR0ZSwgdG9uZSwgaXNCYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLCBzZWNvbmRCYWNrZ3JvdW5kLCBjb250cmFzdEN1cnZlLCB0b25lRGVsdGFQYWlyKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucGFsZXR0ZSA9IHBhbGV0dGU7XG4gICAgICAgIHRoaXMudG9uZSA9IHRvbmU7XG4gICAgICAgIHRoaXMuaXNCYWNrZ3JvdW5kID0gaXNCYWNrZ3JvdW5kO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuICAgICAgICB0aGlzLnNlY29uZEJhY2tncm91bmQgPSBzZWNvbmRCYWNrZ3JvdW5kO1xuICAgICAgICB0aGlzLmNvbnRyYXN0Q3VydmUgPSBjb250cmFzdEN1cnZlO1xuICAgICAgICB0aGlzLnRvbmVEZWx0YVBhaXIgPSB0b25lRGVsdGFQYWlyO1xuICAgICAgICB0aGlzLmhjdENhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoKCFiYWNrZ3JvdW5kKSAmJiBzZWNvbmRCYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbG9yICR7bmFtZX0gaGFzIHNlY29uZEJhY2tncm91bmRgICtcbiAgICAgICAgICAgICAgICBgZGVmaW5lZCwgYnV0IGJhY2tncm91bmQgaXMgbm90IGRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghYmFja2dyb3VuZCkgJiYgY29udHJhc3RDdXJ2ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb2xvciAke25hbWV9IGhhcyBjb250cmFzdEN1cnZlYCArXG4gICAgICAgICAgICAgICAgYGRlZmluZWQsIGJ1dCBiYWNrZ3JvdW5kIGlzIG5vdCBkZWZpbmVkLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kICYmICFjb250cmFzdEN1cnZlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbG9yICR7bmFtZX0gaGFzIGJhY2tncm91bmRgICtcbiAgICAgICAgICAgICAgICBgZGVmaW5lZCwgYnV0IGNvbnRyYXN0Q3VydmUgaXMgbm90IGRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgQVJHQiBpbnRlZ2VyIChpLmUuIGEgaGV4IGNvZGUpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtZSBEZWZpbmVzIHRoZSBjb25kaXRpb25zIG9mIHRoZSB1c2VyIGludGVyZmFjZSwgZm9yIGV4YW1wbGUsXG4gICAgICogd2hldGhlciBvciBub3QgaXQgaXMgZGFyayBtb2RlIG9yIGxpZ2h0IG1vZGUsIGFuZCB3aGF0IHRoZSBkZXNpcmVkXG4gICAgICogY29udHJhc3QgbGV2ZWwgaXMuXG4gICAgICovXG4gICAgZ2V0QXJnYihzY2hlbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SGN0KHNjaGVtZSkudG9JbnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgY29sb3IsIGV4cHJlc3NlZCBpbiB0aGUgSENUIGNvbG9yIHNwYWNlLCB0aGF0IHRoaXNcbiAgICAgKiBEeW5hbWljQ29sb3IgaXMgdW5kZXIgdGhlIGNvbmRpdGlvbnMgaW4gc2NoZW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtZSBEZWZpbmVzIHRoZSBjb25kaXRpb25zIG9mIHRoZSB1c2VyIGludGVyZmFjZSwgZm9yIGV4YW1wbGUsXG4gICAgICogd2hldGhlciBvciBub3QgaXQgaXMgZGFyayBtb2RlIG9yIGxpZ2h0IG1vZGUsIGFuZCB3aGF0IHRoZSBkZXNpcmVkXG4gICAgICogY29udHJhc3QgbGV2ZWwgaXMuXG4gICAgICovXG4gICAgZ2V0SGN0KHNjaGVtZSkge1xuICAgICAgICBjb25zdCBjYWNoZWRBbnN3ZXIgPSB0aGlzLmhjdENhY2hlLmdldChzY2hlbWUpO1xuICAgICAgICBpZiAoY2FjaGVkQW5zd2VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRBbnN3ZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9uZSA9IHRoaXMuZ2V0VG9uZShzY2hlbWUpO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB0aGlzLnBhbGV0dGUoc2NoZW1lKS5nZXRIY3QodG9uZSk7XG4gICAgICAgIGlmICh0aGlzLmhjdENhY2hlLnNpemUgPiA0KSB7XG4gICAgICAgICAgICB0aGlzLmhjdENhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oY3RDYWNoZS5zZXQoc2NoZW1lLCBhbnN3ZXIpO1xuICAgICAgICByZXR1cm4gYW5zd2VyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSB0b25lLCBUIGluIHRoZSBIQ1QgY29sb3Igc3BhY2UsIHRoYXQgdGhpcyBEeW5hbWljQ29sb3IgaXMgdW5kZXJcbiAgICAgKiB0aGUgY29uZGl0aW9ucyBpbiBzY2hlbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NoZW1lIERlZmluZXMgdGhlIGNvbmRpdGlvbnMgb2YgdGhlIHVzZXIgaW50ZXJmYWNlLCBmb3IgZXhhbXBsZSxcbiAgICAgKiB3aGV0aGVyIG9yIG5vdCBpdCBpcyBkYXJrIG1vZGUgb3IgbGlnaHQgbW9kZSwgYW5kIHdoYXQgdGhlIGRlc2lyZWRcbiAgICAgKiBjb250cmFzdCBsZXZlbCBpcy5cbiAgICAgKi9cbiAgICBnZXRUb25lKHNjaGVtZSkge1xuICAgICAgICBjb25zdCBkZWNyZWFzaW5nQ29udHJhc3QgPSBzY2hlbWUuY29udHJhc3RMZXZlbCA8IDA7XG4gICAgICAgIC8vIENhc2UgMTogZHVhbCBmb3JlZ3JvdW5kLCBwYWlyIG9mIGNvbG9ycyB3aXRoIGRlbHRhIGNvbnN0cmFpbnQuXG4gICAgICAgIGlmICh0aGlzLnRvbmVEZWx0YVBhaXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvbmVEZWx0YVBhaXIgPSB0aGlzLnRvbmVEZWx0YVBhaXIoc2NoZW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHJvbGVBID0gdG9uZURlbHRhUGFpci5yb2xlQTtcbiAgICAgICAgICAgIGNvbnN0IHJvbGVCID0gdG9uZURlbHRhUGFpci5yb2xlQjtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gdG9uZURlbHRhUGFpci5kZWx0YTtcbiAgICAgICAgICAgIGNvbnN0IHBvbGFyaXR5ID0gdG9uZURlbHRhUGFpci5wb2xhcml0eTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXlUb2dldGhlciA9IHRvbmVEZWx0YVBhaXIuc3RheVRvZ2V0aGVyO1xuICAgICAgICAgICAgY29uc3QgYmcgPSB0aGlzLmJhY2tncm91bmQoc2NoZW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGJnVG9uZSA9IGJnLmdldFRvbmUoc2NoZW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGFJc05lYXJlciA9IChwb2xhcml0eSA9PT0gJ25lYXJlcicgfHxcbiAgICAgICAgICAgICAgICAocG9sYXJpdHkgPT09ICdsaWdodGVyJyAmJiAhc2NoZW1lLmlzRGFyaykgfHxcbiAgICAgICAgICAgICAgICAocG9sYXJpdHkgPT09ICdkYXJrZXInICYmIHNjaGVtZS5pc0RhcmspKTtcbiAgICAgICAgICAgIGNvbnN0IG5lYXJlciA9IGFJc05lYXJlciA/IHJvbGVBIDogcm9sZUI7XG4gICAgICAgICAgICBjb25zdCBmYXJ0aGVyID0gYUlzTmVhcmVyID8gcm9sZUIgOiByb2xlQTtcbiAgICAgICAgICAgIGNvbnN0IGFtTmVhcmVyID0gdGhpcy5uYW1lID09PSBuZWFyZXIubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGFuc2lvbkRpciA9IHNjaGVtZS5pc0RhcmsgPyAxIDogLTE7XG4gICAgICAgICAgICAvLyAxc3Qgcm91bmQ6IHNvbHZlIHRvIG1pbiwgZWFjaFxuICAgICAgICAgICAgY29uc3QgbkNvbnRyYXN0ID0gbmVhcmVyLmNvbnRyYXN0Q3VydmUuZ2V0Q29udHJhc3Qoc2NoZW1lLmNvbnRyYXN0TGV2ZWwpO1xuICAgICAgICAgICAgY29uc3QgZkNvbnRyYXN0ID0gZmFydGhlci5jb250cmFzdEN1cnZlLmdldENvbnRyYXN0KHNjaGVtZS5jb250cmFzdExldmVsKTtcbiAgICAgICAgICAgIC8vIElmIGEgY29sb3IgaXMgZ29vZCBlbm91Z2gsIGl0IGlzIG5vdCBhZGp1c3RlZC5cbiAgICAgICAgICAgIC8vIEluaXRpYWwgYW5kIGFkanVzdGVkIHRvbmVzIGZvciBgbmVhcmVyYFxuICAgICAgICAgICAgY29uc3QgbkluaXRpYWxUb25lID0gbmVhcmVyLnRvbmUoc2NoZW1lKTtcbiAgICAgICAgICAgIGxldCBuVG9uZSA9IENvbnRyYXN0LnJhdGlvT2ZUb25lcyhiZ1RvbmUsIG5Jbml0aWFsVG9uZSkgPj0gbkNvbnRyYXN0ID9cbiAgICAgICAgICAgICAgICBuSW5pdGlhbFRvbmUgOlxuICAgICAgICAgICAgICAgIER5bmFtaWNDb2xvci5mb3JlZ3JvdW5kVG9uZShiZ1RvbmUsIG5Db250cmFzdCk7XG4gICAgICAgICAgICAvLyBJbml0aWFsIGFuZCBhZGp1c3RlZCB0b25lcyBmb3IgYGZhcnRoZXJgXG4gICAgICAgICAgICBjb25zdCBmSW5pdGlhbFRvbmUgPSBmYXJ0aGVyLnRvbmUoc2NoZW1lKTtcbiAgICAgICAgICAgIGxldCBmVG9uZSA9IENvbnRyYXN0LnJhdGlvT2ZUb25lcyhiZ1RvbmUsIGZJbml0aWFsVG9uZSkgPj0gZkNvbnRyYXN0ID9cbiAgICAgICAgICAgICAgICBmSW5pdGlhbFRvbmUgOlxuICAgICAgICAgICAgICAgIER5bmFtaWNDb2xvci5mb3JlZ3JvdW5kVG9uZShiZ1RvbmUsIGZDb250cmFzdCk7XG4gICAgICAgICAgICBpZiAoZGVjcmVhc2luZ0NvbnRyYXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgZGVjcmVhc2luZyBjb250cmFzdCwgYWRqdXN0IGNvbG9yIHRvIHRoZSBcImJhcmUgbWluaW11bVwiXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBzYXRpc2ZpZXMgY29udHJhc3QuXG4gICAgICAgICAgICAgICAgblRvbmUgPSBEeW5hbWljQ29sb3IuZm9yZWdyb3VuZFRvbmUoYmdUb25lLCBuQ29udHJhc3QpO1xuICAgICAgICAgICAgICAgIGZUb25lID0gRHluYW1pY0NvbG9yLmZvcmVncm91bmRUb25lKGJnVG9uZSwgZkNvbnRyYXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoZlRvbmUgLSBuVG9uZSkgKiBleHBhbnNpb25EaXIgPj0gZGVsdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBHb29kISBUb25lcyBzYXRpc2Z5IHRoZSBjb25zdHJhaW50OyBubyBjaGFuZ2UgbmVlZGVkLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gMm5kIHJvdW5kOiBleHBhbmQgZmFydGhlciB0byBtYXRjaCBkZWx0YS5cbiAgICAgICAgICAgICAgICBmVG9uZSA9IG1hdGguY2xhbXBEb3VibGUoMCwgMTAwLCBuVG9uZSArIGRlbHRhICogZXhwYW5zaW9uRGlyKTtcbiAgICAgICAgICAgICAgICBpZiAoKGZUb25lIC0gblRvbmUpICogZXhwYW5zaW9uRGlyID49IGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdvb2QhIFRvbmVzIG5vdyBzYXRpc2Z5IHRoZSBjb25zdHJhaW50OyBubyBjaGFuZ2UgbmVlZGVkLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gM3JkIHJvdW5kOiBjb250cmFjdCBuZWFyZXIgdG8gbWF0Y2ggZGVsdGEuXG4gICAgICAgICAgICAgICAgICAgIG5Ub25lID0gbWF0aC5jbGFtcERvdWJsZSgwLCAxMDAsIGZUb25lIC0gZGVsdGEgKiBleHBhbnNpb25EaXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF2b2lkcyB0aGUgNTAtNTkgYXdrd2FyZCB6b25lLlxuICAgICAgICAgICAgaWYgKDUwIDw9IG5Ub25lICYmIG5Ub25lIDwgNjApIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBgbmVhcmVyYCBpcyBpbiB0aGUgYXdrd2FyZCB6b25lLCBtb3ZlIGl0IGF3YXksIHRvZ2V0aGVyIHdpdGhcbiAgICAgICAgICAgICAgICAvLyBgZmFydGhlcmAuXG4gICAgICAgICAgICAgICAgaWYgKGV4cGFuc2lvbkRpciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgblRvbmUgPSA2MDtcbiAgICAgICAgICAgICAgICAgICAgZlRvbmUgPSBNYXRoLm1heChmVG9uZSwgblRvbmUgKyBkZWx0YSAqIGV4cGFuc2lvbkRpcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuVG9uZSA9IDQ5O1xuICAgICAgICAgICAgICAgICAgICBmVG9uZSA9IE1hdGgubWluKGZUb25lLCBuVG9uZSArIGRlbHRhICogZXhwYW5zaW9uRGlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICg1MCA8PSBmVG9uZSAmJiBmVG9uZSA8IDYwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXlUb2dldGhlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXhlcyBib3RoLCB0byBhdm9pZCB0d28gY29sb3JzIG9uIG9wcG9zaXRlIHNpZGVzIG9mIHRoZSBcImF3a3dhcmRcbiAgICAgICAgICAgICAgICAgICAgLy8gem9uZVwiLlxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwYW5zaW9uRGlyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgblRvbmUgPSA2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZUb25lID0gTWF0aC5tYXgoZlRvbmUsIG5Ub25lICsgZGVsdGEgKiBleHBhbnNpb25EaXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgblRvbmUgPSA0OTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZUb25lID0gTWF0aC5taW4oZlRvbmUsIG5Ub25lICsgZGVsdGEgKiBleHBhbnNpb25EaXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3QgcmVxdWlyZWQgdG8gc3RheSB0b2dldGhlcjsgZml4ZXMganVzdCBvbmUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBhbnNpb25EaXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmVG9uZSA9IDYwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZlRvbmUgPSA0OTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJldHVybnMgYG5Ub25lYCBpZiB0aGlzIGNvbG9yIGlzIGBuZWFyZXJgLCBvdGhlcndpc2UgYGZUb25lYC5cbiAgICAgICAgICAgIHJldHVybiBhbU5lYXJlciA/IG5Ub25lIDogZlRvbmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBDYXNlIDI6IE5vIGNvbnRyYXN0IHBhaXI7IGp1c3Qgc29sdmUgZm9yIGl0c2VsZi5cbiAgICAgICAgICAgIGxldCBhbnN3ZXIgPSB0aGlzLnRvbmUoc2NoZW1lKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJhY2tncm91bmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXI7IC8vIE5vIGFkanVzdG1lbnQgZm9yIGNvbG9ycyB3aXRoIG5vIGJhY2tncm91bmQuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiZ1RvbmUgPSB0aGlzLmJhY2tncm91bmQoc2NoZW1lKS5nZXRUb25lKHNjaGVtZSk7XG4gICAgICAgICAgICBjb25zdCBkZXNpcmVkUmF0aW8gPSB0aGlzLmNvbnRyYXN0Q3VydmUuZ2V0Q29udHJhc3Qoc2NoZW1lLmNvbnRyYXN0TGV2ZWwpO1xuICAgICAgICAgICAgaWYgKENvbnRyYXN0LnJhdGlvT2ZUb25lcyhiZ1RvbmUsIGFuc3dlcikgPj0gZGVzaXJlZFJhdGlvKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgXCJpbXByb3ZlXCIgd2hhdCdzIGdvb2QgZW5vdWdoLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUm91Z2ggaW1wcm92ZW1lbnQuXG4gICAgICAgICAgICAgICAgYW5zd2VyID0gRHluYW1pY0NvbG9yLmZvcmVncm91bmRUb25lKGJnVG9uZSwgZGVzaXJlZFJhdGlvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWNyZWFzaW5nQ29udHJhc3QpIHtcbiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBEeW5hbWljQ29sb3IuZm9yZWdyb3VuZFRvbmUoYmdUb25lLCBkZXNpcmVkUmF0aW8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kICYmIDUwIDw9IGFuc3dlciAmJiBhbnN3ZXIgPCA2MCkge1xuICAgICAgICAgICAgICAgIC8vIE11c3QgYWRqdXN0XG4gICAgICAgICAgICAgICAgaWYgKENvbnRyYXN0LnJhdGlvT2ZUb25lcyg0OSwgYmdUb25lKSA+PSBkZXNpcmVkUmF0aW8pIHtcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyID0gNDk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgPSA2MDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZWNvbmRCYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FzZSAzOiBBZGp1c3QgZm9yIGR1YWwgYmFja2dyb3VuZHMuXG4gICAgICAgICAgICAgICAgY29uc3QgW2JnMSwgYmcyXSA9IFt0aGlzLmJhY2tncm91bmQsIHRoaXMuc2Vjb25kQmFja2dyb3VuZF07XG4gICAgICAgICAgICAgICAgY29uc3QgW2JnVG9uZTEsIGJnVG9uZTJdID0gW2JnMShzY2hlbWUpLmdldFRvbmUoc2NoZW1lKSwgYmcyKHNjaGVtZSkuZ2V0VG9uZShzY2hlbWUpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBbdXBwZXIsIGxvd2VyXSA9IFtNYXRoLm1heChiZ1RvbmUxLCBiZ1RvbmUyKSwgTWF0aC5taW4oYmdUb25lMSwgYmdUb25lMildO1xuICAgICAgICAgICAgICAgIGlmIChDb250cmFzdC5yYXRpb09mVG9uZXModXBwZXIsIGFuc3dlcikgPj0gZGVzaXJlZFJhdGlvICYmXG4gICAgICAgICAgICAgICAgICAgIENvbnRyYXN0LnJhdGlvT2ZUb25lcyhsb3dlciwgYW5zd2VyKSA+PSBkZXNpcmVkUmF0aW8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhlIGRhcmtlc3QgbGlnaHQgdG9uZSB0aGF0IHNhdGlzZmllcyB0aGUgZGVzaXJlZCByYXRpbyxcbiAgICAgICAgICAgICAgICAvLyBvciAtMSBpZiBzdWNoIHJhdGlvIGNhbm5vdCBiZSByZWFjaGVkLlxuICAgICAgICAgICAgICAgIGNvbnN0IGxpZ2h0T3B0aW9uID0gQ29udHJhc3QubGlnaHRlcih1cHBlciwgZGVzaXJlZFJhdGlvKTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgbGlnaHRlc3QgZGFyayB0b25lIHRoYXQgc2F0aXNmaWVzIHRoZSBkZXNpcmVkIHJhdGlvLFxuICAgICAgICAgICAgICAgIC8vIG9yIC0xIGlmIHN1Y2ggcmF0aW8gY2Fubm90IGJlIHJlYWNoZWQuXG4gICAgICAgICAgICAgICAgY29uc3QgZGFya09wdGlvbiA9IENvbnRyYXN0LmRhcmtlcihsb3dlciwgZGVzaXJlZFJhdGlvKTtcbiAgICAgICAgICAgICAgICAvLyBUb25lcyBzdWl0YWJsZSBmb3IgdGhlIGZvcmVncm91bmQuXG4gICAgICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChsaWdodE9wdGlvbiAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZXMucHVzaChsaWdodE9wdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKGRhcmtPcHRpb24gIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVzLnB1c2goZGFya09wdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlZmVyc0xpZ2h0ID0gRHluYW1pY0NvbG9yLnRvbmVQcmVmZXJzTGlnaHRGb3JlZ3JvdW5kKGJnVG9uZTEpIHx8XG4gICAgICAgICAgICAgICAgICAgIER5bmFtaWNDb2xvci50b25lUHJlZmVyc0xpZ2h0Rm9yZWdyb3VuZChiZ1RvbmUyKTtcbiAgICAgICAgICAgICAgICBpZiAocHJlZmVyc0xpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobGlnaHRPcHRpb24gPCAwKSA/IDEwMCA6IGxpZ2h0T3B0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF2YWlsYWJsZXNbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAoZGFya09wdGlvbiA8IDApID8gMCA6IGRhcmtPcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYW5zd2VyO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgYmFja2dyb3VuZCB0b25lLCBmaW5kIGEgZm9yZWdyb3VuZCB0b25lLCB3aGlsZSBlbnN1cmluZyB0aGV5IHJlYWNoXG4gICAgICogYSBjb250cmFzdCByYXRpbyB0aGF0IGlzIGFzIGNsb3NlIHRvIFtyYXRpb10gYXMgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmdUb25lIFRvbmUgaW4gSENULiBSYW5nZSBpcyAwIHRvIDEwMCwgdW5kZWZpbmVkIGJlaGF2aW9yIHdoZW4gaXRcbiAgICAgKiAgICAgZmFsbHMgb3V0c2lkZSB0aGF0IHJhbmdlLlxuICAgICAqIEBwYXJhbSByYXRpbyBUaGUgY29udHJhc3QgcmF0aW8gZGVzaXJlZCBiZXR3ZWVuIGJnVG9uZSBhbmQgdGhlIHJldHVyblxuICAgICAqICAgICB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZm9yZWdyb3VuZFRvbmUoYmdUb25lLCByYXRpbykge1xuICAgICAgICBjb25zdCBsaWdodGVyVG9uZSA9IENvbnRyYXN0LmxpZ2h0ZXJVbnNhZmUoYmdUb25lLCByYXRpbyk7XG4gICAgICAgIGNvbnN0IGRhcmtlclRvbmUgPSBDb250cmFzdC5kYXJrZXJVbnNhZmUoYmdUb25lLCByYXRpbyk7XG4gICAgICAgIGNvbnN0IGxpZ2h0ZXJSYXRpbyA9IENvbnRyYXN0LnJhdGlvT2ZUb25lcyhsaWdodGVyVG9uZSwgYmdUb25lKTtcbiAgICAgICAgY29uc3QgZGFya2VyUmF0aW8gPSBDb250cmFzdC5yYXRpb09mVG9uZXMoZGFya2VyVG9uZSwgYmdUb25lKTtcbiAgICAgICAgY29uc3QgcHJlZmVyTGlnaHRlciA9IER5bmFtaWNDb2xvci50b25lUHJlZmVyc0xpZ2h0Rm9yZWdyb3VuZChiZ1RvbmUpO1xuICAgICAgICBpZiAocHJlZmVyTGlnaHRlcikge1xuICAgICAgICAgICAgLy8gVGhpcyBoYW5kbGVzIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgaW5pdGlhbCBjb250cmFzdCByYXRpbyBpcyBoaWdoXG4gICAgICAgICAgICAvLyAoZXguIDEzLjApLCBhbmQgdGhlIHJhdGlvIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24gaXMgdGhhdCBoaWdoXG4gICAgICAgICAgICAvLyByYXRpbywgYW5kIGJvdGggdGhlIGxpZ2h0ZXIgYW5kIGRhcmtlciByYXRpbyBmYWlscyB0byBwYXNzIHRoYXRcbiAgICAgICAgICAgIC8vIHJhdGlvLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoaXMgd2FzIG9ic2VydmVkIHdpdGggVG9uYWwgU3BvdCdzIE9uIFByaW1hcnkgQ29udGFpbmVyIHR1cm5pbmdcbiAgICAgICAgICAgIC8vIGJsYWNrIG1vbWVudGFyaWx5IGJldHdlZW4gaGlnaCBhbmQgbWF4IGNvbnRyYXN0IGluIGxpZ2h0IG1vZGUuIFBDJ3NcbiAgICAgICAgICAgIC8vIHN0YW5kYXJkIHRvbmUgd2FzIFQ5MCwgT1BDJ3Mgd2FzIFQxMCwgaXQgd2FzIGxpZ2h0IG1vZGUsIGFuZCB0aGVcbiAgICAgICAgICAgIC8vIGNvbnRyYXN0IHZhbHVlIHdhcyAwLjY1Njg1MjEyMjEwMzIzMzEuXG4gICAgICAgICAgICBjb25zdCBuZWdsaWdpYmxlRGlmZmVyZW5jZSA9IE1hdGguYWJzKGxpZ2h0ZXJSYXRpbyAtIGRhcmtlclJhdGlvKSA8IDAuMSAmJlxuICAgICAgICAgICAgICAgIGxpZ2h0ZXJSYXRpbyA8IHJhdGlvICYmIGRhcmtlclJhdGlvIDwgcmF0aW87XG4gICAgICAgICAgICByZXR1cm4gbGlnaHRlclJhdGlvID49IHJhdGlvIHx8IGxpZ2h0ZXJSYXRpbyA+PSBkYXJrZXJSYXRpbyB8fFxuICAgICAgICAgICAgICAgIG5lZ2xpZ2libGVEaWZmZXJlbmNlID9cbiAgICAgICAgICAgICAgICBsaWdodGVyVG9uZSA6XG4gICAgICAgICAgICAgICAgZGFya2VyVG9uZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXJrZXJSYXRpbyA+PSByYXRpbyB8fCBkYXJrZXJSYXRpbyA+PSBsaWdodGVyUmF0aW8gPyBkYXJrZXJUb25lIDpcbiAgICAgICAgICAgICAgICBsaWdodGVyVG9uZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgW3RvbmVdIHByZWZlcnMgYSBsaWdodCBmb3JlZ3JvdW5kLlxuICAgICAqXG4gICAgICogUGVvcGxlIHByZWZlciB3aGl0ZSBmb3JlZ3JvdW5kcyBvbiB+VDYwLTcwLiBPYnNlcnZlZCBvdmVyIHRpbWUsIGFuZCBhbHNvXG4gICAgICogYnkgQW5kcmV3IFNvbWVycyBkdXJpbmcgcmVzZWFyY2ggZm9yIEFQQ0EuXG4gICAgICpcbiAgICAgKiBUNjAgdXNlZCBhcyB0byBjcmVhdGUgdGhlIHNtYWxsZXN0IGRpc2NvbnRpbnVpdHkgcG9zc2libGUgd2hlbiBza2lwcGluZ1xuICAgICAqIGRvd24gdG8gVDQ5IGluIG9yZGVyIHRvIGVuc3VyZSBsaWdodCBmb3JlZ3JvdW5kcy5cbiAgICAgKiBTaW5jZSBgdGVydGlhcnlDb250YWluZXJgIGluIGRhcmsgbW9ub2Nocm9tZSBzY2hlbWUgcmVxdWlyZXMgYSB0b25lIG9mXG4gICAgICogNjAsIGl0IHNob3VsZCBub3QgYmUgYWRqdXN0ZWQuIFRoZXJlZm9yZSwgNjAgaXMgZXhjbHVkZWQgaGVyZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdG9uZVByZWZlcnNMaWdodEZvcmVncm91bmQodG9uZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0b25lKSA8IDYwLjA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBbdG9uZV0gY2FuIHJlYWNoIGEgY29udHJhc3QgcmF0aW8gb2YgNC41IHdpdGggYSBsaWdodGVyXG4gICAgICogY29sb3IuXG4gICAgICovXG4gICAgc3RhdGljIHRvbmVBbGxvd3NMaWdodEZvcmVncm91bmQodG9uZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0b25lKSA8PSA0OS4wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGp1c3QgYSB0b25lIHN1Y2ggdGhhdCB3aGl0ZSBoYXMgNC41IGNvbnRyYXN0LCBpZiB0aGUgdG9uZSBpc1xuICAgICAqIHJlYXNvbmFibHkgY2xvc2UgdG8gc3VwcG9ydGluZyBpdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZW5hYmxlTGlnaHRGb3JlZ3JvdW5kKHRvbmUpIHtcbiAgICAgICAgaWYgKER5bmFtaWNDb2xvci50b25lUHJlZmVyc0xpZ2h0Rm9yZWdyb3VuZCh0b25lKSAmJlxuICAgICAgICAgICAgIUR5bmFtaWNDb2xvci50b25lQWxsb3dzTGlnaHRGb3JlZ3JvdW5kKHRvbmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gNDkuMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9uZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1keW5hbWljX2NvbG9yLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFNldCBvZiB0aGVtZXMgc3VwcG9ydGVkIGJ5IER5bmFtaWMgQ29sb3IuXG4gKiBJbnN0YW50aWF0ZSB0aGUgY29ycmVzcG9uZGluZyBzdWJjbGFzcywgZXguIFNjaGVtZVRvbmFsU3BvdCwgdG8gY3JlYXRlXG4gKiBjb2xvcnMgY29ycmVzcG9uZGluZyB0byB0aGUgdGhlbWUuXG4gKi9cbmV4cG9ydCB2YXIgVmFyaWFudDtcbihmdW5jdGlvbiAoVmFyaWFudCkge1xuICAgIFZhcmlhbnRbVmFyaWFudFtcIk1PTk9DSFJPTUVcIl0gPSAwXSA9IFwiTU9OT0NIUk9NRVwiO1xuICAgIFZhcmlhbnRbVmFyaWFudFtcIk5FVVRSQUxcIl0gPSAxXSA9IFwiTkVVVFJBTFwiO1xuICAgIFZhcmlhbnRbVmFyaWFudFtcIlRPTkFMX1NQT1RcIl0gPSAyXSA9IFwiVE9OQUxfU1BPVFwiO1xuICAgIFZhcmlhbnRbVmFyaWFudFtcIlZJQlJBTlRcIl0gPSAzXSA9IFwiVklCUkFOVFwiO1xuICAgIFZhcmlhbnRbVmFyaWFudFtcIkVYUFJFU1NJVkVcIl0gPSA0XSA9IFwiRVhQUkVTU0lWRVwiO1xuICAgIFZhcmlhbnRbVmFyaWFudFtcIkZJREVMSVRZXCJdID0gNV0gPSBcIkZJREVMSVRZXCI7XG4gICAgVmFyaWFudFtWYXJpYW50W1wiQ09OVEVOVFwiXSA9IDZdID0gXCJDT05URU5UXCI7XG4gICAgVmFyaWFudFtWYXJpYW50W1wiUkFJTkJPV1wiXSA9IDddID0gXCJSQUlOQk9XXCI7XG4gICAgVmFyaWFudFtWYXJpYW50W1wiRlJVSVRfU0FMQURcIl0gPSA4XSA9IFwiRlJVSVRfU0FMQURcIjtcbn0pKFZhcmlhbnQgfHwgKFZhcmlhbnQgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFyaWFudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuLi91dGlscy9tYXRoX3V0aWxzLmpzJztcbi8qKlxuICogQSBjbGFzcyBjb250YWluaW5nIHRoZSBjb250cmFzdCBjdXJ2ZSBmb3IgYSBkeW5hbWljIGNvbG9yIG9uIGl0cyBiYWNrZ3JvdW5kLlxuICpcbiAqIFRoZSBmb3VyIHZhbHVlcyBjb3JyZXNwb25kIHRvIGNvbnRyYXN0IHJlcXVpcmVtZW50cyBmb3IgY29udHJhc3QgbGV2ZWxzXG4gKiAtMS4wLCAwLjAsIDAuNSwgYW5kIDEuMCwgcmVzcGVjdGl2ZWx5LlxuICovXG5leHBvcnQgY2xhc3MgQ29udHJhc3RDdXJ2ZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBDb250cmFzdEN1cnZlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbG93IENvbnRyYXN0IHJlcXVpcmVtZW50IGZvciBjb250cmFzdCBsZXZlbCAtMS4wXG4gICAgICogQHBhcmFtIG5vcm1hbCBDb250cmFzdCByZXF1aXJlbWVudCBmb3IgY29udHJhc3QgbGV2ZWwgMC4wXG4gICAgICogQHBhcmFtIG1lZGl1bSBDb250cmFzdCByZXF1aXJlbWVudCBmb3IgY29udHJhc3QgbGV2ZWwgMC41XG4gICAgICogQHBhcmFtIGhpZ2ggQ29udHJhc3QgcmVxdWlyZW1lbnQgZm9yIGNvbnRyYXN0IGxldmVsIDEuMFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvdywgbm9ybWFsLCBtZWRpdW0sIGhpZ2gpIHtcbiAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgICAgICB0aGlzLm1lZGl1bSA9IG1lZGl1bTtcbiAgICAgICAgdGhpcy5oaWdoID0gaGlnaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29udHJhc3QgcmF0aW8gYXQgYSBnaXZlbiBjb250cmFzdCBsZXZlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250cmFzdExldmVsIFRoZSBjb250cmFzdCBsZXZlbC4gMC4wIGlzIHRoZSBkZWZhdWx0IChub3JtYWwpO1xuICAgICAqIC0xLjAgaXMgdGhlIGxvd2VzdDsgMS4wIGlzIHRoZSBoaWdoZXN0LlxuICAgICAqIEByZXR1cm4gVGhlIGNvbnRyYXN0IHJhdGlvLCBhIG51bWJlciBiZXR3ZWVuIDEuMCBhbmQgMjEuMC5cbiAgICAgKi9cbiAgICBnZXRDb250cmFzdChjb250cmFzdExldmVsKSB7XG4gICAgICAgIGlmIChjb250cmFzdExldmVsIDw9IC0xLjApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvdztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250cmFzdExldmVsIDwgMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0aC5sZXJwKHRoaXMubG93LCB0aGlzLm5vcm1hbCwgKGNvbnRyYXN0TGV2ZWwgLSAoLTEpKSAvIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbnRyYXN0TGV2ZWwgPCAwLjUpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRoLmxlcnAodGhpcy5ub3JtYWwsIHRoaXMubWVkaXVtLCAoY29udHJhc3RMZXZlbCAtIDApIC8gMC41KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250cmFzdExldmVsIDwgMS4wKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0aC5sZXJwKHRoaXMubWVkaXVtLCB0aGlzLmhpZ2gsIChjb250cmFzdExldmVsIC0gMC41KSAvIDAuNSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oaWdoO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhc3RfY3VydmUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRG9jdW1lbnRzIGEgY29uc3RyYWludCBiZXR3ZWVuIHR3byBEeW5hbWljQ29sb3JzLCBpbiB3aGljaCB0aGVpciB0b25lcyBtdXN0XG4gKiBoYXZlIGEgY2VydGFpbiBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuXG4gKlxuICogUHJlZmVyIGEgRHluYW1pY0NvbG9yIHdpdGggYSBiYWNrZ3JvdW5kLCB0aGlzIGlzIGZvciBzcGVjaWFsIGNhc2VzIHdoZW5cbiAqIGRlc2lnbmVycyB3YW50IHRvbmFsIGRpc3RhbmNlLCBsaXRlcmFsbHkgY29udHJhc3QsIGJldHdlZW4gdHdvIGNvbG9ycyB0aGF0XG4gKiBkb24ndCBoYXZlIGEgYmFja2dyb3VuZCAvIGZvcmVncm91bmQgcmVsYXRpb25zaGlwIG9yIGEgY29udHJhc3QgZ3VhcmFudGVlLlxuICovXG5leHBvcnQgY2xhc3MgVG9uZURlbHRhUGFpciB7XG4gICAgLyoqXG4gICAgICogRG9jdW1lbnRzIGEgY29uc3RyYWludCBpbiB0b25lIGRpc3RhbmNlIGJldHdlZW4gdHdvIER5bmFtaWNDb2xvcnMuXG4gICAgICpcbiAgICAgKiBUaGUgcG9sYXJpdHkgaXMgYW4gYWRqZWN0aXZlIHRoYXQgZGVzY3JpYmVzIFwiQVwiLCBjb21wYXJlZCB0byBcIkJcIi5cbiAgICAgKlxuICAgICAqIEZvciBpbnN0YW5jZSwgVG9uZURlbHRhUGFpcihBLCBCLCAxNSwgJ2RhcmtlcicsIHN0YXlUb2dldGhlcikgc3RhdGVzIHRoYXRcbiAgICAgKiBBJ3MgdG9uZSBzaG91bGQgYmUgYXQgbGVhc3QgMTUgZGFya2VyIHRoYW4gQidzLlxuICAgICAqXG4gICAgICogJ25lYXJlcicgYW5kICdmYXJ0aGVyJyBkZXNjcmliZXMgY2xvc2VuZXNzIHRvIHRoZSBzdXJmYWNlIHJvbGVzLiBGb3JcbiAgICAgKiBpbnN0YW5jZSwgVG9uZURlbHRhUGFpcihBLCBCLCAxMCwgJ25lYXJlcicsIHN0YXlUb2dldGhlcikgc3RhdGVzIHRoYXQgQVxuICAgICAqIHNob3VsZCBiZSAxMCBsaWdodGVyIHRoYW4gQiBpbiBsaWdodCBtb2RlLCBhbmQgMTAgZGFya2VyIHRoYW4gQiBpbiBkYXJrXG4gICAgICogbW9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByb2xlQSBUaGUgZmlyc3Qgcm9sZSBpbiBhIHBhaXIuXG4gICAgICogQHBhcmFtIHJvbGVCIFRoZSBzZWNvbmQgcm9sZSBpbiBhIHBhaXIuXG4gICAgICogQHBhcmFtIGRlbHRhIFJlcXVpcmVkIGRpZmZlcmVuY2UgYmV0d2VlbiB0b25lcy4gQWJzb2x1dGUgdmFsdWUsIG5lZ2F0aXZlXG4gICAgICogdmFsdWVzIGhhdmUgdW5kZWZpbmVkIGJlaGF2aW9yLlxuICAgICAqIEBwYXJhbSBwb2xhcml0eSBUaGUgcmVsYXRpdmUgcmVsYXRpb24gYmV0d2VlbiB0b25lcyBvZiByb2xlQSBhbmQgcm9sZUIsXG4gICAgICogYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgICAqIEBwYXJhbSBzdGF5VG9nZXRoZXIgV2hldGhlciB0aGVzZSB0d28gcm9sZXMgc2hvdWxkIHN0YXkgb24gdGhlIHNhbWUgc2lkZSBvZlxuICAgICAqIHRoZSBcImF3a3dhcmQgem9uZVwiIChUNTAtNTkpLiBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgY2VydGFpbiBjYXNlcyB3aGVyZVxuICAgICAqIG9uZSByb2xlIGhhcyB0d28gYmFja2dyb3VuZHMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9sZUEsIHJvbGVCLCBkZWx0YSwgcG9sYXJpdHksIHN0YXlUb2dldGhlcikge1xuICAgICAgICB0aGlzLnJvbGVBID0gcm9sZUE7XG4gICAgICAgIHRoaXMucm9sZUIgPSByb2xlQjtcbiAgICAgICAgdGhpcy5kZWx0YSA9IGRlbHRhO1xuICAgICAgICB0aGlzLnBvbGFyaXR5ID0gcG9sYXJpdHk7XG4gICAgICAgIHRoaXMuc3RheVRvZ2V0aGVyID0gc3RheVRvZ2V0aGVyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvbmVfZGVsdGFfcGFpci5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRGlzbGlrZUFuYWx5emVyIH0gZnJvbSAnLi4vZGlzbGlrZS9kaXNsaWtlX2FuYWx5emVyLmpzJztcbmltcG9ydCB7IEhjdCB9IGZyb20gJy4uL2hjdC9oY3QuanMnO1xuaW1wb3J0IHsgVmlld2luZ0NvbmRpdGlvbnMgfSBmcm9tICcuLi9oY3Qvdmlld2luZ19jb25kaXRpb25zLmpzJztcbmltcG9ydCB7IFZhcmlhbnQgfSBmcm9tICcuLi9zY2hlbWUvdmFyaWFudC5qcyc7XG5pbXBvcnQgeyBDb250cmFzdEN1cnZlIH0gZnJvbSAnLi9jb250cmFzdF9jdXJ2ZS5qcyc7XG5pbXBvcnQgeyBEeW5hbWljQ29sb3IgfSBmcm9tICcuL2R5bmFtaWNfY29sb3IuanMnO1xuaW1wb3J0IHsgVG9uZURlbHRhUGFpciB9IGZyb20gJy4vdG9uZV9kZWx0YV9wYWlyLmpzJztcbmZ1bmN0aW9uIGlzRmlkZWxpdHkoc2NoZW1lKSB7XG4gICAgcmV0dXJuIHNjaGVtZS52YXJpYW50ID09PSBWYXJpYW50LkZJREVMSVRZIHx8XG4gICAgICAgIHNjaGVtZS52YXJpYW50ID09PSBWYXJpYW50LkNPTlRFTlQ7XG59XG5mdW5jdGlvbiBpc01vbm9jaHJvbWUoc2NoZW1lKSB7XG4gICAgcmV0dXJuIHNjaGVtZS52YXJpYW50ID09PSBWYXJpYW50Lk1PTk9DSFJPTUU7XG59XG5mdW5jdGlvbiBmaW5kRGVzaXJlZENocm9tYUJ5VG9uZShodWUsIGNocm9tYSwgdG9uZSwgYnlEZWNyZWFzaW5nVG9uZSkge1xuICAgIGxldCBhbnN3ZXIgPSB0b25lO1xuICAgIGxldCBjbG9zZXN0VG9DaHJvbWEgPSBIY3QuZnJvbShodWUsIGNocm9tYSwgdG9uZSk7XG4gICAgaWYgKGNsb3Nlc3RUb0Nocm9tYS5jaHJvbWEgPCBjaHJvbWEpIHtcbiAgICAgICAgbGV0IGNocm9tYVBlYWsgPSBjbG9zZXN0VG9DaHJvbWEuY2hyb21hO1xuICAgICAgICB3aGlsZSAoY2xvc2VzdFRvQ2hyb21hLmNocm9tYSA8IGNocm9tYSkge1xuICAgICAgICAgICAgYW5zd2VyICs9IGJ5RGVjcmVhc2luZ1RvbmUgPyAtMS4wIDogMS4wO1xuICAgICAgICAgICAgY29uc3QgcG90ZW50aWFsU29sdXRpb24gPSBIY3QuZnJvbShodWUsIGNocm9tYSwgYW5zd2VyKTtcbiAgICAgICAgICAgIGlmIChjaHJvbWFQZWFrID4gcG90ZW50aWFsU29sdXRpb24uY2hyb21hKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocG90ZW50aWFsU29sdXRpb24uY2hyb21hIC0gY2hyb21hKSA8IDAuNCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcG90ZW50aWFsRGVsdGEgPSBNYXRoLmFicyhwb3RlbnRpYWxTb2x1dGlvbi5jaHJvbWEgLSBjaHJvbWEpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERlbHRhID0gTWF0aC5hYnMoY2xvc2VzdFRvQ2hyb21hLmNocm9tYSAtIGNocm9tYSk7XG4gICAgICAgICAgICBpZiAocG90ZW50aWFsRGVsdGEgPCBjdXJyZW50RGVsdGEpIHtcbiAgICAgICAgICAgICAgICBjbG9zZXN0VG9DaHJvbWEgPSBwb3RlbnRpYWxTb2x1dGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNocm9tYVBlYWsgPSBNYXRoLm1heChjaHJvbWFQZWFrLCBwb3RlbnRpYWxTb2x1dGlvbi5jaHJvbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbnN3ZXI7XG59XG5mdW5jdGlvbiB2aWV3aW5nQ29uZGl0aW9uc0ZvckFsYmVycyhzY2hlbWUpIHtcbiAgICByZXR1cm4gVmlld2luZ0NvbmRpdGlvbnMubWFrZShcbiAgICAvKndoaXRlUG9pbnQ9Ki8gdW5kZWZpbmVkLCBcbiAgICAvKmFkYXB0aW5nTHVtaW5hbmNlPSovIHVuZGVmaW5lZCwgXG4gICAgLypiYWNrZ3JvdW5kTHN0YXI9Ki8gc2NoZW1lLmlzRGFyayA/IDMwIDogODAsIFxuICAgIC8qc3Vycm91bmQ9Ki8gdW5kZWZpbmVkLCBcbiAgICAvKmRpc2NvdW50aW5nSWxsdW1pbmFudD0qLyB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gcGVyZm9ybUFsYmVycyhwcmVhbGJlcnMsIHNjaGVtZSkge1xuICAgIGNvbnN0IGFsYmVyc2QgPSBwcmVhbGJlcnMuaW5WaWV3aW5nQ29uZGl0aW9ucyh2aWV3aW5nQ29uZGl0aW9uc0ZvckFsYmVycyhzY2hlbWUpKTtcbiAgICBpZiAoRHluYW1pY0NvbG9yLnRvbmVQcmVmZXJzTGlnaHRGb3JlZ3JvdW5kKHByZWFsYmVycy50b25lKSAmJlxuICAgICAgICAhRHluYW1pY0NvbG9yLnRvbmVBbGxvd3NMaWdodEZvcmVncm91bmQoYWxiZXJzZC50b25lKSkge1xuICAgICAgICByZXR1cm4gRHluYW1pY0NvbG9yLmVuYWJsZUxpZ2h0Rm9yZWdyb3VuZChwcmVhbGJlcnMudG9uZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gRHluYW1pY0NvbG9yLmVuYWJsZUxpZ2h0Rm9yZWdyb3VuZChhbGJlcnNkLnRvbmUpO1xuICAgIH1cbn1cbi8qKlxuICogRHluYW1pY0NvbG9ycyBmb3IgdGhlIGNvbG9ycyBpbiB0aGUgTWF0ZXJpYWwgRGVzaWduIHN5c3RlbS5cbiAqL1xuLy8gTWF0ZXJpYWwgQ29sb3IgVXRpbGl0aWVzIG5hbWVzcGFjZXMgdGhlIHZhcmlvdXMgdXRpbGl0aWVzIGl0IHByb3ZpZGVzLlxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNsYXNzLWFzLW5hbWVzcGFjZVxuZXhwb3J0IGNsYXNzIE1hdGVyaWFsRHluYW1pY0NvbG9ycyB7XG4gICAgc3RhdGljIGhpZ2hlc3RTdXJmYWNlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnN1cmZhY2VCcmlnaHQgOlxuICAgICAgICAgICAgTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnN1cmZhY2VEaW07XG4gICAgfVxufVxuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmNvbnRlbnRBY2NlbnRUb25lRGVsdGEgPSAxNS4wO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnlQYWxldHRlS2V5Q29sb3IgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdwcmltYXJ5X3BhbGV0dGVfa2V5X2NvbG9yJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZS5rZXlDb2xvci50b25lLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5UGFsZXR0ZUtleUNvbG9yID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnc2Vjb25kYXJ5X3BhbGV0dGVfa2V5X2NvbG9yJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5zZWNvbmRhcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLnNlY29uZGFyeVBhbGV0dGUua2V5Q29sb3IudG9uZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5UGFsZXR0ZUtleUNvbG9yID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAndGVydGlhcnlfcGFsZXR0ZV9rZXlfY29sb3InLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnRlcnRpYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy50ZXJ0aWFyeVBhbGV0dGUua2V5Q29sb3IudG9uZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm5ldXRyYWxQYWxldHRlS2V5Q29sb3IgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICduZXV0cmFsX3BhbGV0dGVfa2V5X2NvbG9yJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZS5rZXlDb2xvci50b25lLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMubmV1dHJhbFZhcmlhbnRQYWxldHRlS2V5Q29sb3IgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICduZXV0cmFsX3ZhcmlhbnRfcGFsZXR0ZV9rZXlfY29sb3InLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLm5ldXRyYWxWYXJpYW50UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5uZXV0cmFsVmFyaWFudFBhbGV0dGUua2V5Q29sb3IudG9uZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmJhY2tncm91bmQgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdiYWNrZ3JvdW5kJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA2IDogOTgsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMub25CYWNrZ3JvdW5kID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnb25fYmFja2dyb3VuZCcsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHMuaXNEYXJrID8gOTAgOiAxMCxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmJhY2tncm91bmQsXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMywgMywgNC41LCA3KSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnN1cmZhY2UgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdzdXJmYWNlJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA2IDogOTgsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc3VyZmFjZURpbSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3N1cmZhY2VfZGltJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA2IDogODcsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc3VyZmFjZUJyaWdodCA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3N1cmZhY2VfYnJpZ2h0JyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyAyNCA6IDk4LFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnN1cmZhY2VDb250YWluZXJMb3dlc3QgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdzdXJmYWNlX2NvbnRhaW5lcl9sb3dlc3QnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLm5ldXRyYWxQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDQgOiAxMDAsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc3VyZmFjZUNvbnRhaW5lckxvdyA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3N1cmZhY2VfY29udGFpbmVyX2xvdycsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHMuaXNEYXJrID8gMTAgOiA5NixcbiAgICBpc0JhY2tncm91bmQ6IHRydWUsXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5zdXJmYWNlQ29udGFpbmVyID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnc3VyZmFjZV9jb250YWluZXInLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLm5ldXRyYWxQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDEyIDogOTQsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc3VyZmFjZUNvbnRhaW5lckhpZ2ggPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdzdXJmYWNlX2NvbnRhaW5lcl9oaWdoJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyAxNyA6IDkyLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnN1cmZhY2VDb250YWluZXJIaWdoZXN0ID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnc3VyZmFjZV9jb250YWluZXJfaGlnaGVzdCcsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHMuaXNEYXJrID8gMjIgOiA5MCxcbiAgICBpc0JhY2tncm91bmQ6IHRydWUsXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5vblN1cmZhY2UgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl9zdXJmYWNlJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA5MCA6IDEwLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoNC41LCA3LCAxMSwgMjEpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc3VyZmFjZVZhcmlhbnQgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdzdXJmYWNlX3ZhcmlhbnQnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLm5ldXRyYWxWYXJpYW50UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyAzMCA6IDkwLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uU3VyZmFjZVZhcmlhbnQgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl9zdXJmYWNlX3ZhcmlhbnQnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLm5ldXRyYWxWYXJpYW50UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA4MCA6IDMwLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMywgNC41LCA3LCAxMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5pbnZlcnNlU3VyZmFjZSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ2ludmVyc2Vfc3VyZmFjZScsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHMuaXNEYXJrID8gOTAgOiAyMCxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmludmVyc2VPblN1cmZhY2UgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdpbnZlcnNlX29uX3N1cmZhY2UnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLm5ldXRyYWxQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDIwIDogOTUsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5pbnZlcnNlU3VyZmFjZSxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSg0LjUsIDcsIDExLCAyMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5vdXRsaW5lID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnb3V0bGluZScsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFZhcmlhbnRQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDYwIDogNTAsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5oaWdoZXN0U3VyZmFjZShzKSxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSgxLjUsIDMsIDQuNSwgNyksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5vdXRsaW5lVmFyaWFudCA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ291dGxpbmVfdmFyaWFudCcsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFZhcmlhbnRQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDMwIDogODAsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5oaWdoZXN0U3VyZmFjZShzKSxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSgxLCAxLCAzLCA3KSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnNoYWRvdyA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3NoYWRvdycsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMubmV1dHJhbFBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IDAsXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5zY3JpbSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3NjcmltJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5uZXV0cmFsUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gMCxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnN1cmZhY2VUaW50ID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnc3VyZmFjZV90aW50JyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA4MCA6IDQwLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnkgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdwcmltYXJ5JyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4ge1xuICAgICAgICBpZiAoaXNNb25vY2hyb21lKHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5pc0RhcmsgPyAxMDAgOiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzLmlzRGFyayA/IDgwIDogNDA7XG4gICAgfSxcbiAgICBpc0JhY2tncm91bmQ6IHRydWUsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5oaWdoZXN0U3VyZmFjZShzKSxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSgzLCA0LjUsIDcsIDExKSxcbiAgICB0b25lRGVsdGFQYWlyOiAocykgPT4gbmV3IFRvbmVEZWx0YVBhaXIoTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnlDb250YWluZXIsIE1hdGVyaWFsRHluYW1pY0NvbG9ycy5wcmltYXJ5LCAxNSwgJ25lYXJlcicsIGZhbHNlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uUHJpbWFyeSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ29uX3ByaW1hcnknLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnByaW1hcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiB7XG4gICAgICAgIGlmIChpc01vbm9jaHJvbWUocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmlzRGFyayA/IDEwIDogOTA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gMjAgOiAxMDA7XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoNC41LCA3LCAxMSwgMjEpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUNvbnRhaW5lciA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3ByaW1hcnlfY29udGFpbmVyJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4ge1xuICAgICAgICBpZiAoaXNGaWRlbGl0eShzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1BbGJlcnMocy5zb3VyY2VDb2xvckhjdCwgcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTW9ub2Nocm9tZShzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gODUgOiAyNTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcy5pc0RhcmsgPyAzMCA6IDkwO1xuICAgIH0sXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMSwgMSwgMywgNyksXG4gICAgdG9uZURlbHRhUGFpcjogKHMpID0+IG5ldyBUb25lRGVsdGFQYWlyKE1hdGVyaWFsRHluYW1pY0NvbG9ycy5wcmltYXJ5Q29udGFpbmVyLCBNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeSwgMTUsICduZWFyZXInLCBmYWxzZSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5vblByaW1hcnlDb250YWluZXIgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl9wcmltYXJ5X2NvbnRhaW5lcicsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMucHJpbWFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHtcbiAgICAgICAgaWYgKGlzRmlkZWxpdHkocykpIHtcbiAgICAgICAgICAgIHJldHVybiBEeW5hbWljQ29sb3IuZm9yZWdyb3VuZFRvbmUoTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnlDb250YWluZXIudG9uZShzKSwgNC41KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNNb25vY2hyb21lKHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5pc0RhcmsgPyAwIDogMTAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzLmlzRGFyayA/IDkwIDogMTA7XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnlDb250YWluZXIsXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoNC41LCA3LCAxMSwgMjEpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuaW52ZXJzZVByaW1hcnkgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdpbnZlcnNlX3ByaW1hcnknLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnByaW1hcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDQwIDogODAsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5pbnZlcnNlU3VyZmFjZSxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSgzLCA0LjUsIDcsIDExKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnNlY29uZGFyeSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3NlY29uZGFyeScsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMuc2Vjb25kYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA4MCA6IDQwLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmhpZ2hlc3RTdXJmYWNlKHMpLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDMsIDQuNSwgNywgMTEpLFxuICAgIHRvbmVEZWx0YVBhaXI6IChzKSA9PiBuZXcgVG9uZURlbHRhUGFpcihNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Q29udGFpbmVyLCBNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5LCAxNSwgJ25lYXJlcicsIGZhbHNlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uU2Vjb25kYXJ5ID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnb25fc2Vjb25kYXJ5JyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5zZWNvbmRhcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiB7XG4gICAgICAgIGlmIChpc01vbm9jaHJvbWUocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmlzRGFyayA/IDEwIDogMTAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gMjAgOiAxMDA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5LFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDQuNSwgNywgMTEsIDIxKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnNlY29uZGFyeUNvbnRhaW5lciA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3NlY29uZGFyeV9jb250YWluZXInLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnNlY29uZGFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHtcbiAgICAgICAgY29uc3QgaW5pdGlhbFRvbmUgPSBzLmlzRGFyayA/IDMwIDogOTA7XG4gICAgICAgIGlmIChpc01vbm9jaHJvbWUocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmlzRGFyayA/IDMwIDogODU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0ZpZGVsaXR5KHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbFRvbmU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFuc3dlciA9IGZpbmREZXNpcmVkQ2hyb21hQnlUb25lKHMuc2Vjb25kYXJ5UGFsZXR0ZS5odWUsIHMuc2Vjb25kYXJ5UGFsZXR0ZS5jaHJvbWEsIGluaXRpYWxUb25lLCBzLmlzRGFyayA/IGZhbHNlIDogdHJ1ZSk7XG4gICAgICAgIGFuc3dlciA9IHBlcmZvcm1BbGJlcnMocy5zZWNvbmRhcnlQYWxldHRlLmdldEhjdChhbnN3ZXIpLCBzKTtcbiAgICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICB9LFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmhpZ2hlc3RTdXJmYWNlKHMpLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDEsIDEsIDMsIDcpLFxuICAgIHRvbmVEZWx0YVBhaXI6IChzKSA9PiBuZXcgVG9uZURlbHRhUGFpcihNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Q29udGFpbmVyLCBNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5LCAxNSwgJ25lYXJlcicsIGZhbHNlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uU2Vjb25kYXJ5Q29udGFpbmVyID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnb25fc2Vjb25kYXJ5X2NvbnRhaW5lcicsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMuc2Vjb25kYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4ge1xuICAgICAgICBpZiAoIWlzRmlkZWxpdHkocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmlzRGFyayA/IDkwIDogMTA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIER5bmFtaWNDb2xvci5mb3JlZ3JvdW5kVG9uZShNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Q29udGFpbmVyLnRvbmUocyksIDQuNSk7XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnNlY29uZGFyeUNvbnRhaW5lcixcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSg0LjUsIDcsIDExLCAyMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3RlcnRpYXJ5JyxcbiAgICBwYWxldHRlOiAocykgPT4gcy50ZXJ0aWFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHtcbiAgICAgICAgaWYgKGlzTW9ub2Nocm9tZShzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gOTAgOiAyNTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcy5pc0RhcmsgPyA4MCA6IDQwO1xuICAgIH0sXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMywgNC41LCA3LCAxMSksXG4gICAgdG9uZURlbHRhUGFpcjogKHMpID0+IG5ldyBUb25lRGVsdGFQYWlyKE1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUNvbnRhaW5lciwgTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5LCAxNSwgJ25lYXJlcicsIGZhbHNlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uVGVydGlhcnkgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl90ZXJ0aWFyeScsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMudGVydGlhcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiB7XG4gICAgICAgIGlmIChpc01vbm9jaHJvbWUocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmlzRGFyayA/IDEwIDogOTA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gMjAgOiAxMDA7XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5LFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDQuNSwgNywgMTEsIDIxKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5Q29udGFpbmVyID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAndGVydGlhcnlfY29udGFpbmVyJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy50ZXJ0aWFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHtcbiAgICAgICAgaWYgKGlzTW9ub2Nocm9tZShzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gNjAgOiA0OTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRmlkZWxpdHkocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmlzRGFyayA/IDMwIDogOTA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxiZXJzVG9uZSA9IHBlcmZvcm1BbGJlcnMocy50ZXJ0aWFyeVBhbGV0dGUuZ2V0SGN0KHMuc291cmNlQ29sb3JIY3QudG9uZSksIHMpO1xuICAgICAgICBjb25zdCBwcm9wb3NlZEhjdCA9IHMudGVydGlhcnlQYWxldHRlLmdldEhjdChhbGJlcnNUb25lKTtcbiAgICAgICAgcmV0dXJuIERpc2xpa2VBbmFseXplci5maXhJZkRpc2xpa2VkKHByb3Bvc2VkSGN0KS50b25lO1xuICAgIH0sXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMSwgMSwgMywgNyksXG4gICAgdG9uZURlbHRhUGFpcjogKHMpID0+IG5ldyBUb25lRGVsdGFQYWlyKE1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUNvbnRhaW5lciwgTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5LCAxNSwgJ25lYXJlcicsIGZhbHNlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uVGVydGlhcnlDb250YWluZXIgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl90ZXJ0aWFyeV9jb250YWluZXInLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnRlcnRpYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4ge1xuICAgICAgICBpZiAoaXNNb25vY2hyb21lKHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5pc0RhcmsgPyAwIDogMTAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNGaWRlbGl0eShzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHMuaXNEYXJrID8gOTAgOiAxMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRHluYW1pY0NvbG9yLmZvcmVncm91bmRUb25lKE1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUNvbnRhaW5lci50b25lKHMpLCA0LjUpO1xuICAgIH0sXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUNvbnRhaW5lcixcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSg0LjUsIDcsIDExLCAyMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5lcnJvciA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ2Vycm9yJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5lcnJvclBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHMuaXNEYXJrID8gODAgOiA0MCxcbiAgICBpc0JhY2tncm91bmQ6IHRydWUsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5oaWdoZXN0U3VyZmFjZShzKSxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSgzLCA0LjUsIDcsIDExKSxcbiAgICB0b25lRGVsdGFQYWlyOiAocykgPT4gbmV3IFRvbmVEZWx0YVBhaXIoTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmVycm9yQ29udGFpbmVyLCBNYXRlcmlhbER5bmFtaWNDb2xvcnMuZXJyb3IsIDE1LCAnbmVhcmVyJywgZmFsc2UpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMub25FcnJvciA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ29uX2Vycm9yJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5lcnJvclBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IHMuaXNEYXJrID8gMjAgOiAxMDAsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5lcnJvcixcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSg0LjUsIDcsIDExLCAyMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5lcnJvckNvbnRhaW5lciA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ2Vycm9yX2NvbnRhaW5lcicsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMuZXJyb3JQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBzLmlzRGFyayA/IDMwIDogOTAsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMSwgMSwgMywgNyksXG4gICAgdG9uZURlbHRhUGFpcjogKHMpID0+IG5ldyBUb25lRGVsdGFQYWlyKE1hdGVyaWFsRHluYW1pY0NvbG9ycy5lcnJvckNvbnRhaW5lciwgTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmVycm9yLCAxNSwgJ25lYXJlcicsIGZhbHNlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uRXJyb3JDb250YWluZXIgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl9lcnJvcl9jb250YWluZXInLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLmVycm9yUGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gcy5pc0RhcmsgPyA5MCA6IDEwLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuZXJyb3JDb250YWluZXIsXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoNC41LCA3LCAxMSwgMjEpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAncHJpbWFyeV9maXhlZCcsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMucHJpbWFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IGlzTW9ub2Nocm9tZShzKSA/IDQwLjAgOiA5MC4wLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmhpZ2hlc3RTdXJmYWNlKHMpLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDEsIDEsIDMsIDcpLFxuICAgIHRvbmVEZWx0YVBhaXI6IChzKSA9PiBuZXcgVG9uZURlbHRhUGFpcihNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkLCBNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkRGltLCAxMCwgJ2xpZ2h0ZXInLCB0cnVlKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnByaW1hcnlGaXhlZERpbSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3ByaW1hcnlfZml4ZWRfZGltJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gaXNNb25vY2hyb21lKHMpID8gMzAuMCA6IDgwLjAsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMSwgMSwgMywgNyksXG4gICAgdG9uZURlbHRhUGFpcjogKHMpID0+IG5ldyBUb25lRGVsdGFQYWlyKE1hdGVyaWFsRHluYW1pY0NvbG9ycy5wcmltYXJ5Rml4ZWQsIE1hdGVyaWFsRHluYW1pY0NvbG9ycy5wcmltYXJ5Rml4ZWREaW0sIDEwLCAnbGlnaHRlcicsIHRydWUpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMub25QcmltYXJ5Rml4ZWQgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdvbl9wcmltYXJ5X2ZpeGVkJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5wcmltYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gaXNNb25vY2hyb21lKHMpID8gMTAwLjAgOiAxMC4wLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkRGltLFxuICAgIHNlY29uZEJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDQuNSwgNywgMTEsIDIxKSxcbn0pO1xuTWF0ZXJpYWxEeW5hbWljQ29sb3JzLm9uUHJpbWFyeUZpeGVkVmFyaWFudCA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ29uX3ByaW1hcnlfZml4ZWRfdmFyaWFudCcsXG4gICAgcGFsZXR0ZTogKHMpID0+IHMucHJpbWFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IGlzTW9ub2Nocm9tZShzKSA/IDkwLjAgOiAzMC4wLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkRGltLFxuICAgIHNlY29uZEJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMucHJpbWFyeUZpeGVkLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDMsIDQuNSwgNywgMTEpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Rml4ZWQgPSBEeW5hbWljQ29sb3IuZnJvbVBhbGV0dGUoe1xuICAgIG5hbWU6ICdzZWNvbmRhcnlfZml4ZWQnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnNlY29uZGFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IGlzTW9ub2Nocm9tZShzKSA/IDgwLjAgOiA5MC4wLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmhpZ2hlc3RTdXJmYWNlKHMpLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDEsIDEsIDMsIDcpLFxuICAgIHRvbmVEZWx0YVBhaXI6IChzKSA9PiBuZXcgVG9uZURlbHRhUGFpcihNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Rml4ZWQsIE1hdGVyaWFsRHluYW1pY0NvbG9ycy5zZWNvbmRhcnlGaXhlZERpbSwgMTAsICdsaWdodGVyJywgdHJ1ZSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5zZWNvbmRhcnlGaXhlZERpbSA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ3NlY29uZGFyeV9maXhlZF9kaW0nLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnNlY29uZGFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IGlzTW9ub2Nocm9tZShzKSA/IDcwLjAgOiA4MC4wLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmhpZ2hlc3RTdXJmYWNlKHMpLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDEsIDEsIDMsIDcpLFxuICAgIHRvbmVEZWx0YVBhaXI6IChzKSA9PiBuZXcgVG9uZURlbHRhUGFpcihNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Rml4ZWQsIE1hdGVyaWFsRHluYW1pY0NvbG9ycy5zZWNvbmRhcnlGaXhlZERpbSwgMTAsICdsaWdodGVyJywgdHJ1ZSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5vblNlY29uZGFyeUZpeGVkID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnb25fc2Vjb25kYXJ5X2ZpeGVkJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5zZWNvbmRhcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiAxMC4wLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Rml4ZWREaW0sXG4gICAgc2Vjb25kQmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy5zZWNvbmRhcnlGaXhlZCxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSg0LjUsIDcsIDExLCAyMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy5vblNlY29uZGFyeUZpeGVkVmFyaWFudCA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ29uX3NlY29uZGFyeV9maXhlZF92YXJpYW50JyxcbiAgICBwYWxldHRlOiAocykgPT4gcy5zZWNvbmRhcnlQYWxldHRlLFxuICAgIHRvbmU6IChzKSA9PiBpc01vbm9jaHJvbWUocykgPyAyNS4wIDogMzAuMCxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnNlY29uZGFyeUZpeGVkRGltLFxuICAgIHNlY29uZEJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuc2Vjb25kYXJ5Rml4ZWQsXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMywgNC41LCA3LCAxMSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUZpeGVkID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAndGVydGlhcnlfZml4ZWQnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnRlcnRpYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gaXNNb25vY2hyb21lKHMpID8gNDAuMCA6IDkwLjAsXG4gICAgaXNCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMuaGlnaGVzdFN1cmZhY2UocyksXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoMSwgMSwgMywgNyksXG4gICAgdG9uZURlbHRhUGFpcjogKHMpID0+IG5ldyBUb25lRGVsdGFQYWlyKE1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUZpeGVkLCBNYXRlcmlhbER5bmFtaWNDb2xvcnMudGVydGlhcnlGaXhlZERpbSwgMTAsICdsaWdodGVyJywgdHJ1ZSksXG59KTtcbk1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUZpeGVkRGltID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAndGVydGlhcnlfZml4ZWRfZGltJyxcbiAgICBwYWxldHRlOiAocykgPT4gcy50ZXJ0aWFyeVBhbGV0dGUsXG4gICAgdG9uZTogKHMpID0+IGlzTW9ub2Nocm9tZShzKSA/IDMwLjAgOiA4MC4wLFxuICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLmhpZ2hlc3RTdXJmYWNlKHMpLFxuICAgIGNvbnRyYXN0Q3VydmU6IG5ldyBDb250cmFzdEN1cnZlKDEsIDEsIDMsIDcpLFxuICAgIHRvbmVEZWx0YVBhaXI6IChzKSA9PiBuZXcgVG9uZURlbHRhUGFpcihNYXRlcmlhbER5bmFtaWNDb2xvcnMudGVydGlhcnlGaXhlZCwgTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5Rml4ZWREaW0sIDEwLCAnbGlnaHRlcicsIHRydWUpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMub25UZXJ0aWFyeUZpeGVkID0gRHluYW1pY0NvbG9yLmZyb21QYWxldHRlKHtcbiAgICBuYW1lOiAnb25fdGVydGlhcnlfZml4ZWQnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnRlcnRpYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gaXNNb25vY2hyb21lKHMpID8gMTAwLjAgOiAxMC4wLFxuICAgIGJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMudGVydGlhcnlGaXhlZERpbSxcbiAgICBzZWNvbmRCYWNrZ3JvdW5kOiAocykgPT4gTWF0ZXJpYWxEeW5hbWljQ29sb3JzLnRlcnRpYXJ5Rml4ZWQsXG4gICAgY29udHJhc3RDdXJ2ZTogbmV3IENvbnRyYXN0Q3VydmUoNC41LCA3LCAxMSwgMjEpLFxufSk7XG5NYXRlcmlhbER5bmFtaWNDb2xvcnMub25UZXJ0aWFyeUZpeGVkVmFyaWFudCA9IER5bmFtaWNDb2xvci5mcm9tUGFsZXR0ZSh7XG4gICAgbmFtZTogJ29uX3RlcnRpYXJ5X2ZpeGVkX3ZhcmlhbnQnLFxuICAgIHBhbGV0dGU6IChzKSA9PiBzLnRlcnRpYXJ5UGFsZXR0ZSxcbiAgICB0b25lOiAocykgPT4gaXNNb25vY2hyb21lKHMpID8gOTAuMCA6IDMwLjAsXG4gICAgYmFja2dyb3VuZDogKHMpID0+IE1hdGVyaWFsRHluYW1pY0NvbG9ycy50ZXJ0aWFyeUZpeGVkRGltLFxuICAgIHNlY29uZEJhY2tncm91bmQ6IChzKSA9PiBNYXRlcmlhbER5bmFtaWNDb2xvcnMudGVydGlhcnlGaXhlZCxcbiAgICBjb250cmFzdEN1cnZlOiBuZXcgQ29udHJhc3RDdXJ2ZSgzLCA0LjUsIDcsIDExKSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0ZXJpYWxfZHluYW1pY19jb2xvcnMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEhjdCB9IGZyb20gJy4uL2hjdC9oY3QuanMnO1xuLyoqXG4gKiAgQSBjb252ZW5pZW5jZSBjbGFzcyBmb3IgcmV0cmlldmluZyBjb2xvcnMgdGhhdCBhcmUgY29uc3RhbnQgaW4gaHVlIGFuZFxuICogIGNocm9tYSwgYnV0IHZhcnkgaW4gdG9uZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvbmFsUGFsZXR0ZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yXG4gICAgICogQHJldHVybiBUb25lcyBtYXRjaGluZyB0aGF0IGNvbG9yJ3MgaHVlIGFuZCBjaHJvbWEuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21JbnQoYXJnYikge1xuICAgICAgICBjb25zdCBoY3QgPSBIY3QuZnJvbUludChhcmdiKTtcbiAgICAgICAgcmV0dXJuIFRvbmFsUGFsZXR0ZS5mcm9tSGN0KGhjdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBoY3QgSGN0XG4gICAgICogQHJldHVybiBUb25lcyBtYXRjaGluZyB0aGF0IGNvbG9yJ3MgaHVlIGFuZCBjaHJvbWEuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21IY3QoaGN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgVG9uYWxQYWxldHRlKGhjdC5odWUsIGhjdC5jaHJvbWEsIGhjdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBodWUgSENUIGh1ZVxuICAgICAqIEBwYXJhbSBjaHJvbWEgSENUIGNocm9tYVxuICAgICAqIEByZXR1cm4gVG9uZXMgbWF0Y2hpbmcgaHVlIGFuZCBjaHJvbWEuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21IdWVBbmRDaHJvbWEoaHVlLCBjaHJvbWEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb25hbFBhbGV0dGUoaHVlLCBjaHJvbWEsIFRvbmFsUGFsZXR0ZS5jcmVhdGVLZXlDb2xvcihodWUsIGNocm9tYSkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihodWUsIGNocm9tYSwga2V5Q29sb3IpIHtcbiAgICAgICAgdGhpcy5odWUgPSBodWU7XG4gICAgICAgIHRoaXMuY2hyb21hID0gY2hyb21hO1xuICAgICAgICB0aGlzLmtleUNvbG9yID0ga2V5Q29sb3I7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVLZXlDb2xvcihodWUsIGNocm9tYSkge1xuICAgICAgICBjb25zdCBzdGFydFRvbmUgPSA1MC4wO1xuICAgICAgICBsZXQgc21hbGxlc3REZWx0YUhjdCA9IEhjdC5mcm9tKGh1ZSwgY2hyb21hLCBzdGFydFRvbmUpO1xuICAgICAgICBsZXQgc21hbGxlc3REZWx0YSA9IE1hdGguYWJzKHNtYWxsZXN0RGVsdGFIY3QuY2hyb21hIC0gY2hyb21hKTtcbiAgICAgICAgLy8gU3RhcnRpbmcgZnJvbSBUNTAsIGNoZWNrIFQrLy1kZWx0YSB0byBzZWUgaWYgdGhleSBtYXRjaCB0aGUgcmVxdWVzdGVkXG4gICAgICAgIC8vIGNocm9tYS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gU3RhcnRzIGZyb20gVDUwIGJlY2F1c2UgVDUwIGhhcyB0aGUgbW9zdCBjaHJvbWEgYXZhaWxhYmxlLCBvblxuICAgICAgICAvLyBhdmVyYWdlLiBUaHVzIGl0IGlzIG1vc3QgbGlrZWx5IHRvIGhhdmUgYSBkaXJlY3QgYW5zd2VyIGFuZCBtaW5pbWl6ZVxuICAgICAgICAvLyBpdGVyYXRpb24uXG4gICAgICAgIGZvciAobGV0IGRlbHRhID0gMS4wOyBkZWx0YSA8IDUwLjA7IGRlbHRhICs9IDEuMCkge1xuICAgICAgICAgICAgLy8gVGVybWluYXRpb24gY29uZGl0aW9uIHJvdW5kaW5nIGluc3RlYWQgb2YgbWluaW1pemluZyBkZWx0YSB0byBhdm9pZFxuICAgICAgICAgICAgLy8gY2FzZSB3aGVyZSByZXF1ZXN0ZWQgY2hyb21hIGlzIDE2LjUxLCBhbmQgdGhlIGNsb3Nlc3QgY2hyb21hIGlzIDE2LjQ5LlxuICAgICAgICAgICAgLy8gRXJyb3IgaXMgbWluaW1pemVkLCBidXQgd2hlbiByb3VuZGVkIGFuZCBkaXNwbGF5ZWQsIHJlcXVlc3RlZCBjaHJvbWFcbiAgICAgICAgICAgIC8vIGlzIDE3LCBrZXkgY29sb3IncyBjaHJvbWEgaXMgMTYuXG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZChjaHJvbWEpID09PSBNYXRoLnJvdW5kKHNtYWxsZXN0RGVsdGFIY3QuY2hyb21hKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzbWFsbGVzdERlbHRhSGN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGN0QWRkID0gSGN0LmZyb20oaHVlLCBjaHJvbWEsIHN0YXJ0VG9uZSArIGRlbHRhKTtcbiAgICAgICAgICAgIGNvbnN0IGhjdEFkZERlbHRhID0gTWF0aC5hYnMoaGN0QWRkLmNocm9tYSAtIGNocm9tYSk7XG4gICAgICAgICAgICBpZiAoaGN0QWRkRGVsdGEgPCBzbWFsbGVzdERlbHRhKSB7XG4gICAgICAgICAgICAgICAgc21hbGxlc3REZWx0YSA9IGhjdEFkZERlbHRhO1xuICAgICAgICAgICAgICAgIHNtYWxsZXN0RGVsdGFIY3QgPSBoY3RBZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoY3RTdWJ0cmFjdCA9IEhjdC5mcm9tKGh1ZSwgY2hyb21hLCBzdGFydFRvbmUgLSBkZWx0YSk7XG4gICAgICAgICAgICBjb25zdCBoY3RTdWJ0cmFjdERlbHRhID0gTWF0aC5hYnMoaGN0U3VidHJhY3QuY2hyb21hIC0gY2hyb21hKTtcbiAgICAgICAgICAgIGlmIChoY3RTdWJ0cmFjdERlbHRhIDwgc21hbGxlc3REZWx0YSkge1xuICAgICAgICAgICAgICAgIHNtYWxsZXN0RGVsdGEgPSBoY3RTdWJ0cmFjdERlbHRhO1xuICAgICAgICAgICAgICAgIHNtYWxsZXN0RGVsdGFIY3QgPSBoY3RTdWJ0cmFjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc21hbGxlc3REZWx0YUhjdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHRvbmUgSENUIHRvbmUsIG1lYXN1cmVkIGZyb20gMCB0byAxMDAuXG4gICAgICogQHJldHVybiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGEgY29sb3Igd2l0aCB0aGF0IHRvbmUuXG4gICAgICovXG4gICAgdG9uZSh0b25lKSB7XG4gICAgICAgIGxldCBhcmdiID0gdGhpcy5jYWNoZS5nZXQodG9uZSk7XG4gICAgICAgIGlmIChhcmdiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFyZ2IgPSBIY3QuZnJvbSh0aGlzLmh1ZSwgdGhpcy5jaHJvbWEsIHRvbmUpLnRvSW50KCk7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLnNldCh0b25lLCBhcmdiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJnYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHRvbmUgSENUIHRvbmUuXG4gICAgICogQHJldHVybiBIQ1QgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xvciB3aXRoIHRoYXQgdG9uZS5cbiAgICAgKi9cbiAgICBnZXRIY3QodG9uZSkge1xuICAgICAgICByZXR1cm4gSGN0LmZyb21JbnQodGhpcy50b25lKHRvbmUpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b25hbF9wYWxldHRlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBIY3QgfSBmcm9tICcuLi9oY3QvaGN0LmpzJztcbmltcG9ydCB7IFRvbmFsUGFsZXR0ZSB9IGZyb20gJy4vdG9uYWxfcGFsZXR0ZS5qcyc7XG4vKipcbiAqIEFuIGludGVybWVkaWF0ZSBjb25jZXB0IGJldHdlZW4gdGhlIGtleSBjb2xvciBmb3IgYSBVSSB0aGVtZSwgYW5kIGEgZnVsbFxuICogY29sb3Igc2NoZW1lLiA1IHNldHMgb2YgdG9uZXMgYXJlIGdlbmVyYXRlZCwgYWxsIGV4Y2VwdCBvbmUgdXNlIHRoZSBzYW1lIGh1ZVxuICogYXMgdGhlIGtleSBjb2xvciwgYW5kIGFsbCB2YXJ5IGluIGNocm9tYS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvcmVQYWxldHRlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYXJnYiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGEgY29sb3JcbiAgICAgKi9cbiAgICBzdGF0aWMgb2YoYXJnYikge1xuICAgICAgICByZXR1cm4gbmV3IENvcmVQYWxldHRlKGFyZ2IsIGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yXG4gICAgICovXG4gICAgc3RhdGljIGNvbnRlbnRPZihhcmdiKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29yZVBhbGV0dGUoYXJnYiwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIFtDb3JlUGFsZXR0ZV0gZnJvbSBhIHNldCBvZiBjb2xvcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUNvbG9ycyhjb2xvcnMpIHtcbiAgICAgICAgcmV0dXJuIENvcmVQYWxldHRlLmNyZWF0ZVBhbGV0dGVGcm9tQ29sb3JzKGZhbHNlLCBjb2xvcnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb250ZW50IFtDb3JlUGFsZXR0ZV0gZnJvbSBhIHNldCBvZiBjb2xvcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgY29udGVudEZyb21Db2xvcnMoY29sb3JzKSB7XG4gICAgICAgIHJldHVybiBDb3JlUGFsZXR0ZS5jcmVhdGVQYWxldHRlRnJvbUNvbG9ycyh0cnVlLCBjb2xvcnMpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlUGFsZXR0ZUZyb21Db2xvcnMoY29udGVudCwgY29sb3JzKSB7XG4gICAgICAgIGNvbnN0IHBhbGV0dGUgPSBuZXcgQ29yZVBhbGV0dGUoY29sb3JzLnByaW1hcnksIGNvbnRlbnQpO1xuICAgICAgICBpZiAoY29sb3JzLnNlY29uZGFyeSkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5ldyBDb3JlUGFsZXR0ZShjb2xvcnMuc2Vjb25kYXJ5LCBjb250ZW50KTtcbiAgICAgICAgICAgIHBhbGV0dGUuYTIgPSBwLmExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvcnMudGVydGlhcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBuZXcgQ29yZVBhbGV0dGUoY29sb3JzLnRlcnRpYXJ5LCBjb250ZW50KTtcbiAgICAgICAgICAgIHBhbGV0dGUuYTMgPSBwLmExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvcnMuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBuZXcgQ29yZVBhbGV0dGUoY29sb3JzLmVycm9yLCBjb250ZW50KTtcbiAgICAgICAgICAgIHBhbGV0dGUuZXJyb3IgPSBwLmExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvcnMubmV1dHJhbCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5ldyBDb3JlUGFsZXR0ZShjb2xvcnMubmV1dHJhbCwgY29udGVudCk7XG4gICAgICAgICAgICBwYWxldHRlLm4xID0gcC5uMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sb3JzLm5ldXRyYWxWYXJpYW50KSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbmV3IENvcmVQYWxldHRlKGNvbG9ycy5uZXV0cmFsVmFyaWFudCwgY29udGVudCk7XG4gICAgICAgICAgICBwYWxldHRlLm4yID0gcC5uMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFsZXR0ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYXJnYiwgaXNDb250ZW50KSB7XG4gICAgICAgIGNvbnN0IGhjdCA9IEhjdC5mcm9tSW50KGFyZ2IpO1xuICAgICAgICBjb25zdCBodWUgPSBoY3QuaHVlO1xuICAgICAgICBjb25zdCBjaHJvbWEgPSBoY3QuY2hyb21hO1xuICAgICAgICBpZiAoaXNDb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmExID0gVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoaHVlLCBjaHJvbWEpO1xuICAgICAgICAgICAgdGhpcy5hMiA9IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKGh1ZSwgY2hyb21hIC8gMyk7XG4gICAgICAgICAgICB0aGlzLmEzID0gVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoaHVlICsgNjAsIGNocm9tYSAvIDIpO1xuICAgICAgICAgICAgdGhpcy5uMSA9IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKGh1ZSwgTWF0aC5taW4oY2hyb21hIC8gMTIsIDQpKTtcbiAgICAgICAgICAgIHRoaXMubjIgPSBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShodWUsIE1hdGgubWluKGNocm9tYSAvIDYsIDgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYTEgPSBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShodWUsIE1hdGgubWF4KDQ4LCBjaHJvbWEpKTtcbiAgICAgICAgICAgIHRoaXMuYTIgPSBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShodWUsIDE2KTtcbiAgICAgICAgICAgIHRoaXMuYTMgPSBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShodWUgKyA2MCwgMjQpO1xuICAgICAgICAgICAgdGhpcy5uMSA9IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKGh1ZSwgNCk7XG4gICAgICAgICAgICB0aGlzLm4yID0gVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoaHVlLCA4KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVycm9yID0gVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoMjUsIDg0KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlX3BhbGV0dGUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL2NvbG9yX3V0aWxzLmpzJztcbi8qKlxuICogUHJvdmlkZXMgY29udmVyc2lvbnMgbmVlZGVkIGZvciBLLU1lYW5zIHF1YW50aXphdGlvbi4gQ29udmVydGluZyBpbnB1dCB0b1xuICogcG9pbnRzLCBhbmQgY29udmVydGluZyB0aGUgZmluYWwgc3RhdGUgb2YgdGhlIEstTWVhbnMgYWxnb3JpdGhtIHRvIGNvbG9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIExhYlBvaW50UHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBjb2xvciByZXByZXNlbnRlZCBpbiBBUkdCIHRvIGEgMy1lbGVtZW50IGFycmF5IG9mIEwqYSpiKlxuICAgICAqIGNvb3JkaW5hdGVzIG9mIHRoZSBjb2xvci5cbiAgICAgKi9cbiAgICBmcm9tSW50KGFyZ2IpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmxhYkZyb21BcmdiKGFyZ2IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgMy1lbGVtZW50IGFycmF5IHRvIGEgY29sb3IgcmVwcmVzZW50ZWQgaW4gQVJHQi5cbiAgICAgKi9cbiAgICB0b0ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdXRpbHMuYXJnYkZyb21MYWIocG9pbnRbMF0sIHBvaW50WzFdLCBwb2ludFsyXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YW5kYXJkIENJRSAxOTc2IGRlbHRhIEUgZm9ybXVsYSBhbHNvIHRha2VzIHRoZSBzcXVhcmUgcm9vdCwgdW5uZWVkZWRcbiAgICAgKiBoZXJlLiBUaGlzIG1ldGhvZCBpcyB1c2VkIGJ5IHF1YW50aXphdGlvbiBhbGdvcml0aG1zIHRvIGNvbXBhcmUgZGlzdGFuY2UsXG4gICAgICogYW5kIHRoZSByZWxhdGl2ZSBvcmRlcmluZyBpcyB0aGUgc2FtZSwgd2l0aCBvciB3aXRob3V0IGEgc3F1YXJlIHJvb3QuXG4gICAgICpcbiAgICAgKiBUaGlzIHJlbGF0aXZlbHkgbWlub3Igb3B0aW1pemF0aW9uIGlzIGhlbHBmdWwgYmVjYXVzZSB0aGlzIG1ldGhvZCBpc1xuICAgICAqIGNhbGxlZCBhdCBsZWFzdCBvbmNlIGZvciBlYWNoIHBpeGVsIGluIGFuIGltYWdlLlxuICAgICAqL1xuICAgIGRpc3RhbmNlKGZyb20sIHRvKSB7XG4gICAgICAgIGNvbnN0IGRMID0gZnJvbVswXSAtIHRvWzBdO1xuICAgICAgICBjb25zdCBkQSA9IGZyb21bMV0gLSB0b1sxXTtcbiAgICAgICAgY29uc3QgZEIgPSBmcm9tWzJdIC0gdG9bMl07XG4gICAgICAgIHJldHVybiBkTCAqIGRMICsgZEEgKiBkQSArIGRCICogZEI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFiX3BvaW50X3Byb3ZpZGVyLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBMYWJQb2ludFByb3ZpZGVyIH0gZnJvbSAnLi9sYWJfcG9pbnRfcHJvdmlkZXIuanMnO1xuY29uc3QgTUFYX0lURVJBVElPTlMgPSAxMDtcbmNvbnN0IE1JTl9NT1ZFTUVOVF9ESVNUQU5DRSA9IDMuMDtcbi8qKlxuICogQW4gaW1hZ2UgcXVhbnRpemVyIHRoYXQgaW1wcm92ZXMgb24gdGhlIHNwZWVkIG9mIGEgc3RhbmRhcmQgSy1NZWFucyBhbGdvcml0aG1cbiAqIGJ5IGltcGxlbWVudGluZyBzZXZlcmFsIG9wdGltaXphdGlvbnMsIGluY2x1ZGluZyBkZWR1cGluZyBpZGVudGljYWwgcGl4ZWxzXG4gKiBhbmQgYSB0cmlhbmdsZSBpbmVxdWFsaXR5IHJ1bGUgdGhhdCByZWR1Y2VzIHRoZSBudW1iZXIgb2YgY29tcGFyaXNvbnMgbmVlZGVkXG4gKiB0byBpZGVudGlmeSB3aGljaCBjbHVzdGVyIGEgcG9pbnQgc2hvdWxkIGJlIG1vdmVkIHRvLlxuICpcbiAqIFdzbWVhbnMgc3RhbmRzIGZvciBXZWlnaHRlZCBTcXVhcmUgTWVhbnMuXG4gKlxuICogVGhpcyBhbGdvcml0aG0gd2FzIGRlc2lnbmVkIGJ5IE0uIEVtcmUgQ2VsZWJpLCBhbmQgd2FzIGZvdW5kIGluIHRoZWlyIDIwMTFcbiAqIHBhcGVyLCBJbXByb3ZpbmcgdGhlIFBlcmZvcm1hbmNlIG9mIEstTWVhbnMgZm9yIENvbG9yIFF1YW50aXphdGlvbi5cbiAqIGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8xMTAxLjAzOTVcbiAqL1xuLy8gbWF0ZXJpYWxfY29sb3JfdXRpbGl0aWVzIGlzIGRlc2lnbmVkIHRvIGhhdmUgYSBjb25zaXN0ZW50IEFQSSBhY3Jvc3Ncbi8vIHBsYXRmb3JtcyBhbmQgbW9kdWxhciBjb21wb25lbnRzIHRoYXQgY2FuIGJlIG1vdmVkIGFyb3VuZCBlYXNpbHkuIFVzaW5nIGFcbi8vIGNsYXNzIGFzIGEgbmFtZXNwYWNlIGZhY2lsaXRhdGVzIHRoaXMuXG4vL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNsYXNzLWFzLW5hbWVzcGFjZVxuZXhwb3J0IGNsYXNzIFF1YW50aXplcldzbWVhbnMge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpbnB1dFBpeGVscyBDb2xvcnMgaW4gQVJHQiBmb3JtYXQuXG4gICAgICogQHBhcmFtIHN0YXJ0aW5nQ2x1c3RlcnMgRGVmaW5lcyB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgcXVhbnRpemVyLiBQYXNzaW5nXG4gICAgICogICAgIGFuIGVtcHR5IGFycmF5IGlzIGZpbmUsIHRoZSBpbXBsZW1lbnRhdGlvbiB3aWxsIGNyZWF0ZSBpdHMgb3duIGluaXRpYWxcbiAgICAgKiAgICAgc3RhdGUgdGhhdCBsZWFkcyB0byByZXByb2R1Y2libGUgcmVzdWx0cyBmb3IgdGhlIHNhbWUgaW5wdXRzLlxuICAgICAqICAgICBQYXNzaW5nIGFuIGFycmF5IHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBXdSBxdWFudGl6YXRpb24gbGVhZHMgdG8gaGlnaGVyXG4gICAgICogICAgIHF1YWxpdHkgcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0gbWF4Q29sb3JzIFRoZSBudW1iZXIgb2YgY29sb3JzIHRvIGRpdmlkZSB0aGUgaW1hZ2UgaW50by4gQSBsb3dlclxuICAgICAqICAgICBudW1iZXIgb2YgY29sb3JzIG1heSBiZSByZXR1cm5lZC5cbiAgICAgKiBAcmV0dXJuIENvbG9ycyBpbiBBUkdCIGZvcm1hdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgcXVhbnRpemUoaW5wdXRQaXhlbHMsIHN0YXJ0aW5nQ2x1c3RlcnMsIG1heENvbG9ycykge1xuICAgICAgICBjb25zdCBwaXhlbFRvQ291bnQgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBjb25zdCBwaXhlbHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgY29uc3QgcG9pbnRQcm92aWRlciA9IG5ldyBMYWJQb2ludFByb3ZpZGVyKCk7XG4gICAgICAgIGxldCBwb2ludENvdW50ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFBpeGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRQaXhlbCA9IGlucHV0UGl4ZWxzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGl4ZWxDb3VudCA9IHBpeGVsVG9Db3VudC5nZXQoaW5wdXRQaXhlbCk7XG4gICAgICAgICAgICBpZiAocGl4ZWxDb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRDb3VudCsrO1xuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50UHJvdmlkZXIuZnJvbUludChpbnB1dFBpeGVsKSk7XG4gICAgICAgICAgICAgICAgcGl4ZWxzLnB1c2goaW5wdXRQaXhlbCk7XG4gICAgICAgICAgICAgICAgcGl4ZWxUb0NvdW50LnNldChpbnB1dFBpeGVsLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBpeGVsVG9Db3VudC5zZXQoaW5wdXRQaXhlbCwgcGl4ZWxDb3VudCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvdW50cyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGl4ZWwgPSBwaXhlbHNbaV07XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHBpeGVsVG9Db3VudC5nZXQocGl4ZWwpO1xuICAgICAgICAgICAgaWYgKGNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb3VudHNbaV0gPSBjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgY2x1c3RlckNvdW50ID0gTWF0aC5taW4obWF4Q29sb3JzLCBwb2ludENvdW50KTtcbiAgICAgICAgaWYgKHN0YXJ0aW5nQ2x1c3RlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2x1c3RlckNvdW50ID0gTWF0aC5taW4oY2x1c3RlckNvdW50LCBzdGFydGluZ0NsdXN0ZXJzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2x1c3RlcnMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFydGluZ0NsdXN0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjbHVzdGVycy5wdXNoKHBvaW50UHJvdmlkZXIuZnJvbUludChzdGFydGluZ0NsdXN0ZXJzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkaXRpb25hbENsdXN0ZXJzTmVlZGVkID0gY2x1c3RlckNvdW50IC0gY2x1c3RlcnMubGVuZ3RoO1xuICAgICAgICBpZiAoc3RhcnRpbmdDbHVzdGVycy5sZW5ndGggPT09IDAgJiYgYWRkaXRpb25hbENsdXN0ZXJzTmVlZGVkID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRpdGlvbmFsQ2x1c3RlcnNOZWVkZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBNYXRoLnJhbmRvbSgpICogMTAwLjA7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IE1hdGgucmFuZG9tKCkgKiAoMTAwLjAgLSAoLTEwMC4wKSArIDEpICsgLTEwMDtcbiAgICAgICAgICAgICAgICBjb25zdCBiID0gTWF0aC5yYW5kb20oKSAqICgxMDAuMCAtICgtMTAwLjApICsgMSkgKyAtMTAwO1xuICAgICAgICAgICAgICAgIGNsdXN0ZXJzLnB1c2gobmV3IEFycmF5KGwsIGEsIGIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbHVzdGVySW5kaWNlcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY2x1c3RlckluZGljZXMucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjbHVzdGVyQ291bnQpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleE1hdHJpeCA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsdXN0ZXJDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBpbmRleE1hdHJpeC5wdXNoKG5ldyBBcnJheSgpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2x1c3RlckNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpbmRleE1hdHJpeFtpXS5wdXNoKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlVG9JbmRleE1hdHJpeCA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsdXN0ZXJDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBkaXN0YW5jZVRvSW5kZXhNYXRyaXgucHVzaChuZXcgQXJyYXkoKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNsdXN0ZXJDb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2VUb0luZGV4TWF0cml4W2ldLnB1c2gobmV3IERpc3RhbmNlQW5kSW5kZXgoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGl4ZWxDb3VudFN1bXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbHVzdGVyQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgcGl4ZWxDb3VudFN1bXMucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpdGVyYXRpb24gPSAwOyBpdGVyYXRpb24gPCBNQVhfSVRFUkFUSU9OUzsgaXRlcmF0aW9uKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2x1c3RlckNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBjbHVzdGVyQ291bnQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHBvaW50UHJvdmlkZXIuZGlzdGFuY2UoY2x1c3RlcnNbaV0sIGNsdXN0ZXJzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VUb0luZGV4TWF0cml4W2pdW2ldLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlVG9JbmRleE1hdHJpeFtqXVtpXS5pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlVG9JbmRleE1hdHJpeFtpXVtqXS5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZVRvSW5kZXhNYXRyaXhbaV1bal0uaW5kZXggPSBqO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXN0YW5jZVRvSW5kZXhNYXRyaXhbaV0uc29ydCgpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2x1c3RlckNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhNYXRyaXhbaV1bal0gPSBkaXN0YW5jZVRvSW5kZXhNYXRyaXhbaV1bal0uaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBvaW50c01vdmVkID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNDbHVzdGVySW5kZXggPSBjbHVzdGVySW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0NsdXN0ZXIgPSBjbHVzdGVyc1twcmV2aW91c0NsdXN0ZXJJbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNEaXN0YW5jZSA9IHBvaW50UHJvdmlkZXIuZGlzdGFuY2UocG9pbnQsIHByZXZpb3VzQ2x1c3Rlcik7XG4gICAgICAgICAgICAgICAgbGV0IG1pbmltdW1EaXN0YW5jZSA9IHByZXZpb3VzRGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0NsdXN0ZXJJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2x1c3RlckNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlVG9JbmRleE1hdHJpeFtwcmV2aW91c0NsdXN0ZXJJbmRleF1bal0uZGlzdGFuY2UgPj1cbiAgICAgICAgICAgICAgICAgICAgICAgIDQgKiBwcmV2aW91c0Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHBvaW50UHJvdmlkZXIuZGlzdGFuY2UocG9pbnQsIGNsdXN0ZXJzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgbWluaW11bURpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NsdXN0ZXJJbmRleCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5ld0NsdXN0ZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VDaGFuZ2UgPSBNYXRoLmFicygoTWF0aC5zcXJ0KG1pbmltdW1EaXN0YW5jZSkgLSBNYXRoLnNxcnQocHJldmlvdXNEaXN0YW5jZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlQ2hhbmdlID4gTUlOX01PVkVNRU5UX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNNb3ZlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2x1c3RlckluZGljZXNbaV0gPSBuZXdDbHVzdGVySW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9pbnRzTW92ZWQgPT09IDAgJiYgaXRlcmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRBU3VtcyA9IG5ldyBBcnJheShjbHVzdGVyQ291bnQpLmZpbGwoMCk7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRCU3VtcyA9IG5ldyBBcnJheShjbHVzdGVyQ291bnQpLmZpbGwoMCk7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRDU3VtcyA9IG5ldyBBcnJheShjbHVzdGVyQ291bnQpLmZpbGwoMCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsdXN0ZXJDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGl4ZWxDb3VudFN1bXNbaV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludENvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbHVzdGVySW5kZXggPSBjbHVzdGVySW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGNvdW50c1tpXTtcbiAgICAgICAgICAgICAgICBwaXhlbENvdW50U3Vtc1tjbHVzdGVySW5kZXhdICs9IGNvdW50O1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudEFTdW1zW2NsdXN0ZXJJbmRleF0gKz0gKHBvaW50WzBdICogY291bnQpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudEJTdW1zW2NsdXN0ZXJJbmRleF0gKz0gKHBvaW50WzFdICogY291bnQpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudENTdW1zW2NsdXN0ZXJJbmRleF0gKz0gKHBvaW50WzJdICogY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbHVzdGVyQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gcGl4ZWxDb3VudFN1bXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJzW2ldID0gWzAuMCwgMC4wLCAwLjBdO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGNvbXBvbmVudEFTdW1zW2ldIC8gY291bnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgYiA9IGNvbXBvbmVudEJTdW1zW2ldIC8gY291bnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGNvbXBvbmVudENTdW1zW2ldIC8gY291bnQ7XG4gICAgICAgICAgICAgICAgY2x1c3RlcnNbaV0gPSBbYSwgYiwgY107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJnYlRvUG9wdWxhdGlvbiA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbHVzdGVyQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSBwaXhlbENvdW50U3Vtc1tpXTtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcG9zc2libGVOZXdDbHVzdGVyID0gcG9pbnRQcm92aWRlci50b0ludChjbHVzdGVyc1tpXSk7XG4gICAgICAgICAgICBpZiAoYXJnYlRvUG9wdWxhdGlvbi5oYXMocG9zc2libGVOZXdDbHVzdGVyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJnYlRvUG9wdWxhdGlvbi5zZXQocG9zc2libGVOZXdDbHVzdGVyLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ2JUb1BvcHVsYXRpb247XG4gICAgfVxufVxuLyoqXG4gKiAgQSB3cmFwcGVyIGZvciBtYWludGFpbmluZyBhIHRhYmxlIG9mIGRpc3RhbmNlcyBiZXR3ZWVuIEstTWVhbnMgY2x1c3RlcnMuXG4gKi9cbmNsYXNzIERpc3RhbmNlQW5kSW5kZXgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gLTE7XG4gICAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWFudGl6ZXJfd3NtZWFucy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMvY29sb3JfdXRpbHMuanMnO1xuLyoqXG4gKiBRdWFudGl6ZXMgYW4gaW1hZ2UgaW50byBhIG1hcCwgd2l0aCBrZXlzIG9mIEFSR0IgY29sb3JzLCBhbmQgdmFsdWVzIG9mIHRoZVxuICogbnVtYmVyIG9mIHRpbWVzIHRoYXQgY29sb3IgYXBwZWFycyBpbiB0aGUgaW1hZ2UuXG4gKi9cbi8vIG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllcyBpcyBkZXNpZ25lZCB0byBoYXZlIGEgY29uc2lzdGVudCBBUEkgYWNyb3NzXG4vLyBwbGF0Zm9ybXMgYW5kIG1vZHVsYXIgY29tcG9uZW50cyB0aGF0IGNhbiBiZSBtb3ZlZCBhcm91bmQgZWFzaWx5LiBVc2luZyBhXG4vLyBjbGFzcyBhcyBhIG5hbWVzcGFjZSBmYWNpbGl0YXRlcyB0aGlzLlxuLy9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjbGFzcy1hcy1uYW1lc3BhY2VcbmV4cG9ydCBjbGFzcyBRdWFudGl6ZXJNYXAge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwaXhlbHMgQ29sb3JzIGluIEFSR0IgZm9ybWF0LlxuICAgICAqIEByZXR1cm4gQSBNYXAgd2l0aCBrZXlzIG9mIEFSR0IgY29sb3JzLCBhbmQgdmFsdWVzIG9mIHRoZSBudW1iZXIgb2YgdGltZXNcbiAgICAgKiAgICAgdGhlIGNvbG9yIGFwcGVhcnMgaW4gdGhlIGltYWdlLlxuICAgICAqL1xuICAgIHN0YXRpYyBxdWFudGl6ZShwaXhlbHMpIHtcbiAgICAgICAgY29uc3QgY291bnRCeUNvbG9yID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpeGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGl4ZWwgPSBwaXhlbHNbaV07XG4gICAgICAgICAgICBjb25zdCBhbHBoYSA9IHV0aWxzLmFscGhhRnJvbUFyZ2IocGl4ZWwpO1xuICAgICAgICAgICAgaWYgKGFscGhhIDwgMjU1KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudEJ5Q29sb3Iuc2V0KHBpeGVsLCAoY291bnRCeUNvbG9yLmdldChwaXhlbCkgPz8gMCkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnRCeUNvbG9yO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1YW50aXplcl9tYXAuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzL2NvbG9yX3V0aWxzLmpzJztcbmltcG9ydCB7IFF1YW50aXplck1hcCB9IGZyb20gJy4vcXVhbnRpemVyX21hcC5qcyc7XG5jb25zdCBJTkRFWF9CSVRTID0gNTtcbmNvbnN0IFNJREVfTEVOR1RIID0gMzM7IC8vICgoMSA8PCBJTkRFWF9JTkRFWF9CSVRTKSArIDEpXG5jb25zdCBUT1RBTF9TSVpFID0gMzU5Mzc7IC8vIFNJREVfTEVOR1RIICogU0lERV9MRU5HVEggKiBTSURFX0xFTkdUSFxuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgICBSRUQ6ICdyZWQnLFxuICAgIEdSRUVOOiAnZ3JlZW4nLFxuICAgIEJMVUU6ICdibHVlJyxcbn07XG4vKipcbiAqIEFuIGltYWdlIHF1YW50aXplciB0aGF0IGRpdmlkZXMgdGhlIGltYWdlJ3MgcGl4ZWxzIGludG8gY2x1c3RlcnMgYnlcbiAqIHJlY3Vyc2l2ZWx5IGN1dHRpbmcgYW4gUkdCIGN1YmUsIGJhc2VkIG9uIHRoZSB3ZWlnaHQgb2YgcGl4ZWxzIGluIGVhY2ggYXJlYVxuICogb2YgdGhlIGN1YmUuXG4gKlxuICogVGhlIGFsZ29yaXRobSB3YXMgZGVzY3JpYmVkIGJ5IFhpYW9saW4gV3UgaW4gR3JhcGhpYyBHZW1zIElJLCBwdWJsaXNoZWQgaW5cbiAqIDE5OTEuXG4gKi9cbmV4cG9ydCBjbGFzcyBRdWFudGl6ZXJXdSB7XG4gICAgY29uc3RydWN0b3Iod2VpZ2h0cyA9IFtdLCBtb21lbnRzUiA9IFtdLCBtb21lbnRzRyA9IFtdLCBtb21lbnRzQiA9IFtdLCBtb21lbnRzID0gW10sIGN1YmVzID0gW10pIHtcbiAgICAgICAgdGhpcy53ZWlnaHRzID0gd2VpZ2h0cztcbiAgICAgICAgdGhpcy5tb21lbnRzUiA9IG1vbWVudHNSO1xuICAgICAgICB0aGlzLm1vbWVudHNHID0gbW9tZW50c0c7XG4gICAgICAgIHRoaXMubW9tZW50c0IgPSBtb21lbnRzQjtcbiAgICAgICAgdGhpcy5tb21lbnRzID0gbW9tZW50cztcbiAgICAgICAgdGhpcy5jdWJlcyA9IGN1YmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcGl4ZWxzIENvbG9ycyBpbiBBUkdCIGZvcm1hdC5cbiAgICAgKiBAcGFyYW0gbWF4Q29sb3JzIFRoZSBudW1iZXIgb2YgY29sb3JzIHRvIGRpdmlkZSB0aGUgaW1hZ2UgaW50by4gQSBsb3dlclxuICAgICAqICAgICBudW1iZXIgb2YgY29sb3JzIG1heSBiZSByZXR1cm5lZC5cbiAgICAgKiBAcmV0dXJuIENvbG9ycyBpbiBBUkdCIGZvcm1hdC5cbiAgICAgKi9cbiAgICBxdWFudGl6ZShwaXhlbHMsIG1heENvbG9ycykge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdEhpc3RvZ3JhbShwaXhlbHMpO1xuICAgICAgICB0aGlzLmNvbXB1dGVNb21lbnRzKCk7XG4gICAgICAgIGNvbnN0IGNyZWF0ZUJveGVzUmVzdWx0ID0gdGhpcy5jcmVhdGVCb3hlcyhtYXhDb2xvcnMpO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5jcmVhdGVSZXN1bHQoY3JlYXRlQm94ZXNSZXN1bHQucmVzdWx0Q291bnQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgY29uc3RydWN0SGlzdG9ncmFtKHBpeGVscykge1xuICAgICAgICB0aGlzLndlaWdodHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBUT1RBTF9TSVpFIH0pLmZpbGwoMCk7XG4gICAgICAgIHRoaXMubW9tZW50c1IgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBUT1RBTF9TSVpFIH0pLmZpbGwoMCk7XG4gICAgICAgIHRoaXMubW9tZW50c0cgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBUT1RBTF9TSVpFIH0pLmZpbGwoMCk7XG4gICAgICAgIHRoaXMubW9tZW50c0IgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBUT1RBTF9TSVpFIH0pLmZpbGwoMCk7XG4gICAgICAgIHRoaXMubW9tZW50cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IFRPVEFMX1NJWkUgfSkuZmlsbCgwKTtcbiAgICAgICAgY29uc3QgY291bnRCeUNvbG9yID0gUXVhbnRpemVyTWFwLnF1YW50aXplKHBpeGVscyk7XG4gICAgICAgIGZvciAoY29uc3QgW3BpeGVsLCBjb3VudF0gb2YgY291bnRCeUNvbG9yLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgcmVkID0gdXRpbHMucmVkRnJvbUFyZ2IocGl4ZWwpO1xuICAgICAgICAgICAgY29uc3QgZ3JlZW4gPSB1dGlscy5ncmVlbkZyb21BcmdiKHBpeGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGJsdWUgPSB1dGlscy5ibHVlRnJvbUFyZ2IocGl4ZWwpO1xuICAgICAgICAgICAgY29uc3QgYml0c1RvUmVtb3ZlID0gOCAtIElOREVYX0JJVFM7XG4gICAgICAgICAgICBjb25zdCBpUiA9IChyZWQgPj4gYml0c1RvUmVtb3ZlKSArIDE7XG4gICAgICAgICAgICBjb25zdCBpRyA9IChncmVlbiA+PiBiaXRzVG9SZW1vdmUpICsgMTtcbiAgICAgICAgICAgIGNvbnN0IGlCID0gKGJsdWUgPj4gYml0c1RvUmVtb3ZlKSArIDE7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0SW5kZXgoaVIsIGlHLCBpQik7XG4gICAgICAgICAgICB0aGlzLndlaWdodHNbaW5kZXhdID0gKHRoaXMud2VpZ2h0c1tpbmRleF0gPz8gMCkgKyBjb3VudDtcbiAgICAgICAgICAgIHRoaXMubW9tZW50c1JbaW5kZXhdICs9IGNvdW50ICogcmVkO1xuICAgICAgICAgICAgdGhpcy5tb21lbnRzR1tpbmRleF0gKz0gY291bnQgKiBncmVlbjtcbiAgICAgICAgICAgIHRoaXMubW9tZW50c0JbaW5kZXhdICs9IGNvdW50ICogYmx1ZTtcbiAgICAgICAgICAgIHRoaXMubW9tZW50c1tpbmRleF0gKz0gY291bnQgKiAocmVkICogcmVkICsgZ3JlZW4gKiBncmVlbiArIGJsdWUgKiBibHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wdXRlTW9tZW50cygpIHtcbiAgICAgICAgZm9yIChsZXQgciA9IDE7IHIgPCBTSURFX0xFTkdUSDsgcisrKSB7XG4gICAgICAgICAgICBjb25zdCBhcmVhID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogU0lERV9MRU5HVEggfSkuZmlsbCgwKTtcbiAgICAgICAgICAgIGNvbnN0IGFyZWFSID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogU0lERV9MRU5HVEggfSkuZmlsbCgwKTtcbiAgICAgICAgICAgIGNvbnN0IGFyZWFHID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogU0lERV9MRU5HVEggfSkuZmlsbCgwKTtcbiAgICAgICAgICAgIGNvbnN0IGFyZWFCID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogU0lERV9MRU5HVEggfSkuZmlsbCgwKTtcbiAgICAgICAgICAgIGNvbnN0IGFyZWEyID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogU0lERV9MRU5HVEggfSkuZmlsbCgwLjApO1xuICAgICAgICAgICAgZm9yIChsZXQgZyA9IDE7IGcgPCBTSURFX0xFTkdUSDsgZysrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBsaW5lUiA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmVHID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgbGluZUIgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBsaW5lMiA9IDAuMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBiID0gMTsgYiA8IFNJREVfTEVOR1RIOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmdldEluZGV4KHIsIGcsIGIpO1xuICAgICAgICAgICAgICAgICAgICBsaW5lICs9IHRoaXMud2VpZ2h0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxpbmVSICs9IHRoaXMubW9tZW50c1JbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsaW5lRyArPSB0aGlzLm1vbWVudHNHW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgbGluZUIgKz0gdGhpcy5tb21lbnRzQltpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxpbmUyICs9IHRoaXMubW9tZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGFyZWFbYl0gKz0gbGluZTtcbiAgICAgICAgICAgICAgICAgICAgYXJlYVJbYl0gKz0gbGluZVI7XG4gICAgICAgICAgICAgICAgICAgIGFyZWFHW2JdICs9IGxpbmVHO1xuICAgICAgICAgICAgICAgICAgICBhcmVhQltiXSArPSBsaW5lQjtcbiAgICAgICAgICAgICAgICAgICAgYXJlYTJbYl0gKz0gbGluZTI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzSW5kZXggPSB0aGlzLmdldEluZGV4KHIgLSAxLCBnLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWlnaHRzW2luZGV4XSA9IHRoaXMud2VpZ2h0c1twcmV2aW91c0luZGV4XSArIGFyZWFbYl07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9tZW50c1JbaW5kZXhdID0gdGhpcy5tb21lbnRzUltwcmV2aW91c0luZGV4XSArIGFyZWFSW2JdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbWVudHNHW2luZGV4XSA9IHRoaXMubW9tZW50c0dbcHJldmlvdXNJbmRleF0gKyBhcmVhR1tiXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb21lbnRzQltpbmRleF0gPSB0aGlzLm1vbWVudHNCW3ByZXZpb3VzSW5kZXhdICsgYXJlYUJbYl07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9tZW50c1tpbmRleF0gPSB0aGlzLm1vbWVudHNbcHJldmlvdXNJbmRleF0gKyBhcmVhMltiXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlQm94ZXMobWF4Q29sb3JzKSB7XG4gICAgICAgIHRoaXMuY3ViZXMgPVxuICAgICAgICAgICAgQXJyYXkuZnJvbSh7IGxlbmd0aDogbWF4Q29sb3JzIH0pLmZpbGwoMCkubWFwKCgpID0+IG5ldyBCb3goKSk7XG4gICAgICAgIGNvbnN0IHZvbHVtZVZhcmlhbmNlID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogbWF4Q29sb3JzIH0pLmZpbGwoMC4wKTtcbiAgICAgICAgdGhpcy5jdWJlc1swXS5yMCA9IDA7XG4gICAgICAgIHRoaXMuY3ViZXNbMF0uZzAgPSAwO1xuICAgICAgICB0aGlzLmN1YmVzWzBdLmIwID0gMDtcbiAgICAgICAgdGhpcy5jdWJlc1swXS5yMSA9IFNJREVfTEVOR1RIIC0gMTtcbiAgICAgICAgdGhpcy5jdWJlc1swXS5nMSA9IFNJREVfTEVOR1RIIC0gMTtcbiAgICAgICAgdGhpcy5jdWJlc1swXS5iMSA9IFNJREVfTEVOR1RIIC0gMTtcbiAgICAgICAgbGV0IGdlbmVyYXRlZENvbG9yQ291bnQgPSBtYXhDb2xvcnM7XG4gICAgICAgIGxldCBuZXh0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXhDb2xvcnM7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3V0KHRoaXMuY3ViZXNbbmV4dF0sIHRoaXMuY3ViZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lVmFyaWFuY2VbbmV4dF0gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1YmVzW25leHRdLnZvbCA+IDEgPyB0aGlzLnZhcmlhbmNlKHRoaXMuY3ViZXNbbmV4dF0pIDogMC4wO1xuICAgICAgICAgICAgICAgIHZvbHVtZVZhcmlhbmNlW2ldID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdWJlc1tpXS52b2wgPiAxID8gdGhpcy52YXJpYW5jZSh0aGlzLmN1YmVzW2ldKSA6IDAuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZvbHVtZVZhcmlhbmNlW25leHRdID0gMC4wO1xuICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSAwO1xuICAgICAgICAgICAgbGV0IHRlbXAgPSB2b2x1bWVWYXJpYW5jZVswXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAxOyBqIDw9IGk7IGorKykge1xuICAgICAgICAgICAgICAgIGlmICh2b2x1bWVWYXJpYW5jZVtqXSA+IHRlbXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHZvbHVtZVZhcmlhbmNlW2pdO1xuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGVtcCA8PSAwLjApIHtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZWRDb2xvckNvdW50ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDcmVhdGVCb3hlc1Jlc3VsdChtYXhDb2xvcnMsIGdlbmVyYXRlZENvbG9yQ291bnQpO1xuICAgIH1cbiAgICBjcmVhdGVSZXN1bHQoY29sb3JDb3VudCkge1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xvckNvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1YmUgPSB0aGlzLmN1YmVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgd2VpZ2h0ID0gdGhpcy52b2x1bWUoY3ViZSwgdGhpcy53ZWlnaHRzKTtcbiAgICAgICAgICAgIGlmICh3ZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IE1hdGgucm91bmQodGhpcy52b2x1bWUoY3ViZSwgdGhpcy5tb21lbnRzUikgLyB3ZWlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGcgPSBNYXRoLnJvdW5kKHRoaXMudm9sdW1lKGN1YmUsIHRoaXMubW9tZW50c0cpIC8gd2VpZ2h0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBiID0gTWF0aC5yb3VuZCh0aGlzLnZvbHVtZShjdWJlLCB0aGlzLm1vbWVudHNCKSAvIHdlaWdodCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSAoMjU1IDw8IDI0KSB8ICgociAmIDB4MGZmKSA8PCAxNikgfCAoKGcgJiAweDBmZikgPDwgOCkgfFxuICAgICAgICAgICAgICAgICAgICAoYiAmIDB4MGZmKTtcbiAgICAgICAgICAgICAgICBjb2xvcnMucHVzaChjb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9ycztcbiAgICB9XG4gICAgdmFyaWFuY2UoY3ViZSkge1xuICAgICAgICBjb25zdCBkciA9IHRoaXMudm9sdW1lKGN1YmUsIHRoaXMubW9tZW50c1IpO1xuICAgICAgICBjb25zdCBkZyA9IHRoaXMudm9sdW1lKGN1YmUsIHRoaXMubW9tZW50c0cpO1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMudm9sdW1lKGN1YmUsIHRoaXMubW9tZW50c0IpO1xuICAgICAgICBjb25zdCB4eCA9IHRoaXMubW9tZW50c1t0aGlzLmdldEluZGV4KGN1YmUucjEsIGN1YmUuZzEsIGN1YmUuYjEpXSAtXG4gICAgICAgICAgICB0aGlzLm1vbWVudHNbdGhpcy5nZXRJbmRleChjdWJlLnIxLCBjdWJlLmcxLCBjdWJlLmIwKV0gLVxuICAgICAgICAgICAgdGhpcy5tb21lbnRzW3RoaXMuZ2V0SW5kZXgoY3ViZS5yMSwgY3ViZS5nMCwgY3ViZS5iMSldICtcbiAgICAgICAgICAgIHRoaXMubW9tZW50c1t0aGlzLmdldEluZGV4KGN1YmUucjEsIGN1YmUuZzAsIGN1YmUuYjApXSAtXG4gICAgICAgICAgICB0aGlzLm1vbWVudHNbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBjdWJlLmcxLCBjdWJlLmIxKV0gK1xuICAgICAgICAgICAgdGhpcy5tb21lbnRzW3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMSwgY3ViZS5iMCldICtcbiAgICAgICAgICAgIHRoaXMubW9tZW50c1t0aGlzLmdldEluZGV4KGN1YmUucjAsIGN1YmUuZzAsIGN1YmUuYjEpXSAtXG4gICAgICAgICAgICB0aGlzLm1vbWVudHNbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBjdWJlLmcwLCBjdWJlLmIwKV07XG4gICAgICAgIGNvbnN0IGh5cG90ZW51c2UgPSBkciAqIGRyICsgZGcgKiBkZyArIGRiICogZGI7XG4gICAgICAgIGNvbnN0IHZvbHVtZSA9IHRoaXMudm9sdW1lKGN1YmUsIHRoaXMud2VpZ2h0cyk7XG4gICAgICAgIHJldHVybiB4eCAtIGh5cG90ZW51c2UgLyB2b2x1bWU7XG4gICAgfVxuICAgIGN1dChvbmUsIHR3bykge1xuICAgICAgICBjb25zdCB3aG9sZVIgPSB0aGlzLnZvbHVtZShvbmUsIHRoaXMubW9tZW50c1IpO1xuICAgICAgICBjb25zdCB3aG9sZUcgPSB0aGlzLnZvbHVtZShvbmUsIHRoaXMubW9tZW50c0cpO1xuICAgICAgICBjb25zdCB3aG9sZUIgPSB0aGlzLnZvbHVtZShvbmUsIHRoaXMubW9tZW50c0IpO1xuICAgICAgICBjb25zdCB3aG9sZVcgPSB0aGlzLnZvbHVtZShvbmUsIHRoaXMud2VpZ2h0cyk7XG4gICAgICAgIGNvbnN0IG1heFJSZXN1bHQgPSB0aGlzLm1heGltaXplKG9uZSwgZGlyZWN0aW9ucy5SRUQsIG9uZS5yMCArIDEsIG9uZS5yMSwgd2hvbGVSLCB3aG9sZUcsIHdob2xlQiwgd2hvbGVXKTtcbiAgICAgICAgY29uc3QgbWF4R1Jlc3VsdCA9IHRoaXMubWF4aW1pemUob25lLCBkaXJlY3Rpb25zLkdSRUVOLCBvbmUuZzAgKyAxLCBvbmUuZzEsIHdob2xlUiwgd2hvbGVHLCB3aG9sZUIsIHdob2xlVyk7XG4gICAgICAgIGNvbnN0IG1heEJSZXN1bHQgPSB0aGlzLm1heGltaXplKG9uZSwgZGlyZWN0aW9ucy5CTFVFLCBvbmUuYjAgKyAxLCBvbmUuYjEsIHdob2xlUiwgd2hvbGVHLCB3aG9sZUIsIHdob2xlVyk7XG4gICAgICAgIGxldCBkaXJlY3Rpb247XG4gICAgICAgIGNvbnN0IG1heFIgPSBtYXhSUmVzdWx0Lm1heGltdW07XG4gICAgICAgIGNvbnN0IG1heEcgPSBtYXhHUmVzdWx0Lm1heGltdW07XG4gICAgICAgIGNvbnN0IG1heEIgPSBtYXhCUmVzdWx0Lm1heGltdW07XG4gICAgICAgIGlmIChtYXhSID49IG1heEcgJiYgbWF4UiA+PSBtYXhCKSB7XG4gICAgICAgICAgICBpZiAobWF4UlJlc3VsdC5jdXRMb2NhdGlvbiA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zLlJFRDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtYXhHID49IG1heFIgJiYgbWF4RyA+PSBtYXhCKSB7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zLkdSRUVOO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5CTFVFO1xuICAgICAgICB9XG4gICAgICAgIHR3by5yMSA9IG9uZS5yMTtcbiAgICAgICAgdHdvLmcxID0gb25lLmcxO1xuICAgICAgICB0d28uYjEgPSBvbmUuYjE7XG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuUkVEOlxuICAgICAgICAgICAgICAgIG9uZS5yMSA9IG1heFJSZXN1bHQuY3V0TG9jYXRpb247XG4gICAgICAgICAgICAgICAgdHdvLnIwID0gb25lLnIxO1xuICAgICAgICAgICAgICAgIHR3by5nMCA9IG9uZS5nMDtcbiAgICAgICAgICAgICAgICB0d28uYjAgPSBvbmUuYjA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuR1JFRU46XG4gICAgICAgICAgICAgICAgb25lLmcxID0gbWF4R1Jlc3VsdC5jdXRMb2NhdGlvbjtcbiAgICAgICAgICAgICAgICB0d28ucjAgPSBvbmUucjA7XG4gICAgICAgICAgICAgICAgdHdvLmcwID0gb25lLmcxO1xuICAgICAgICAgICAgICAgIHR3by5iMCA9IG9uZS5iMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5CTFVFOlxuICAgICAgICAgICAgICAgIG9uZS5iMSA9IG1heEJSZXN1bHQuY3V0TG9jYXRpb247XG4gICAgICAgICAgICAgICAgdHdvLnIwID0gb25lLnIwO1xuICAgICAgICAgICAgICAgIHR3by5nMCA9IG9uZS5nMDtcbiAgICAgICAgICAgICAgICB0d28uYjAgPSBvbmUuYjE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCBkaXJlY3Rpb24gJyArIGRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgb25lLnZvbCA9IChvbmUucjEgLSBvbmUucjApICogKG9uZS5nMSAtIG9uZS5nMCkgKiAob25lLmIxIC0gb25lLmIwKTtcbiAgICAgICAgdHdvLnZvbCA9ICh0d28ucjEgLSB0d28ucjApICogKHR3by5nMSAtIHR3by5nMCkgKiAodHdvLmIxIC0gdHdvLmIwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIG1heGltaXplKGN1YmUsIGRpcmVjdGlvbiwgZmlyc3QsIGxhc3QsIHdob2xlUiwgd2hvbGVHLCB3aG9sZUIsIHdob2xlVykge1xuICAgICAgICBjb25zdCBib3R0b21SID0gdGhpcy5ib3R0b20oY3ViZSwgZGlyZWN0aW9uLCB0aGlzLm1vbWVudHNSKTtcbiAgICAgICAgY29uc3QgYm90dG9tRyA9IHRoaXMuYm90dG9tKGN1YmUsIGRpcmVjdGlvbiwgdGhpcy5tb21lbnRzRyk7XG4gICAgICAgIGNvbnN0IGJvdHRvbUIgPSB0aGlzLmJvdHRvbShjdWJlLCBkaXJlY3Rpb24sIHRoaXMubW9tZW50c0IpO1xuICAgICAgICBjb25zdCBib3R0b21XID0gdGhpcy5ib3R0b20oY3ViZSwgZGlyZWN0aW9uLCB0aGlzLndlaWdodHMpO1xuICAgICAgICBsZXQgbWF4ID0gMC4wO1xuICAgICAgICBsZXQgY3V0ID0gLTE7XG4gICAgICAgIGxldCBoYWxmUiA9IDA7XG4gICAgICAgIGxldCBoYWxmRyA9IDA7XG4gICAgICAgIGxldCBoYWxmQiA9IDA7XG4gICAgICAgIGxldCBoYWxmVyA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSBmaXJzdDsgaSA8IGxhc3Q7IGkrKykge1xuICAgICAgICAgICAgaGFsZlIgPSBib3R0b21SICsgdGhpcy50b3AoY3ViZSwgZGlyZWN0aW9uLCBpLCB0aGlzLm1vbWVudHNSKTtcbiAgICAgICAgICAgIGhhbGZHID0gYm90dG9tRyArIHRoaXMudG9wKGN1YmUsIGRpcmVjdGlvbiwgaSwgdGhpcy5tb21lbnRzRyk7XG4gICAgICAgICAgICBoYWxmQiA9IGJvdHRvbUIgKyB0aGlzLnRvcChjdWJlLCBkaXJlY3Rpb24sIGksIHRoaXMubW9tZW50c0IpO1xuICAgICAgICAgICAgaGFsZlcgPSBib3R0b21XICsgdGhpcy50b3AoY3ViZSwgZGlyZWN0aW9uLCBpLCB0aGlzLndlaWdodHMpO1xuICAgICAgICAgICAgaWYgKGhhbGZXID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdGVtcE51bWVyYXRvciA9IChoYWxmUiAqIGhhbGZSICsgaGFsZkcgKiBoYWxmRyArIGhhbGZCICogaGFsZkIpICogMS4wO1xuICAgICAgICAgICAgbGV0IHRlbXBEZW5vbWluYXRvciA9IGhhbGZXICogMS4wO1xuICAgICAgICAgICAgbGV0IHRlbXAgPSB0ZW1wTnVtZXJhdG9yIC8gdGVtcERlbm9taW5hdG9yO1xuICAgICAgICAgICAgaGFsZlIgPSB3aG9sZVIgLSBoYWxmUjtcbiAgICAgICAgICAgIGhhbGZHID0gd2hvbGVHIC0gaGFsZkc7XG4gICAgICAgICAgICBoYWxmQiA9IHdob2xlQiAtIGhhbGZCO1xuICAgICAgICAgICAgaGFsZlcgPSB3aG9sZVcgLSBoYWxmVztcbiAgICAgICAgICAgIGlmIChoYWxmVyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcE51bWVyYXRvciA9IChoYWxmUiAqIGhhbGZSICsgaGFsZkcgKiBoYWxmRyArIGhhbGZCICogaGFsZkIpICogMS4wO1xuICAgICAgICAgICAgdGVtcERlbm9taW5hdG9yID0gaGFsZlcgKiAxLjA7XG4gICAgICAgICAgICB0ZW1wICs9IHRlbXBOdW1lcmF0b3IgLyB0ZW1wRGVub21pbmF0b3I7XG4gICAgICAgICAgICBpZiAodGVtcCA+IG1heCkge1xuICAgICAgICAgICAgICAgIG1heCA9IHRlbXA7XG4gICAgICAgICAgICAgICAgY3V0ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE1heGltaXplUmVzdWx0KGN1dCwgbWF4KTtcbiAgICB9XG4gICAgdm9sdW1lKGN1YmUsIG1vbWVudCkge1xuICAgICAgICByZXR1cm4gKG1vbWVudFt0aGlzLmdldEluZGV4KGN1YmUucjEsIGN1YmUuZzEsIGN1YmUuYjEpXSAtXG4gICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIxLCBjdWJlLmcxLCBjdWJlLmIwKV0gLVxuICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMSwgY3ViZS5nMCwgY3ViZS5iMSldICtcbiAgICAgICAgICAgIG1vbWVudFt0aGlzLmdldEluZGV4KGN1YmUucjEsIGN1YmUuZzAsIGN1YmUuYjApXSAtXG4gICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBjdWJlLmcxLCBjdWJlLmIxKV0gK1xuICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMSwgY3ViZS5iMCldICtcbiAgICAgICAgICAgIG1vbWVudFt0aGlzLmdldEluZGV4KGN1YmUucjAsIGN1YmUuZzAsIGN1YmUuYjEpXSAtXG4gICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBjdWJlLmcwLCBjdWJlLmIwKV0pO1xuICAgIH1cbiAgICBib3R0b20oY3ViZSwgZGlyZWN0aW9uLCBtb21lbnQpIHtcbiAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5SRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgtbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMSwgY3ViZS5iMSldICtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMSwgY3ViZS5iMCldICtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMCwgY3ViZS5iMSldIC1cbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMCwgY3ViZS5iMCldKTtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5HUkVFTjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKC1tb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIxLCBjdWJlLmcwLCBjdWJlLmIxKV0gK1xuICAgICAgICAgICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIxLCBjdWJlLmcwLCBjdWJlLmIwKV0gK1xuICAgICAgICAgICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBjdWJlLmcwLCBjdWJlLmIxKV0gLVxuICAgICAgICAgICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBjdWJlLmcwLCBjdWJlLmIwKV0pO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLkJMVUU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgtbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMSwgY3ViZS5nMSwgY3ViZS5iMCldICtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMSwgY3ViZS5nMCwgY3ViZS5iMCldICtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMSwgY3ViZS5iMCldIC1cbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMCwgY3ViZS5iMCldKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIGRpcmVjdGlvbiAkZGlyZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9wKGN1YmUsIGRpcmVjdGlvbiwgcG9zaXRpb24sIG1vbWVudCkge1xuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLlJFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKG1vbWVudFt0aGlzLmdldEluZGV4KHBvc2l0aW9uLCBjdWJlLmcxLCBjdWJlLmIxKV0gLVxuICAgICAgICAgICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChwb3NpdGlvbiwgY3ViZS5nMSwgY3ViZS5iMCldIC1cbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgocG9zaXRpb24sIGN1YmUuZzAsIGN1YmUuYjEpXSArXG4gICAgICAgICAgICAgICAgICAgIG1vbWVudFt0aGlzLmdldEluZGV4KHBvc2l0aW9uLCBjdWJlLmcwLCBjdWJlLmIwKV0pO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLkdSRUVOOlxuICAgICAgICAgICAgICAgIHJldHVybiAobW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMSwgcG9zaXRpb24sIGN1YmUuYjEpXSAtXG4gICAgICAgICAgICAgICAgICAgIG1vbWVudFt0aGlzLmdldEluZGV4KGN1YmUucjEsIHBvc2l0aW9uLCBjdWJlLmIwKV0gLVxuICAgICAgICAgICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIwLCBwb3NpdGlvbiwgY3ViZS5iMSldICtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgcG9zaXRpb24sIGN1YmUuYjApXSk7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuQkxVRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gKG1vbWVudFt0aGlzLmdldEluZGV4KGN1YmUucjEsIGN1YmUuZzEsIHBvc2l0aW9uKV0gLVxuICAgICAgICAgICAgICAgICAgICBtb21lbnRbdGhpcy5nZXRJbmRleChjdWJlLnIxLCBjdWJlLmcwLCBwb3NpdGlvbildIC1cbiAgICAgICAgICAgICAgICAgICAgbW9tZW50W3RoaXMuZ2V0SW5kZXgoY3ViZS5yMCwgY3ViZS5nMSwgcG9zaXRpb24pXSArXG4gICAgICAgICAgICAgICAgICAgIG1vbWVudFt0aGlzLmdldEluZGV4KGN1YmUucjAsIGN1YmUuZzAsIHBvc2l0aW9uKV0pO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuZXhwZWN0ZWQgZGlyZWN0aW9uICRkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJbmRleChyLCBnLCBiKSB7XG4gICAgICAgIHJldHVybiAociA8PCAoSU5ERVhfQklUUyAqIDIpKSArIChyIDw8IChJTkRFWF9CSVRTICsgMSkpICsgciArXG4gICAgICAgICAgICAoZyA8PCBJTkRFWF9CSVRTKSArIGcgKyBiO1xuICAgIH1cbn1cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIHN0YXRlIG9mIGVhY2ggYm94IGNyZWF0ZWQgYXMgdGhlIFd1ICBxdWFudGl6YXRpb25cbiAqIGFsZ29yaXRobSBwcm9ncmVzc2VzIHRocm91Z2ggZGl2aWRpbmcgdGhlIGltYWdlJ3MgcGl4ZWxzIGFzIHBsb3R0ZWQgaW4gUkdCLlxuICovXG5jbGFzcyBCb3gge1xuICAgIGNvbnN0cnVjdG9yKHIwID0gMCwgcjEgPSAwLCBnMCA9IDAsIGcxID0gMCwgYjAgPSAwLCBiMSA9IDAsIHZvbCA9IDApIHtcbiAgICAgICAgdGhpcy5yMCA9IHIwO1xuICAgICAgICB0aGlzLnIxID0gcjE7XG4gICAgICAgIHRoaXMuZzAgPSBnMDtcbiAgICAgICAgdGhpcy5nMSA9IGcxO1xuICAgICAgICB0aGlzLmIwID0gYjA7XG4gICAgICAgIHRoaXMuYjEgPSBiMTtcbiAgICAgICAgdGhpcy52b2wgPSB2b2w7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGZpbmFsIHJlc3VsdCBvZiBXdSBhbGdvcml0aG0uXG4gKi9cbmNsYXNzIENyZWF0ZUJveGVzUmVzdWx0IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcmVxdWVzdGVkQ291bnQgaG93IG1hbnkgY29sb3JzIHRoZSBjYWxsZXIgYXNrZWQgdG8gYmUgcmV0dXJuZWQgZnJvbVxuICAgICAqICAgICBxdWFudGl6YXRpb24uXG4gICAgICogQHBhcmFtIHJlc3VsdENvdW50IHRoZSBhY3R1YWwgbnVtYmVyIG9mIGNvbG9ycyBhY2hpZXZlZCBmcm9tIHF1YW50aXphdGlvbi5cbiAgICAgKiAgICAgTWF5IGJlIGxvd2VyIHRoYW4gdGhlIHJlcXVlc3RlZCBjb3VudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0ZWRDb3VudCwgcmVzdWx0Q291bnQpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZWRDb3VudCA9IHJlcXVlc3RlZENvdW50O1xuICAgICAgICB0aGlzLnJlc3VsdENvdW50ID0gcmVzdWx0Q291bnQ7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgY2FsY3VsYXRpbmcgd2hlcmUgdG8gY3V0IGFuIGV4aXN0aW5nIGJveCBpbiBzdWNoXG4gKiBhIHdheSB0byBtYXhpbWl6ZSB2YXJpYW5jZSBiZXR3ZWVuIHRoZSB0d28gbmV3IGJveGVzIGNyZWF0ZWQgYnkgYSBjdXQuXG4gKi9cbmNsYXNzIE1heGltaXplUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihjdXRMb2NhdGlvbiwgbWF4aW11bSkge1xuICAgICAgICB0aGlzLmN1dExvY2F0aW9uID0gY3V0TG9jYXRpb247XG4gICAgICAgIHRoaXMubWF4aW11bSA9IG1heGltdW07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVhbnRpemVyX3d1LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBRdWFudGl6ZXJXc21lYW5zIH0gZnJvbSAnLi9xdWFudGl6ZXJfd3NtZWFucy5qcyc7XG5pbXBvcnQgeyBRdWFudGl6ZXJXdSB9IGZyb20gJy4vcXVhbnRpemVyX3d1LmpzJztcbi8qKlxuICogQW4gaW1hZ2UgcXVhbnRpemVyIHRoYXQgaW1wcm92ZXMgb24gdGhlIHF1YWxpdHkgb2YgYSBzdGFuZGFyZCBLLU1lYW5zXG4gKiBhbGdvcml0aG0gYnkgc2V0dGluZyB0aGUgSy1NZWFucyBpbml0aWFsIHN0YXRlIHRvIHRoZSBvdXRwdXQgb2YgYSBXdVxuICogcXVhbnRpemVyLCBpbnN0ZWFkIG9mIHJhbmRvbSBjZW50cm9pZHMuIEltcHJvdmVzIG9uIHNwZWVkIGJ5IHNldmVyYWxcbiAqIG9wdGltaXphdGlvbnMsIGFzIGltcGxlbWVudGVkIGluIFdzbWVhbnMsIG9yIFdlaWdodGVkIFNxdWFyZSBNZWFucywgSy1NZWFuc1xuICogd2l0aCB0aG9zZSBvcHRpbWl6YXRpb25zLlxuICpcbiAqIFRoaXMgYWxnb3JpdGhtIHdhcyBkZXNpZ25lZCBieSBNLiBFbXJlIENlbGViaSwgYW5kIHdhcyBmb3VuZCBpbiB0aGVpciAyMDExXG4gKiBwYXBlciwgSW1wcm92aW5nIHRoZSBQZXJmb3JtYW5jZSBvZiBLLU1lYW5zIGZvciBDb2xvciBRdWFudGl6YXRpb24uXG4gKiBodHRwczovL2FyeGl2Lm9yZy9hYnMvMTEwMS4wMzk1XG4gKi9cbi8vIG1hdGVyaWFsX2NvbG9yX3V0aWxpdGllcyBpcyBkZXNpZ25lZCB0byBoYXZlIGEgY29uc2lzdGVudCBBUEkgYWNyb3NzXG4vLyBwbGF0Zm9ybXMgYW5kIG1vZHVsYXIgY29tcG9uZW50cyB0aGF0IGNhbiBiZSBtb3ZlZCBhcm91bmQgZWFzaWx5LiBVc2luZyBhXG4vLyBjbGFzcyBhcyBhIG5hbWVzcGFjZSBmYWNpbGl0YXRlcyB0aGlzLlxuLy9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjbGFzcy1hcy1uYW1lc3BhY2VcbmV4cG9ydCBjbGFzcyBRdWFudGl6ZXJDZWxlYmkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwaXhlbHMgQ29sb3JzIGluIEFSR0IgZm9ybWF0LlxuICAgICAqIEBwYXJhbSBtYXhDb2xvcnMgVGhlIG51bWJlciBvZiBjb2xvcnMgdG8gZGl2aWRlIHRoZSBpbWFnZSBpbnRvLiBBIGxvd2VyXG4gICAgICogICAgIG51bWJlciBvZiBjb2xvcnMgbWF5IGJlIHJldHVybmVkLlxuICAgICAqIEByZXR1cm4gTWFwIHdpdGgga2V5cyBvZiBjb2xvcnMgaW4gQVJHQiBmb3JtYXQsIGFuZCB2YWx1ZXMgb2YgbnVtYmVyIG9mXG4gICAgICogICAgIHBpeGVscyBpbiB0aGUgb3JpZ2luYWwgaW1hZ2UgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBjb2xvciBpbiB0aGVcbiAgICAgKiAgICAgcXVhbnRpemVkIGltYWdlLlxuICAgICAqL1xuICAgIHN0YXRpYyBxdWFudGl6ZShwaXhlbHMsIG1heENvbG9ycykge1xuICAgICAgICBjb25zdCB3dSA9IG5ldyBRdWFudGl6ZXJXdSgpO1xuICAgICAgICBjb25zdCB3dVJlc3VsdCA9IHd1LnF1YW50aXplKHBpeGVscywgbWF4Q29sb3JzKTtcbiAgICAgICAgcmV0dXJuIFF1YW50aXplcldzbWVhbnMucXVhbnRpemUocGl4ZWxzLCB3dVJlc3VsdCwgbWF4Q29sb3JzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWFudGl6ZXJfY2VsZWJpLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBIY3QgfSBmcm9tICcuLi9oY3QvaGN0LmpzJztcbmltcG9ydCB7IFRvbmFsUGFsZXR0ZSB9IGZyb20gJy4uL3BhbGV0dGVzL3RvbmFsX3BhbGV0dGUuanMnO1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuLi91dGlscy9tYXRoX3V0aWxzLmpzJztcbi8qKlxuICogQ29uc3RydWN0ZWQgYnkgYSBzZXQgb2YgdmFsdWVzIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBVSSBzdGF0ZSAoc3VjaCBhc1xuICogd2hldGhlciBvciBub3QgaXRzIGRhcmsgdGhlbWUsIHdoYXQgdGhlIHRoZW1lIHN0eWxlIGlzLCBldGMuKSwgYW5kXG4gKiBwcm92aWRlcyBhIHNldCBvZiBUb25hbFBhbGV0dGVzIHRoYXQgY2FuIGNyZWF0ZSBjb2xvcnMgdGhhdCBmaXQgaW5cbiAqIHdpdGggdGhlIHRoZW1lIHN0eWxlLiBVc2VkIGJ5IER5bmFtaWNDb2xvciB0byByZXNvbHZlIGludG8gYSBjb2xvci5cbiAqL1xuZXhwb3J0IGNsYXNzIER5bmFtaWNTY2hlbWUge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VDb2xvckFyZ2IgPSBhcmdzLnNvdXJjZUNvbG9yQXJnYjtcbiAgICAgICAgdGhpcy52YXJpYW50ID0gYXJncy52YXJpYW50O1xuICAgICAgICB0aGlzLmNvbnRyYXN0TGV2ZWwgPSBhcmdzLmNvbnRyYXN0TGV2ZWw7XG4gICAgICAgIHRoaXMuaXNEYXJrID0gYXJncy5pc0Rhcms7XG4gICAgICAgIHRoaXMuc291cmNlQ29sb3JIY3QgPSBIY3QuZnJvbUludChhcmdzLnNvdXJjZUNvbG9yQXJnYik7XG4gICAgICAgIHRoaXMucHJpbWFyeVBhbGV0dGUgPSBhcmdzLnByaW1hcnlQYWxldHRlO1xuICAgICAgICB0aGlzLnNlY29uZGFyeVBhbGV0dGUgPSBhcmdzLnNlY29uZGFyeVBhbGV0dGU7XG4gICAgICAgIHRoaXMudGVydGlhcnlQYWxldHRlID0gYXJncy50ZXJ0aWFyeVBhbGV0dGU7XG4gICAgICAgIHRoaXMubmV1dHJhbFBhbGV0dGUgPSBhcmdzLm5ldXRyYWxQYWxldHRlO1xuICAgICAgICB0aGlzLm5ldXRyYWxWYXJpYW50UGFsZXR0ZSA9IGFyZ3MubmV1dHJhbFZhcmlhbnRQYWxldHRlO1xuICAgICAgICB0aGlzLmVycm9yUGFsZXR0ZSA9IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKDI1LjAsIDg0LjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdXBwb3J0IGRlc2lnbiBzcGVjJ2luZyBEeW5hbWljIENvbG9yIGJ5IHNjaGVtZXMgdGhhdCBzcGVjaWZ5IGh1ZVxuICAgICAqIHJvdGF0aW9ucyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAgICogQHBhcmFtIHNvdXJjZUNvbG9yIHRoZSBzb3VyY2UgY29sb3Igb2YgdGhlIHRoZW1lLCBpbiBIQ1QuXG4gICAgICogQHBhcmFtIGh1ZXMgVGhlIFwiYnJlYWtwb2ludHNcIiwgaS5lLiB0aGUgaHVlcyBhdCB3aGljaCBhIHJvdGF0aW9uIHNob3VsZFxuICAgICAqIGJlIGFwcGx5LlxuICAgICAqIEBwYXJhbSByb3RhdGlvbnMgVGhlIHJvdGF0aW9uIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgd2hlbiBzb3VyY2UgY29sb3Inc1xuICAgICAqIGh1ZSBpcyA+PSB0aGUgc2FtZSBpbmRleCBpbiBodWVzIGFycmF5LCBhbmQgPD0gdGhlIGh1ZSBhdCB0aGUgbmV4dCBpbmRleFxuICAgICAqIGluIGh1ZXMgYXJyYXkuXG4gICAgICovXG4gICAgc3RhdGljIGdldFJvdGF0ZWRIdWUoc291cmNlQ29sb3IsIGh1ZXMsIHJvdGF0aW9ucykge1xuICAgICAgICBjb25zdCBzb3VyY2VIdWUgPSBzb3VyY2VDb2xvci5odWU7XG4gICAgICAgIGlmIChodWVzLmxlbmd0aCAhPT0gcm90YXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtaXNtYXRjaCBiZXR3ZWVuIGh1ZSBsZW5ndGggJHtodWVzLmxlbmd0aH0gJiByb3RhdGlvbnMgJHtyb3RhdGlvbnMubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3RhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0aC5zYW5pdGl6ZURlZ3JlZXNEb3VibGUoc291cmNlQ29sb3IuaHVlICsgcm90YXRpb25zWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaXplID0gaHVlcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHNpemUgLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNIdWUgPSBodWVzW2ldO1xuICAgICAgICAgICAgY29uc3QgbmV4dEh1ZSA9IGh1ZXNbaSArIDFdO1xuICAgICAgICAgICAgaWYgKHRoaXNIdWUgPCBzb3VyY2VIdWUgJiYgc291cmNlSHVlIDwgbmV4dEh1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRoLnNhbml0aXplRGVncmVlc0RvdWJsZShzb3VyY2VIdWUgKyByb3RhdGlvbnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoaXMgc3RhdGVtZW50IGV4ZWN1dGVzLCBzb21ldGhpbmcgaXMgd3JvbmcsIHRoZXJlIHNob3VsZCBoYXZlIGJlZW4gYVxuICAgICAgICAvLyByb3RhdGlvbiBmb3VuZCB1c2luZyB0aGUgYXJyYXlzLlxuICAgICAgICByZXR1cm4gc291cmNlSHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR5bmFtaWNfc2NoZW1lLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuIERvIG5vdCBtb2RpZnkgaXQuXG5pbXBvcnQgeyBDb3JlUGFsZXR0ZSB9IGZyb20gJy4uL3BhbGV0dGVzL2NvcmVfcGFsZXR0ZS5qcyc7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBNYXRlcmlhbCBjb2xvciBzY2hlbWUsIGEgbWFwcGluZyBvZiBjb2xvciByb2xlcyB0byBjb2xvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlbWUge1xuICAgIGdldCBwcmltYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5wcmltYXJ5O1xuICAgIH1cbiAgICBnZXQgb25QcmltYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vblByaW1hcnk7XG4gICAgfVxuICAgIGdldCBwcmltYXJ5Q29udGFpbmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5wcmltYXJ5Q29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgb25QcmltYXJ5Q29udGFpbmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vblByaW1hcnlDb250YWluZXI7XG4gICAgfVxuICAgIGdldCBzZWNvbmRhcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlY29uZGFyeTtcbiAgICB9XG4gICAgZ2V0IG9uU2Vjb25kYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vblNlY29uZGFyeTtcbiAgICB9XG4gICAgZ2V0IHNlY29uZGFyeUNvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2Vjb25kYXJ5Q29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgb25TZWNvbmRhcnlDb250YWluZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uU2Vjb25kYXJ5Q29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgdGVydGlhcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRlcnRpYXJ5O1xuICAgIH1cbiAgICBnZXQgb25UZXJ0aWFyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub25UZXJ0aWFyeTtcbiAgICB9XG4gICAgZ2V0IHRlcnRpYXJ5Q29udGFpbmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50ZXJ0aWFyeUNvbnRhaW5lcjtcbiAgICB9XG4gICAgZ2V0IG9uVGVydGlhcnlDb250YWluZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uVGVydGlhcnlDb250YWluZXI7XG4gICAgfVxuICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZXJyb3I7XG4gICAgfVxuICAgIGdldCBvbkVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkVycm9yO1xuICAgIH1cbiAgICBnZXQgZXJyb3JDb250YWluZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmVycm9yQ29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgb25FcnJvckNvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub25FcnJvckNvbnRhaW5lcjtcbiAgICB9XG4gICAgZ2V0IGJhY2tncm91bmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmJhY2tncm91bmQ7XG4gICAgfVxuICAgIGdldCBvbkJhY2tncm91bmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uQmFja2dyb3VuZDtcbiAgICB9XG4gICAgZ2V0IHN1cmZhY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnN1cmZhY2U7XG4gICAgfVxuICAgIGdldCBvblN1cmZhY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uU3VyZmFjZTtcbiAgICB9XG4gICAgZ2V0IHN1cmZhY2VWYXJpYW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlVmFyaWFudDtcbiAgICB9XG4gICAgZ2V0IG9uU3VyZmFjZVZhcmlhbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uU3VyZmFjZVZhcmlhbnQ7XG4gICAgfVxuICAgIGdldCBvdXRsaW5lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vdXRsaW5lO1xuICAgIH1cbiAgICBnZXQgb3V0bGluZVZhcmlhbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm91dGxpbmVWYXJpYW50O1xuICAgIH1cbiAgICBnZXQgc2hhZG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zaGFkb3c7XG4gICAgfVxuICAgIGdldCBzY3JpbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2NyaW07XG4gICAgfVxuICAgIGdldCBpbnZlcnNlU3VyZmFjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaW52ZXJzZVN1cmZhY2U7XG4gICAgfVxuICAgIGdldCBpbnZlcnNlT25TdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pbnZlcnNlT25TdXJmYWNlO1xuICAgIH1cbiAgICBnZXQgaW52ZXJzZVByaW1hcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmludmVyc2VQcmltYXJ5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYXJnYiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGEgY29sb3IuXG4gICAgICogQHJldHVybiBMaWdodCBNYXRlcmlhbCBjb2xvciBzY2hlbWUsIGJhc2VkIG9uIHRoZSBjb2xvcidzIGh1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgbGlnaHQoYXJnYikge1xuICAgICAgICByZXR1cm4gU2NoZW1lLmxpZ2h0RnJvbUNvcmVQYWxldHRlKENvcmVQYWxldHRlLm9mKGFyZ2IpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gRGFyayBNYXRlcmlhbCBjb2xvciBzY2hlbWUsIGJhc2VkIG9uIHRoZSBjb2xvcidzIGh1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGFyayhhcmdiKSB7XG4gICAgICAgIHJldHVybiBTY2hlbWUuZGFya0Zyb21Db3JlUGFsZXR0ZShDb3JlUGFsZXR0ZS5vZihhcmdiKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhcmdiIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xvci5cbiAgICAgKiBAcmV0dXJuIExpZ2h0IE1hdGVyaWFsIGNvbnRlbnQgY29sb3Igc2NoZW1lLCBiYXNlZCBvbiB0aGUgY29sb3IncyBodWUuXG4gICAgICovXG4gICAgc3RhdGljIGxpZ2h0Q29udGVudChhcmdiKSB7XG4gICAgICAgIHJldHVybiBTY2hlbWUubGlnaHRGcm9tQ29yZVBhbGV0dGUoQ29yZVBhbGV0dGUuY29udGVudE9mKGFyZ2IpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gRGFyayBNYXRlcmlhbCBjb250ZW50IGNvbG9yIHNjaGVtZSwgYmFzZWQgb24gdGhlIGNvbG9yJ3MgaHVlLlxuICAgICAqL1xuICAgIHN0YXRpYyBkYXJrQ29udGVudChhcmdiKSB7XG4gICAgICAgIHJldHVybiBTY2hlbWUuZGFya0Zyb21Db3JlUGFsZXR0ZShDb3JlUGFsZXR0ZS5jb250ZW50T2YoYXJnYikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaWdodCBzY2hlbWUgZnJvbSBjb3JlIHBhbGV0dGVcbiAgICAgKi9cbiAgICBzdGF0aWMgbGlnaHRGcm9tQ29yZVBhbGV0dGUoY29yZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNjaGVtZSh7XG4gICAgICAgICAgICBwcmltYXJ5OiBjb3JlLmExLnRvbmUoNDApLFxuICAgICAgICAgICAgb25QcmltYXJ5OiBjb3JlLmExLnRvbmUoMTAwKSxcbiAgICAgICAgICAgIHByaW1hcnlDb250YWluZXI6IGNvcmUuYTEudG9uZSg5MCksXG4gICAgICAgICAgICBvblByaW1hcnlDb250YWluZXI6IGNvcmUuYTEudG9uZSgxMCksXG4gICAgICAgICAgICBzZWNvbmRhcnk6IGNvcmUuYTIudG9uZSg0MCksXG4gICAgICAgICAgICBvblNlY29uZGFyeTogY29yZS5hMi50b25lKDEwMCksXG4gICAgICAgICAgICBzZWNvbmRhcnlDb250YWluZXI6IGNvcmUuYTIudG9uZSg5MCksXG4gICAgICAgICAgICBvblNlY29uZGFyeUNvbnRhaW5lcjogY29yZS5hMi50b25lKDEwKSxcbiAgICAgICAgICAgIHRlcnRpYXJ5OiBjb3JlLmEzLnRvbmUoNDApLFxuICAgICAgICAgICAgb25UZXJ0aWFyeTogY29yZS5hMy50b25lKDEwMCksXG4gICAgICAgICAgICB0ZXJ0aWFyeUNvbnRhaW5lcjogY29yZS5hMy50b25lKDkwKSxcbiAgICAgICAgICAgIG9uVGVydGlhcnlDb250YWluZXI6IGNvcmUuYTMudG9uZSgxMCksXG4gICAgICAgICAgICBlcnJvcjogY29yZS5lcnJvci50b25lKDQwKSxcbiAgICAgICAgICAgIG9uRXJyb3I6IGNvcmUuZXJyb3IudG9uZSgxMDApLFxuICAgICAgICAgICAgZXJyb3JDb250YWluZXI6IGNvcmUuZXJyb3IudG9uZSg5MCksXG4gICAgICAgICAgICBvbkVycm9yQ29udGFpbmVyOiBjb3JlLmVycm9yLnRvbmUoMTApLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogY29yZS5uMS50b25lKDk5KSxcbiAgICAgICAgICAgIG9uQmFja2dyb3VuZDogY29yZS5uMS50b25lKDEwKSxcbiAgICAgICAgICAgIHN1cmZhY2U6IGNvcmUubjEudG9uZSg5OSksXG4gICAgICAgICAgICBvblN1cmZhY2U6IGNvcmUubjEudG9uZSgxMCksXG4gICAgICAgICAgICBzdXJmYWNlVmFyaWFudDogY29yZS5uMi50b25lKDkwKSxcbiAgICAgICAgICAgIG9uU3VyZmFjZVZhcmlhbnQ6IGNvcmUubjIudG9uZSgzMCksXG4gICAgICAgICAgICBvdXRsaW5lOiBjb3JlLm4yLnRvbmUoNTApLFxuICAgICAgICAgICAgb3V0bGluZVZhcmlhbnQ6IGNvcmUubjIudG9uZSg4MCksXG4gICAgICAgICAgICBzaGFkb3c6IGNvcmUubjEudG9uZSgwKSxcbiAgICAgICAgICAgIHNjcmltOiBjb3JlLm4xLnRvbmUoMCksXG4gICAgICAgICAgICBpbnZlcnNlU3VyZmFjZTogY29yZS5uMS50b25lKDIwKSxcbiAgICAgICAgICAgIGludmVyc2VPblN1cmZhY2U6IGNvcmUubjEudG9uZSg5NSksXG4gICAgICAgICAgICBpbnZlcnNlUHJpbWFyeTogY29yZS5hMS50b25lKDgwKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGFyayBzY2hlbWUgZnJvbSBjb3JlIHBhbGV0dGVcbiAgICAgKi9cbiAgICBzdGF0aWMgZGFya0Zyb21Db3JlUGFsZXR0ZShjb3JlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2NoZW1lKHtcbiAgICAgICAgICAgIHByaW1hcnk6IGNvcmUuYTEudG9uZSg4MCksXG4gICAgICAgICAgICBvblByaW1hcnk6IGNvcmUuYTEudG9uZSgyMCksXG4gICAgICAgICAgICBwcmltYXJ5Q29udGFpbmVyOiBjb3JlLmExLnRvbmUoMzApLFxuICAgICAgICAgICAgb25QcmltYXJ5Q29udGFpbmVyOiBjb3JlLmExLnRvbmUoOTApLFxuICAgICAgICAgICAgc2Vjb25kYXJ5OiBjb3JlLmEyLnRvbmUoODApLFxuICAgICAgICAgICAgb25TZWNvbmRhcnk6IGNvcmUuYTIudG9uZSgyMCksXG4gICAgICAgICAgICBzZWNvbmRhcnlDb250YWluZXI6IGNvcmUuYTIudG9uZSgzMCksXG4gICAgICAgICAgICBvblNlY29uZGFyeUNvbnRhaW5lcjogY29yZS5hMi50b25lKDkwKSxcbiAgICAgICAgICAgIHRlcnRpYXJ5OiBjb3JlLmEzLnRvbmUoODApLFxuICAgICAgICAgICAgb25UZXJ0aWFyeTogY29yZS5hMy50b25lKDIwKSxcbiAgICAgICAgICAgIHRlcnRpYXJ5Q29udGFpbmVyOiBjb3JlLmEzLnRvbmUoMzApLFxuICAgICAgICAgICAgb25UZXJ0aWFyeUNvbnRhaW5lcjogY29yZS5hMy50b25lKDkwKSxcbiAgICAgICAgICAgIGVycm9yOiBjb3JlLmVycm9yLnRvbmUoODApLFxuICAgICAgICAgICAgb25FcnJvcjogY29yZS5lcnJvci50b25lKDIwKSxcbiAgICAgICAgICAgIGVycm9yQ29udGFpbmVyOiBjb3JlLmVycm9yLnRvbmUoMzApLFxuICAgICAgICAgICAgb25FcnJvckNvbnRhaW5lcjogY29yZS5lcnJvci50b25lKDgwKSxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGNvcmUubjEudG9uZSgxMCksXG4gICAgICAgICAgICBvbkJhY2tncm91bmQ6IGNvcmUubjEudG9uZSg5MCksXG4gICAgICAgICAgICBzdXJmYWNlOiBjb3JlLm4xLnRvbmUoMTApLFxuICAgICAgICAgICAgb25TdXJmYWNlOiBjb3JlLm4xLnRvbmUoOTApLFxuICAgICAgICAgICAgc3VyZmFjZVZhcmlhbnQ6IGNvcmUubjIudG9uZSgzMCksXG4gICAgICAgICAgICBvblN1cmZhY2VWYXJpYW50OiBjb3JlLm4yLnRvbmUoODApLFxuICAgICAgICAgICAgb3V0bGluZTogY29yZS5uMi50b25lKDYwKSxcbiAgICAgICAgICAgIG91dGxpbmVWYXJpYW50OiBjb3JlLm4yLnRvbmUoMzApLFxuICAgICAgICAgICAgc2hhZG93OiBjb3JlLm4xLnRvbmUoMCksXG4gICAgICAgICAgICBzY3JpbTogY29yZS5uMS50b25lKDApLFxuICAgICAgICAgICAgaW52ZXJzZVN1cmZhY2U6IGNvcmUubjEudG9uZSg5MCksXG4gICAgICAgICAgICBpbnZlcnNlT25TdXJmYWNlOiBjb3JlLm4xLnRvbmUoMjApLFxuICAgICAgICAgICAgaW52ZXJzZVByaW1hcnk6IGNvcmUuYTEudG9uZSg0MClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udGhpcy5wcm9wc1xuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQ29yZVBhbGV0dGUgfSBmcm9tICcuLi9wYWxldHRlcy9jb3JlX3BhbGV0dGUuanMnO1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIEFuZHJvaWQgMTIgY29sb3Igc2NoZW1lLCBhIG1hcHBpbmcgb2YgY29sb3Igcm9sZXMgdG8gY29sb3JzLlxuICovXG5leHBvcnQgY2xhc3MgU2NoZW1lQW5kcm9pZCB7XG4gICAgZ2V0IGNvbG9yQWNjZW50UHJpbWFyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY29sb3JBY2NlbnRQcmltYXJ5O1xuICAgIH1cbiAgICBnZXQgY29sb3JBY2NlbnRQcmltYXJ5VmFyaWFudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY29sb3JBY2NlbnRQcmltYXJ5VmFyaWFudDtcbiAgICB9XG4gICAgZ2V0IGNvbG9yQWNjZW50U2Vjb25kYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jb2xvckFjY2VudFNlY29uZGFyeTtcbiAgICB9XG4gICAgZ2V0IGNvbG9yQWNjZW50U2Vjb25kYXJ5VmFyaWFudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY29sb3JBY2NlbnRTZWNvbmRhcnlWYXJpYW50O1xuICAgIH1cbiAgICBnZXQgY29sb3JBY2NlbnRUZXJ0aWFyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY29sb3JBY2NlbnRUZXJ0aWFyeTtcbiAgICB9XG4gICAgZ2V0IGNvbG9yQWNjZW50VGVydGlhcnlWYXJpYW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jb2xvckFjY2VudFRlcnRpYXJ5VmFyaWFudDtcbiAgICB9XG4gICAgZ2V0IHRleHRDb2xvclByaW1hcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRleHRDb2xvclByaW1hcnk7XG4gICAgfVxuICAgIGdldCB0ZXh0Q29sb3JTZWNvbmRhcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRleHRDb2xvclNlY29uZGFyeTtcbiAgICB9XG4gICAgZ2V0IHRleHRDb2xvclRlcnRpYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50ZXh0Q29sb3JUZXJ0aWFyeTtcbiAgICB9XG4gICAgZ2V0IHRleHRDb2xvclByaW1hcnlJbnZlcnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50ZXh0Q29sb3JQcmltYXJ5SW52ZXJzZTtcbiAgICB9XG4gICAgZ2V0IHRleHRDb2xvclNlY29uZGFyeUludmVyc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRleHRDb2xvclNlY29uZGFyeUludmVyc2U7XG4gICAgfVxuICAgIGdldCB0ZXh0Q29sb3JUZXJ0aWFyeUludmVyc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRleHRDb2xvclRlcnRpYXJ5SW52ZXJzZTtcbiAgICB9XG4gICAgZ2V0IGNvbG9yQmFja2dyb3VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY29sb3JCYWNrZ3JvdW5kO1xuICAgIH1cbiAgICBnZXQgY29sb3JCYWNrZ3JvdW5kRmxvYXRpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvbG9yQmFja2dyb3VuZEZsb2F0aW5nO1xuICAgIH1cbiAgICBnZXQgY29sb3JTdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jb2xvclN1cmZhY2U7XG4gICAgfVxuICAgIGdldCBjb2xvclN1cmZhY2VWYXJpYW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jb2xvclN1cmZhY2VWYXJpYW50O1xuICAgIH1cbiAgICBnZXQgY29sb3JTdXJmYWNlSGlnaGxpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jb2xvclN1cmZhY2VIaWdobGlnaHQ7XG4gICAgfVxuICAgIGdldCBzdXJmYWNlSGVhZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlSGVhZGVyO1xuICAgIH1cbiAgICBnZXQgdW5kZXJTdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy51bmRlclN1cmZhY2U7XG4gICAgfVxuICAgIGdldCBvZmZTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub2ZmU3RhdGU7XG4gICAgfVxuICAgIGdldCBhY2NlbnRTdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hY2NlbnRTdXJmYWNlO1xuICAgIH1cbiAgICBnZXQgdGV4dFByaW1hcnlPbkFjY2VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGV4dFByaW1hcnlPbkFjY2VudDtcbiAgICB9XG4gICAgZ2V0IHRleHRTZWNvbmRhcnlPbkFjY2VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGV4dFNlY29uZGFyeU9uQWNjZW50O1xuICAgIH1cbiAgICBnZXQgdm9sdW1lQmFja2dyb3VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudm9sdW1lQmFja2dyb3VuZDtcbiAgICB9XG4gICAgZ2V0IHNjcmltKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zY3JpbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gTGlnaHQgTWF0ZXJpYWwgY29sb3Igc2NoZW1lLCBiYXNlZCBvbiB0aGUgY29sb3IncyBodWUuXG4gICAgICovXG4gICAgc3RhdGljIGxpZ2h0KGFyZ2IpIHtcbiAgICAgICAgY29uc3QgY29yZSA9IENvcmVQYWxldHRlLm9mKGFyZ2IpO1xuICAgICAgICByZXR1cm4gU2NoZW1lQW5kcm9pZC5saWdodEZyb21Db3JlUGFsZXR0ZShjb3JlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gRGFyayBNYXRlcmlhbCBjb2xvciBzY2hlbWUsIGJhc2VkIG9uIHRoZSBjb2xvcidzIGh1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGFyayhhcmdiKSB7XG4gICAgICAgIGNvbnN0IGNvcmUgPSBDb3JlUGFsZXR0ZS5vZihhcmdiKTtcbiAgICAgICAgcmV0dXJuIFNjaGVtZUFuZHJvaWQuZGFya0Zyb21Db3JlUGFsZXR0ZShjb3JlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFyZ2IgQVJHQiByZXByZXNlbnRhdGlvbiBvZiBhIGNvbG9yLlxuICAgICAqIEByZXR1cm4gTGlnaHQgQW5kcm9pZCBjb2xvciBzY2hlbWUsIGJhc2VkIG9uIHRoZSBjb2xvcidzIGh1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgbGlnaHRDb250ZW50KGFyZ2IpIHtcbiAgICAgICAgY29uc3QgY29yZSA9IENvcmVQYWxldHRlLmNvbnRlbnRPZihhcmdiKTtcbiAgICAgICAgcmV0dXJuIFNjaGVtZUFuZHJvaWQubGlnaHRGcm9tQ29yZVBhbGV0dGUoY29yZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhcmdiIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xvci5cbiAgICAgKiBAcmV0dXJuIERhcmsgQW5kcm9pZCBjb2xvciBzY2hlbWUsIGJhc2VkIG9uIHRoZSBjb2xvcidzIGh1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGFya0NvbnRlbnQoYXJnYikge1xuICAgICAgICBjb25zdCBjb3JlID0gQ29yZVBhbGV0dGUuY29udGVudE9mKGFyZ2IpO1xuICAgICAgICByZXR1cm4gU2NoZW1lQW5kcm9pZC5kYXJrRnJvbUNvcmVQYWxldHRlKGNvcmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaWdodCBzY2hlbWUgZnJvbSBjb3JlIHBhbGV0dGVcbiAgICAgKi9cbiAgICBzdGF0aWMgbGlnaHRGcm9tQ29yZVBhbGV0dGUoY29yZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNjaGVtZUFuZHJvaWQoe1xuICAgICAgICAgICAgY29sb3JBY2NlbnRQcmltYXJ5OiBjb3JlLmExLnRvbmUoOTApLFxuICAgICAgICAgICAgY29sb3JBY2NlbnRQcmltYXJ5VmFyaWFudDogY29yZS5hMS50b25lKDQwKSxcbiAgICAgICAgICAgIGNvbG9yQWNjZW50U2Vjb25kYXJ5OiBjb3JlLmEyLnRvbmUoOTApLFxuICAgICAgICAgICAgY29sb3JBY2NlbnRTZWNvbmRhcnlWYXJpYW50OiBjb3JlLmEyLnRvbmUoNDApLFxuICAgICAgICAgICAgY29sb3JBY2NlbnRUZXJ0aWFyeTogY29yZS5hMy50b25lKDkwKSxcbiAgICAgICAgICAgIGNvbG9yQWNjZW50VGVydGlhcnlWYXJpYW50OiBjb3JlLmEzLnRvbmUoNDApLFxuICAgICAgICAgICAgdGV4dENvbG9yUHJpbWFyeTogY29yZS5uMS50b25lKDEwKSxcbiAgICAgICAgICAgIHRleHRDb2xvclNlY29uZGFyeTogY29yZS5uMi50b25lKDMwKSxcbiAgICAgICAgICAgIHRleHRDb2xvclRlcnRpYXJ5OiBjb3JlLm4yLnRvbmUoNTApLFxuICAgICAgICAgICAgdGV4dENvbG9yUHJpbWFyeUludmVyc2U6IGNvcmUubjEudG9uZSg5NSksXG4gICAgICAgICAgICB0ZXh0Q29sb3JTZWNvbmRhcnlJbnZlcnNlOiBjb3JlLm4xLnRvbmUoODApLFxuICAgICAgICAgICAgdGV4dENvbG9yVGVydGlhcnlJbnZlcnNlOiBjb3JlLm4xLnRvbmUoNjApLFxuICAgICAgICAgICAgY29sb3JCYWNrZ3JvdW5kOiBjb3JlLm4xLnRvbmUoOTUpLFxuICAgICAgICAgICAgY29sb3JCYWNrZ3JvdW5kRmxvYXRpbmc6IGNvcmUubjEudG9uZSg5OCksXG4gICAgICAgICAgICBjb2xvclN1cmZhY2U6IGNvcmUubjEudG9uZSg5OCksXG4gICAgICAgICAgICBjb2xvclN1cmZhY2VWYXJpYW50OiBjb3JlLm4xLnRvbmUoOTApLFxuICAgICAgICAgICAgY29sb3JTdXJmYWNlSGlnaGxpZ2h0OiBjb3JlLm4xLnRvbmUoMTAwKSxcbiAgICAgICAgICAgIHN1cmZhY2VIZWFkZXI6IGNvcmUubjEudG9uZSg5MCksXG4gICAgICAgICAgICB1bmRlclN1cmZhY2U6IGNvcmUubjEudG9uZSgwKSxcbiAgICAgICAgICAgIG9mZlN0YXRlOiBjb3JlLm4xLnRvbmUoMjApLFxuICAgICAgICAgICAgYWNjZW50U3VyZmFjZTogY29yZS5hMi50b25lKDk1KSxcbiAgICAgICAgICAgIHRleHRQcmltYXJ5T25BY2NlbnQ6IGNvcmUubjEudG9uZSgxMCksXG4gICAgICAgICAgICB0ZXh0U2Vjb25kYXJ5T25BY2NlbnQ6IGNvcmUubjIudG9uZSgzMCksXG4gICAgICAgICAgICB2b2x1bWVCYWNrZ3JvdW5kOiBjb3JlLm4xLnRvbmUoMjUpLFxuICAgICAgICAgICAgc2NyaW06IGNvcmUubjEudG9uZSg4MCksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEYXJrIHNjaGVtZSBmcm9tIGNvcmUgcGFsZXR0ZVxuICAgICAqL1xuICAgIHN0YXRpYyBkYXJrRnJvbUNvcmVQYWxldHRlKGNvcmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hlbWVBbmRyb2lkKHtcbiAgICAgICAgICAgIGNvbG9yQWNjZW50UHJpbWFyeTogY29yZS5hMS50b25lKDkwKSxcbiAgICAgICAgICAgIGNvbG9yQWNjZW50UHJpbWFyeVZhcmlhbnQ6IGNvcmUuYTEudG9uZSg3MCksXG4gICAgICAgICAgICBjb2xvckFjY2VudFNlY29uZGFyeTogY29yZS5hMi50b25lKDkwKSxcbiAgICAgICAgICAgIGNvbG9yQWNjZW50U2Vjb25kYXJ5VmFyaWFudDogY29yZS5hMi50b25lKDcwKSxcbiAgICAgICAgICAgIGNvbG9yQWNjZW50VGVydGlhcnk6IGNvcmUuYTMudG9uZSg5MCksXG4gICAgICAgICAgICBjb2xvckFjY2VudFRlcnRpYXJ5VmFyaWFudDogY29yZS5hMy50b25lKDcwKSxcbiAgICAgICAgICAgIHRleHRDb2xvclByaW1hcnk6IGNvcmUubjEudG9uZSg5NSksXG4gICAgICAgICAgICB0ZXh0Q29sb3JTZWNvbmRhcnk6IGNvcmUubjIudG9uZSg4MCksXG4gICAgICAgICAgICB0ZXh0Q29sb3JUZXJ0aWFyeTogY29yZS5uMi50b25lKDYwKSxcbiAgICAgICAgICAgIHRleHRDb2xvclByaW1hcnlJbnZlcnNlOiBjb3JlLm4xLnRvbmUoMTApLFxuICAgICAgICAgICAgdGV4dENvbG9yU2Vjb25kYXJ5SW52ZXJzZTogY29yZS5uMS50b25lKDMwKSxcbiAgICAgICAgICAgIHRleHRDb2xvclRlcnRpYXJ5SW52ZXJzZTogY29yZS5uMS50b25lKDUwKSxcbiAgICAgICAgICAgIGNvbG9yQmFja2dyb3VuZDogY29yZS5uMS50b25lKDEwKSxcbiAgICAgICAgICAgIGNvbG9yQmFja2dyb3VuZEZsb2F0aW5nOiBjb3JlLm4xLnRvbmUoMTApLFxuICAgICAgICAgICAgY29sb3JTdXJmYWNlOiBjb3JlLm4xLnRvbmUoMjApLFxuICAgICAgICAgICAgY29sb3JTdXJmYWNlVmFyaWFudDogY29yZS5uMS50b25lKDMwKSxcbiAgICAgICAgICAgIGNvbG9yU3VyZmFjZUhpZ2hsaWdodDogY29yZS5uMS50b25lKDM1KSxcbiAgICAgICAgICAgIHN1cmZhY2VIZWFkZXI6IGNvcmUubjEudG9uZSgzMCksXG4gICAgICAgICAgICB1bmRlclN1cmZhY2U6IGNvcmUubjEudG9uZSgwKSxcbiAgICAgICAgICAgIG9mZlN0YXRlOiBjb3JlLm4xLnRvbmUoMjApLFxuICAgICAgICAgICAgYWNjZW50U3VyZmFjZTogY29yZS5hMi50b25lKDk1KSxcbiAgICAgICAgICAgIHRleHRQcmltYXJ5T25BY2NlbnQ6IGNvcmUubjEudG9uZSgxMCksXG4gICAgICAgICAgICB0ZXh0U2Vjb25kYXJ5T25BY2NlbnQ6IGNvcmUubjIudG9uZSgzMCksXG4gICAgICAgICAgICB2b2x1bWVCYWNrZ3JvdW5kOiBjb3JlLm4xLnRvbmUoMjUpLFxuICAgICAgICAgICAgc2NyaW06IGNvcmUubjEudG9uZSg4MCksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4udGhpcy5wcm9wcyB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtZV9hbmRyb2lkLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuIERvIG5vdCBtb2RpZnkgaXQuXG5pbXBvcnQgeyBIY3QgfSBmcm9tICcuLi9oY3QvaGN0LmpzJztcbmltcG9ydCAqIGFzIGNvbG9yVXRpbHMgZnJvbSAnLi4vdXRpbHMvY29sb3JfdXRpbHMuanMnO1xuaW1wb3J0ICogYXMgbWF0aFV0aWxzIGZyb20gJy4uL3V0aWxzL21hdGhfdXRpbHMuanMnO1xuLyoqXG4gKiBEZXNpZ24gdXRpbGl0aWVzIHVzaW5nIGNvbG9yIHRlbXBlcmF0dXJlIHRoZW9yeS5cbiAqXG4gKiBBbmFsb2dvdXMgY29sb3JzLCBjb21wbGVtZW50YXJ5IGNvbG9yLCBhbmQgY2FjaGUgdG8gZWZmaWNpZW50bHksIGxhemlseSxcbiAqIGdlbmVyYXRlIGRhdGEgZm9yIGNhbGN1bGF0aW9ucyB3aGVuIG5lZWRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBlcmF0dXJlQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5oY3RzQnlUZW1wQ2FjaGUgPSBbXTtcbiAgICAgICAgdGhpcy5oY3RzQnlIdWVDYWNoZSA9IFtdO1xuICAgICAgICB0aGlzLnRlbXBzQnlIY3RDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5pbnB1dFJlbGF0aXZlVGVtcGVyYXR1cmVDYWNoZSA9IC0xLjA7XG4gICAgICAgIHRoaXMuY29tcGxlbWVudENhY2hlID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0IGhjdHNCeVRlbXAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhjdHNCeVRlbXBDYWNoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oY3RzQnlUZW1wQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGN0cyA9IHRoaXMuaGN0c0J5SHVlLmNvbmNhdChbdGhpcy5pbnB1dF0pO1xuICAgICAgICBjb25zdCB0ZW1wZXJhdHVyZXNCeUhjdCA9IHRoaXMudGVtcHNCeUhjdDtcbiAgICAgICAgaGN0cy5zb3J0KChhLCBiKSA9PiB0ZW1wZXJhdHVyZXNCeUhjdC5nZXQoYSkgLSB0ZW1wZXJhdHVyZXNCeUhjdC5nZXQoYikpO1xuICAgICAgICB0aGlzLmhjdHNCeVRlbXBDYWNoZSA9IGhjdHM7XG4gICAgICAgIHJldHVybiBoY3RzO1xuICAgIH1cbiAgICBnZXQgd2FybWVzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGN0c0J5VGVtcFt0aGlzLmhjdHNCeVRlbXAubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGdldCBjb2xkZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oY3RzQnlUZW1wWzBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiBjb2xvcnMgd2l0aCBkaWZmZXJpbmcgaHVlcywgZXF1aWRpc3RhbnQgaW4gdGVtcGVyYXR1cmUuXG4gICAgICpcbiAgICAgKiBJbiBhcnQsIHRoaXMgaXMgdXN1YWxseSBkZXNjcmliZWQgYXMgYSBzZXQgb2YgNSBjb2xvcnMgb24gYSBjb2xvciB3aGVlbFxuICAgICAqIGRpdmlkZWQgaW50byAxMiBzZWN0aW9ucy4gVGhpcyBtZXRob2QgYWxsb3dzIHByb3Zpc2lvbiBvZiBlaXRoZXIgb2YgdGhvc2VcbiAgICAgKiB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBCZWhhdmlvciBpcyB1bmRlZmluZWQgd2hlbiBbY291bnRdIG9yIFtkaXZpc2lvbnNdIGlzIDAuXG4gICAgICogV2hlbiBkaXZpc2lvbnMgPCBjb3VudCwgY29sb3JzIHJlcGVhdC5cbiAgICAgKlxuICAgICAqIFtjb3VudF0gVGhlIG51bWJlciBvZiBjb2xvcnMgdG8gcmV0dXJuLCBpbmNsdWRlcyB0aGUgaW5wdXQgY29sb3IuXG4gICAgICogW2RpdmlzaW9uc10gVGhlIG51bWJlciBvZiBkaXZpc2lvbnMgb24gdGhlIGNvbG9yIHdoZWVsLlxuICAgICAqL1xuICAgIGFuYWxvZ291cyhjb3VudCA9IDUsIGRpdmlzaW9ucyA9IDEyKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0SHVlID0gTWF0aC5yb3VuZCh0aGlzLmlucHV0Lmh1ZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0SGN0ID0gdGhpcy5oY3RzQnlIdWVbc3RhcnRIdWVdO1xuICAgICAgICBsZXQgbGFzdFRlbXAgPSB0aGlzLnJlbGF0aXZlVGVtcGVyYXR1cmUoc3RhcnRIY3QpO1xuICAgICAgICBjb25zdCBhbGxDb2xvcnMgPSBbc3RhcnRIY3RdO1xuICAgICAgICBsZXQgYWJzb2x1dGVUb3RhbFRlbXBEZWx0YSA9IDAuMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzNjA7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaHVlID0gbWF0aFV0aWxzLnNhbml0aXplRGVncmVlc0ludChzdGFydEh1ZSArIGkpO1xuICAgICAgICAgICAgY29uc3QgaGN0ID0gdGhpcy5oY3RzQnlIdWVbaHVlXTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSB0aGlzLnJlbGF0aXZlVGVtcGVyYXR1cmUoaGN0KTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBEZWx0YSA9IE1hdGguYWJzKHRlbXAgLSBsYXN0VGVtcCk7XG4gICAgICAgICAgICBsYXN0VGVtcCA9IHRlbXA7XG4gICAgICAgICAgICBhYnNvbHV0ZVRvdGFsVGVtcERlbHRhICs9IHRlbXBEZWx0YTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaHVlQWRkZW5kID0gMTtcbiAgICAgICAgY29uc3QgdGVtcFN0ZXAgPSBhYnNvbHV0ZVRvdGFsVGVtcERlbHRhIC8gZGl2aXNpb25zO1xuICAgICAgICBsZXQgdG90YWxUZW1wRGVsdGEgPSAwLjA7XG4gICAgICAgIGxhc3RUZW1wID0gdGhpcy5yZWxhdGl2ZVRlbXBlcmF0dXJlKHN0YXJ0SGN0KTtcbiAgICAgICAgd2hpbGUgKGFsbENvbG9ycy5sZW5ndGggPCBkaXZpc2lvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGh1ZSA9IG1hdGhVdGlscy5zYW5pdGl6ZURlZ3JlZXNJbnQoc3RhcnRIdWUgKyBodWVBZGRlbmQpO1xuICAgICAgICAgICAgY29uc3QgaGN0ID0gdGhpcy5oY3RzQnlIdWVbaHVlXTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSB0aGlzLnJlbGF0aXZlVGVtcGVyYXR1cmUoaGN0KTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBEZWx0YSA9IE1hdGguYWJzKHRlbXAgLSBsYXN0VGVtcCk7XG4gICAgICAgICAgICB0b3RhbFRlbXBEZWx0YSArPSB0ZW1wRGVsdGE7XG4gICAgICAgICAgICBjb25zdCBkZXNpcmVkVG90YWxUZW1wRGVsdGFGb3JJbmRleCA9IGFsbENvbG9ycy5sZW5ndGggKiB0ZW1wU3RlcDtcbiAgICAgICAgICAgIGxldCBpbmRleFNhdGlzZmllZCA9IHRvdGFsVGVtcERlbHRhID49IGRlc2lyZWRUb3RhbFRlbXBEZWx0YUZvckluZGV4O1xuICAgICAgICAgICAgbGV0IGluZGV4QWRkZW5kID0gMTtcbiAgICAgICAgICAgIC8vIEtlZXAgYWRkaW5nIHRoaXMgaHVlIHRvIHRoZSBhbnN3ZXJzIHVudGlsIGl0cyB0ZW1wZXJhdHVyZSBpc1xuICAgICAgICAgICAgLy8gaW5zdWZmaWNpZW50LiBUaGlzIGVuc3VyZXMgY29uc2lzdGVudCBiZWhhdmlvciB3aGVuIHRoZXJlIGFyZW4ndFxuICAgICAgICAgICAgLy8gW2RpdmlzaW9uc10gZGlzY3JldGUgc3RlcHMgYmV0d2VlbiAwIGFuZCAzNjAgaW4gaHVlIHdpdGggW3RlbXBTdGVwXVxuICAgICAgICAgICAgLy8gZGVsdGEgaW4gdGVtcGVyYXR1cmUgYmV0d2VlbiB0aGVtLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCB3aGl0ZSBhbmQgYmxhY2sgaGF2ZSBubyBhbmFsb2d1ZXM6IHRoZXJlIGFyZSBubyBvdGhlclxuICAgICAgICAgICAgLy8gY29sb3JzIGF0IFQxMDAvVDAuIFRoZXJlZm9yZSwgdGhleSBzaG91bGQganVzdCBiZSBhZGRlZCB0byB0aGUgYXJyYXlcbiAgICAgICAgICAgIC8vIGFzIGFuc3dlcnMuXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXhTYXRpc2ZpZWQgJiYgYWxsQ29sb3JzLmxlbmd0aCA8IGRpdmlzaW9ucykge1xuICAgICAgICAgICAgICAgIGFsbENvbG9ycy5wdXNoKGhjdCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzaXJlZFRvdGFsVGVtcERlbHRhRm9ySW5kZXggPSAoKGFsbENvbG9ycy5sZW5ndGggKyBpbmRleEFkZGVuZCkgKiB0ZW1wU3RlcCk7XG4gICAgICAgICAgICAgICAgaW5kZXhTYXRpc2ZpZWQgPSB0b3RhbFRlbXBEZWx0YSA+PSBkZXNpcmVkVG90YWxUZW1wRGVsdGFGb3JJbmRleDtcbiAgICAgICAgICAgICAgICBpbmRleEFkZGVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdFRlbXAgPSB0ZW1wO1xuICAgICAgICAgICAgaHVlQWRkZW5kKys7XG4gICAgICAgICAgICBpZiAoaHVlQWRkZW5kID4gMzYwKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGFsbENvbG9ycy5sZW5ndGggPCBkaXZpc2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsQ29sb3JzLnB1c2goaGN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5zd2VycyA9IFt0aGlzLmlucHV0XTtcbiAgICAgICAgLy8gRmlyc3QsIGdlbmVyYXRlIGFuYWxvZ3VlcyBmcm9tIHJvdGF0aW5nIGNvdW50ZXItY2xvY2t3aXNlLlxuICAgICAgICBjb25zdCBpbmNyZWFzZUh1ZUNvdW50ID0gTWF0aC5mbG9vcigoY291bnQgLSAxKSAvIDIuMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgKGluY3JlYXNlSHVlQ291bnQgKyAxKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAwIC0gaTtcbiAgICAgICAgICAgIHdoaWxlIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGFsbENvbG9ycy5sZW5ndGggKyBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBhbGxDb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAlIGFsbENvbG9ycy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbnN3ZXJzLnNwbGljZSgwLCAwLCBhbGxDb2xvcnNbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZWNvbmQsIGdlbmVyYXRlIGFuYWxvZ3VlcyBmcm9tIHJvdGF0aW5nIGNsb2Nrd2lzZS5cbiAgICAgICAgY29uc3QgZGVjcmVhc2VIdWVDb3VudCA9IGNvdW50IC0gaW5jcmVhc2VIdWVDb3VudCAtIDE7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgKGRlY3JlYXNlSHVlQ291bnQgKyAxKTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBpO1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gYWxsQ29sb3JzLmxlbmd0aCArIGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZGV4ID49IGFsbENvbG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4ICUgYWxsQ29sb3JzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuc3dlcnMucHVzaChhbGxDb2xvcnNbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5zd2VycztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBjb2xvciB0aGF0IGNvbXBsZW1lbnRzIHRoZSBpbnB1dCBjb2xvciBhZXN0aGV0aWNhbGx5LlxuICAgICAqXG4gICAgICogSW4gYXJ0LCB0aGlzIGlzIHVzdWFsbHkgZGVzY3JpYmVkIGFzIGJlaW5nIGFjcm9zcyB0aGUgY29sb3Igd2hlZWwuXG4gICAgICogSGlzdG9yeSBvZiB0aGlzIHNob3dzIGludGVudCBhcyBhIGNvbG9yIHRoYXQgaXMganVzdCBhcyBjb29sLXdhcm0gYXMgdGhlXG4gICAgICogaW5wdXQgY29sb3IgaXMgd2FybS1jb29sLlxuICAgICAqL1xuICAgIGdldCBjb21wbGVtZW50KCkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGVtZW50Q2FjaGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGxlbWVudENhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGRlc3RIdWUgPSB0aGlzLmNvbGRlc3QuaHVlO1xuICAgICAgICBjb25zdCBjb2xkZXN0VGVtcCA9IHRoaXMudGVtcHNCeUhjdC5nZXQodGhpcy5jb2xkZXN0KTtcbiAgICAgICAgY29uc3Qgd2FybWVzdEh1ZSA9IHRoaXMud2FybWVzdC5odWU7XG4gICAgICAgIGNvbnN0IHdhcm1lc3RUZW1wID0gdGhpcy50ZW1wc0J5SGN0LmdldCh0aGlzLndhcm1lc3QpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHdhcm1lc3RUZW1wIC0gY29sZGVzdFRlbXA7XG4gICAgICAgIGNvbnN0IHN0YXJ0SHVlSXNDb2xkZXN0VG9XYXJtZXN0ID0gVGVtcGVyYXR1cmVDYWNoZS5pc0JldHdlZW4odGhpcy5pbnB1dC5odWUsIGNvbGRlc3RIdWUsIHdhcm1lc3RIdWUpO1xuICAgICAgICBjb25zdCBzdGFydEh1ZSA9IHN0YXJ0SHVlSXNDb2xkZXN0VG9XYXJtZXN0ID8gd2FybWVzdEh1ZSA6IGNvbGRlc3RIdWU7XG4gICAgICAgIGNvbnN0IGVuZEh1ZSA9IHN0YXJ0SHVlSXNDb2xkZXN0VG9XYXJtZXN0ID8gY29sZGVzdEh1ZSA6IHdhcm1lc3RIdWU7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbk9mUm90YXRpb24gPSAxLjA7XG4gICAgICAgIGxldCBzbWFsbGVzdEVycm9yID0gMTAwMC4wO1xuICAgICAgICBsZXQgYW5zd2VyID0gdGhpcy5oY3RzQnlIdWVbTWF0aC5yb3VuZCh0aGlzLmlucHV0Lmh1ZSldO1xuICAgICAgICBjb25zdCBjb21wbGVtZW50UmVsYXRpdmVUZW1wID0gMS4wIC0gdGhpcy5pbnB1dFJlbGF0aXZlVGVtcGVyYXR1cmU7XG4gICAgICAgIC8vIEZpbmQgdGhlIGNvbG9yIGluIHRoZSBvdGhlciBzZWN0aW9uLCBjbG9zZXN0IHRvIHRoZSBpbnZlcnNlIHBlcmNlbnRpbGVcbiAgICAgICAgLy8gb2YgdGhlIGlucHV0IGNvbG9yLiBUaGlzIGlzIHRoZSBjb21wbGVtZW50LlxuICAgICAgICBmb3IgKGxldCBodWVBZGRlbmQgPSAwLjA7IGh1ZUFkZGVuZCA8PSAzNjAuMDsgaHVlQWRkZW5kICs9IDEuMCkge1xuICAgICAgICAgICAgY29uc3QgaHVlID0gbWF0aFV0aWxzLnNhbml0aXplRGVncmVlc0RvdWJsZShzdGFydEh1ZSArIGRpcmVjdGlvbk9mUm90YXRpb24gKiBodWVBZGRlbmQpO1xuICAgICAgICAgICAgaWYgKCFUZW1wZXJhdHVyZUNhY2hlLmlzQmV0d2VlbihodWUsIHN0YXJ0SHVlLCBlbmRIdWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwb3NzaWJsZUFuc3dlciA9IHRoaXMuaGN0c0J5SHVlW01hdGgucm91bmQoaHVlKV07XG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZVRlbXAgPSAodGhpcy50ZW1wc0J5SGN0LmdldChwb3NzaWJsZUFuc3dlcikgLSBjb2xkZXN0VGVtcCkgLyByYW5nZTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gTWF0aC5hYnMoY29tcGxlbWVudFJlbGF0aXZlVGVtcCAtIHJlbGF0aXZlVGVtcCk7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPCBzbWFsbGVzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgc21hbGxlc3RFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIGFuc3dlciA9IHBvc3NpYmxlQW5zd2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tcGxlbWVudENhY2hlID0gYW5zd2VyO1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wbGVtZW50Q2FjaGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlbXBlcmF0dXJlIHJlbGF0aXZlIHRvIGFsbCBjb2xvcnMgd2l0aCB0aGUgc2FtZSBjaHJvbWEgYW5kIHRvbmUuXG4gICAgICogVmFsdWUgb24gYSBzY2FsZSBmcm9tIDAgdG8gMS5cbiAgICAgKi9cbiAgICByZWxhdGl2ZVRlbXBlcmF0dXJlKGhjdCkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMudGVtcHNCeUhjdC5nZXQodGhpcy53YXJtZXN0KSAtIHRoaXMudGVtcHNCeUhjdC5nZXQodGhpcy5jb2xkZXN0KTtcbiAgICAgICAgY29uc3QgZGlmZmVyZW5jZUZyb21Db2xkZXN0ID0gdGhpcy50ZW1wc0J5SGN0LmdldChoY3QpIC0gdGhpcy50ZW1wc0J5SGN0LmdldCh0aGlzLmNvbGRlc3QpO1xuICAgICAgICAvLyBIYW5kbGUgd2hlbiB0aGVyZSdzIG5vIGRpZmZlcmVuY2UgaW4gdGVtcGVyYXR1cmUgYmV0d2VlbiB3YXJtZXN0IGFuZFxuICAgICAgICAvLyBjb2xkZXN0OiBmb3IgZXhhbXBsZSwgYXQgVDEwMCwgb25seSBvbmUgY29sb3IgaXMgYXZhaWxhYmxlLCB3aGl0ZS5cbiAgICAgICAgaWYgKHJhbmdlID09PSAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiAwLjU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2VGcm9tQ29sZGVzdCAvIHJhbmdlO1xuICAgIH1cbiAgICAvKiogUmVsYXRpdmUgdGVtcGVyYXR1cmUgb2YgdGhlIGlucHV0IGNvbG9yLiBTZWUgW3JlbGF0aXZlVGVtcGVyYXR1cmVdLiAqL1xuICAgIGdldCBpbnB1dFJlbGF0aXZlVGVtcGVyYXR1cmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlucHV0UmVsYXRpdmVUZW1wZXJhdHVyZUNhY2hlID49IDAuMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRSZWxhdGl2ZVRlbXBlcmF0dXJlQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnB1dFJlbGF0aXZlVGVtcGVyYXR1cmVDYWNoZSA9IHRoaXMucmVsYXRpdmVUZW1wZXJhdHVyZSh0aGlzLmlucHV0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRSZWxhdGl2ZVRlbXBlcmF0dXJlQ2FjaGU7XG4gICAgfVxuICAgIC8qKiBBIE1hcCB3aXRoIGtleXMgb2YgSENUcyBpbiBbaGN0c0J5VGVtcF0sIHZhbHVlcyBvZiByYXcgdGVtcGVyYXR1cmUuICovXG4gICAgZ2V0IHRlbXBzQnlIY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLnRlbXBzQnlIY3RDYWNoZS5zaXplID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGVtcHNCeUhjdENhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFsbEhjdHMgPSB0aGlzLmhjdHNCeUh1ZS5jb25jYXQoW3RoaXMuaW5wdXRdKTtcbiAgICAgICAgY29uc3QgdGVtcGVyYXR1cmVzQnlIY3QgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiBhbGxIY3RzKSB7XG4gICAgICAgICAgICB0ZW1wZXJhdHVyZXNCeUhjdC5zZXQoZSwgVGVtcGVyYXR1cmVDYWNoZS5yYXdUZW1wZXJhdHVyZShlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZW1wc0J5SGN0Q2FjaGUgPSB0ZW1wZXJhdHVyZXNCeUhjdDtcbiAgICAgICAgcmV0dXJuIHRlbXBlcmF0dXJlc0J5SGN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIQ1RzIGZvciBhbGwgaHVlcywgd2l0aCB0aGUgc2FtZSBjaHJvbWEvdG9uZSBhcyB0aGUgaW5wdXQuXG4gICAgICogU29ydGVkIGFzY2VuZGluZywgaHVlIDAgdG8gMzYwLlxuICAgICAqL1xuICAgIGdldCBoY3RzQnlIdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmhjdHNCeUh1ZUNhY2hlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhjdHNCeUh1ZUNhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhjdHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaHVlID0gMC4wOyBodWUgPD0gMzYwLjA7IGh1ZSArPSAxLjApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yQXRIdWUgPSBIY3QuZnJvbShodWUsIHRoaXMuaW5wdXQuY2hyb21hLCB0aGlzLmlucHV0LnRvbmUpO1xuICAgICAgICAgICAgaGN0cy5wdXNoKGNvbG9yQXRIdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGN0c0J5SHVlQ2FjaGUgPSBoY3RzO1xuICAgICAgICByZXR1cm4gdGhpcy5oY3RzQnlIdWVDYWNoZTtcbiAgICB9XG4gICAgLyoqIERldGVybWluZXMgaWYgYW4gYW5nbGUgaXMgYmV0d2VlbiB0d28gb3RoZXIgYW5nbGVzLCByb3RhdGluZyBjbG9ja3dpc2UuICovXG4gICAgc3RhdGljIGlzQmV0d2VlbihhbmdsZSwgYSwgYikge1xuICAgICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhIDw9IGFuZ2xlICYmIGFuZ2xlIDw9IGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEgPD0gYW5nbGUgfHwgYW5nbGUgPD0gYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsdWUgcmVwcmVzZW50aW5nIGNvb2wtd2FybSBmYWN0b3Igb2YgYSBjb2xvci5cbiAgICAgKiBWYWx1ZXMgYmVsb3cgMCBhcmUgY29uc2lkZXJlZCBjb29sLCBhYm92ZSwgd2FybS5cbiAgICAgKlxuICAgICAqIENvbG9yIHNjaWVuY2UgaGFzIHJlc2VhcmNoZWQgZW1vdGlvbiBhbmQgaGFybW9ueSwgd2hpY2ggYXJ0IHVzZXMgdG8gc2VsZWN0XG4gICAgICogY29sb3JzLiBXYXJtLWNvb2wgaXMgdGhlIGZvdW5kYXRpb24gb2YgYW5hbG9nb3VzIGFuZCBjb21wbGVtZW50YXJ5IGNvbG9ycy5cbiAgICAgKiBTZWU6XG4gICAgICogLSBMaS1DaGVuIE91J3MgQ2hhcHRlciAxOSBpbiBIYW5kYm9vayBvZiBDb2xvciBQc3ljaG9sb2d5ICgyMDE1KS5cbiAgICAgKiAtIEpvc2VmIEFsYmVycycgSW50ZXJhY3Rpb24gb2YgQ29sb3IgY2hhcHRlcnMgMTkgYW5kIDIxLlxuICAgICAqXG4gICAgICogSW1wbGVtZW50YXRpb24gb2YgT3UsIFdvb2Rjb2NrIGFuZCBXcmlnaHQncyBhbGdvcml0aG0sIHdoaWNoIHVzZXNcbiAgICAgKiBMKmEqYiogLyBMQ0ggY29sb3Igc3BhY2UuXG4gICAgICogUmV0dXJuIHZhbHVlIGhhcyB0aGVzZSBwcm9wZXJ0aWVzOlxuICAgICAqIC0gVmFsdWVzIGJlbG93IDAgYXJlIGNvb2wsIGFib3ZlIDAgYXJlIHdhcm0uXG4gICAgICogLSBMb3dlciBib3VuZDogLTAuNTIgLSAoY2hyb21hIF4gMS4wNyAvIDIwKS4gTCphKmIqIGNocm9tYSBpcyBpbmZpbml0ZS5cbiAgICAgKiAgIEFzc3VtaW5nIG1heCBvZiAxMzAgY2hyb21hLCAtOS42Ni5cbiAgICAgKiAtIFVwcGVyIGJvdW5kOiAtMC41MiArIChjaHJvbWEgXiAxLjA3IC8gMjApLiBMKmEqYiogY2hyb21hIGlzIGluZmluaXRlLlxuICAgICAqICAgQXNzdW1pbmcgbWF4IG9mIDEzMCBjaHJvbWEsIDguNjEuXG4gICAgICovXG4gICAgc3RhdGljIHJhd1RlbXBlcmF0dXJlKGNvbG9yKSB7XG4gICAgICAgIGNvbnN0IGxhYiA9IGNvbG9yVXRpbHMubGFiRnJvbUFyZ2IoY29sb3IudG9JbnQoKSk7XG4gICAgICAgIGNvbnN0IGh1ZSA9IG1hdGhVdGlscy5zYW5pdGl6ZURlZ3JlZXNEb3VibGUoTWF0aC5hdGFuMihsYWJbMl0sIGxhYlsxXSkgKiAxODAuMCAvIE1hdGguUEkpO1xuICAgICAgICBjb25zdCBjaHJvbWEgPSBNYXRoLnNxcnQoKGxhYlsxXSAqIGxhYlsxXSkgKyAobGFiWzJdICogbGFiWzJdKSk7XG4gICAgICAgIGNvbnN0IHRlbXBlcmF0dXJlID0gLTAuNSArXG4gICAgICAgICAgICAwLjAyICogTWF0aC5wb3coY2hyb21hLCAxLjA3KSAqXG4gICAgICAgICAgICAgICAgTWF0aC5jb3MobWF0aFV0aWxzLnNhbml0aXplRGVncmVlc0RvdWJsZShodWUgLSA1MC4wKSAqIE1hdGguUEkgLyAxODAuMCk7XG4gICAgICAgIHJldHVybiB0ZW1wZXJhdHVyZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wZXJhdHVyZV9jYWNoZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRGlzbGlrZUFuYWx5emVyIH0gZnJvbSAnLi4vZGlzbGlrZS9kaXNsaWtlX2FuYWx5emVyLmpzJztcbmltcG9ydCB7IFRvbmFsUGFsZXR0ZSB9IGZyb20gJy4uL3BhbGV0dGVzL3RvbmFsX3BhbGV0dGUuanMnO1xuaW1wb3J0IHsgVGVtcGVyYXR1cmVDYWNoZSB9IGZyb20gJy4uL3RlbXBlcmF0dXJlL3RlbXBlcmF0dXJlX2NhY2hlLmpzJztcbmltcG9ydCB7IER5bmFtaWNTY2hlbWUgfSBmcm9tICcuL2R5bmFtaWNfc2NoZW1lLmpzJztcbmltcG9ydCB7IFZhcmlhbnQgfSBmcm9tICcuL3ZhcmlhbnQuanMnO1xuLyoqXG4gKiBBIHNjaGVtZSB0aGF0IHBsYWNlcyB0aGUgc291cmNlIGNvbG9yIGluIGBTY2hlbWUucHJpbWFyeUNvbnRhaW5lcmAuXG4gKlxuICogUHJpbWFyeSBDb250YWluZXIgaXMgdGhlIHNvdXJjZSBjb2xvciwgYWRqdXN0ZWQgZm9yIGNvbG9yIHJlbGF0aXZpdHkuXG4gKiBJdCBtYWludGFpbnMgY29uc3RhbnQgYXBwZWFyYW5jZSBpbiBsaWdodCBtb2RlIGFuZCBkYXJrIG1vZGUuXG4gKiBUaGlzIGFkZHMgfjUgdG9uZSBpbiBsaWdodCBtb2RlLCBhbmQgc3VidHJhY3RzIH41IHRvbmUgaW4gZGFyayBtb2RlLlxuICogVGVydGlhcnkgQ29udGFpbmVyIGlzIHRoZSBjb21wbGVtZW50IHRvIHRoZSBzb3VyY2UgY29sb3IsIHVzaW5nXG4gKiBgVGVtcGVyYXR1cmVDYWNoZWAuIEl0IGFsc28gbWFpbnRhaW5zIGNvbnN0YW50IGFwcGVhcmFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlbWVDb250ZW50IGV4dGVuZHMgRHluYW1pY1NjaGVtZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlQ29sb3JIY3QsIGlzRGFyaywgY29udHJhc3RMZXZlbCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBzb3VyY2VDb2xvckFyZ2I6IHNvdXJjZUNvbG9ySGN0LnRvSW50KCksXG4gICAgICAgICAgICB2YXJpYW50OiBWYXJpYW50LkNPTlRFTlQsXG4gICAgICAgICAgICBjb250cmFzdExldmVsLFxuICAgICAgICAgICAgaXNEYXJrLFxuICAgICAgICAgICAgcHJpbWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgc291cmNlQ29sb3JIY3QuY2hyb21hKSxcbiAgICAgICAgICAgIHNlY29uZGFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgTWF0aC5tYXgoc291cmNlQ29sb3JIY3QuY2hyb21hIC0gMzIuMCwgc291cmNlQ29sb3JIY3QuY2hyb21hICogMC41KSksXG4gICAgICAgICAgICB0ZXJ0aWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSW50KERpc2xpa2VBbmFseXplclxuICAgICAgICAgICAgICAgIC5maXhJZkRpc2xpa2VkKG5ldyBUZW1wZXJhdHVyZUNhY2hlKHNvdXJjZUNvbG9ySGN0KS5hbmFsb2dvdXMoMywgNilbMl0pXG4gICAgICAgICAgICAgICAgLnRvSW50KCkpLFxuICAgICAgICAgICAgbmV1dHJhbFBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgc291cmNlQ29sb3JIY3QuY2hyb21hIC8gOC4wKSxcbiAgICAgICAgICAgIG5ldXRyYWxWYXJpYW50UGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCBzb3VyY2VDb2xvckhjdC5jaHJvbWEgLyA4LjAgKyA0LjApLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWVfY29udGVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVG9uYWxQYWxldHRlIH0gZnJvbSAnLi4vcGFsZXR0ZXMvdG9uYWxfcGFsZXR0ZS5qcyc7XG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4uL3V0aWxzL21hdGhfdXRpbHMuanMnO1xuaW1wb3J0IHsgRHluYW1pY1NjaGVtZSB9IGZyb20gJy4vZHluYW1pY19zY2hlbWUuanMnO1xuaW1wb3J0IHsgVmFyaWFudCB9IGZyb20gJy4vdmFyaWFudC5qcyc7XG4vKipcbiAqIEEgRHluYW1pYyBDb2xvciB0aGVtZSB0aGF0IGlzIGludGVudGlvbmFsbHkgZGV0YWNoZWQgZnJvbSB0aGUgc291cmNlIGNvbG9yLlxuICovXG5leHBvcnQgY2xhc3MgU2NoZW1lRXhwcmVzc2l2ZSBleHRlbmRzIER5bmFtaWNTY2hlbWUge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZUNvbG9ySGN0LCBpc0RhcmssIGNvbnRyYXN0TGV2ZWwpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgc291cmNlQ29sb3JBcmdiOiBzb3VyY2VDb2xvckhjdC50b0ludCgpLFxuICAgICAgICAgICAgdmFyaWFudDogVmFyaWFudC5FWFBSRVNTSVZFLFxuICAgICAgICAgICAgY29udHJhc3RMZXZlbCxcbiAgICAgICAgICAgIGlzRGFyayxcbiAgICAgICAgICAgIHByaW1hcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShtYXRoLnNhbml0aXplRGVncmVlc0RvdWJsZShzb3VyY2VDb2xvckhjdC5odWUgKyAyNDAuMCksIDQwLjApLFxuICAgICAgICAgICAgc2Vjb25kYXJ5UGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoRHluYW1pY1NjaGVtZS5nZXRSb3RhdGVkSHVlKHNvdXJjZUNvbG9ySGN0LCBTY2hlbWVFeHByZXNzaXZlLmh1ZXMsIFNjaGVtZUV4cHJlc3NpdmUuc2Vjb25kYXJ5Um90YXRpb25zKSwgMjQuMCksXG4gICAgICAgICAgICB0ZXJ0aWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKER5bmFtaWNTY2hlbWUuZ2V0Um90YXRlZEh1ZShzb3VyY2VDb2xvckhjdCwgU2NoZW1lRXhwcmVzc2l2ZS5odWVzLCBTY2hlbWVFeHByZXNzaXZlLnRlcnRpYXJ5Um90YXRpb25zKSwgMzIuMCksXG4gICAgICAgICAgICBuZXV0cmFsUGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlICsgMTUsIDguMCksXG4gICAgICAgICAgICBuZXV0cmFsVmFyaWFudFBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSArIDE1LCAxMi4wKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBIdWVzIChpbiBkZWdyZWVzKSB1c2VkIGF0IGJyZWFrcG9pbnRzIHN1Y2ggdGhhdCBkZXNpZ25lcnMgY2FuIHNwZWNpZnkgYVxuICogaHVlIHJvdGF0aW9uIHRoYXQgb2NjdXJzIGF0IGEgZ2l2ZW4gYnJlYWsgcG9pbnQuXG4gKi9cblNjaGVtZUV4cHJlc3NpdmUuaHVlcyA9IFtcbiAgICAwLjAsXG4gICAgMjEuMCxcbiAgICA1MS4wLFxuICAgIDEyMS4wLFxuICAgIDE1MS4wLFxuICAgIDE5MS4wLFxuICAgIDI3MS4wLFxuICAgIDMyMS4wLFxuICAgIDM2MC4wLFxuXTtcbi8qKlxuICogSHVlIHJvdGF0aW9ucyAoaW4gZGVncmVlcykgb2YgdGhlIFNlY29uZGFyeSBbVG9uYWxQYWxldHRlXSxcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGJyZWFrcG9pbnRzIGluIFtodWVzXS5cbiAqL1xuU2NoZW1lRXhwcmVzc2l2ZS5zZWNvbmRhcnlSb3RhdGlvbnMgPSBbXG4gICAgNDUuMCxcbiAgICA5NS4wLFxuICAgIDQ1LjAsXG4gICAgMjAuMCxcbiAgICA0NS4wLFxuICAgIDkwLjAsXG4gICAgNDUuMCxcbiAgICA0NS4wLFxuICAgIDQ1LjAsXG5dO1xuLyoqXG4gKiBIdWUgcm90YXRpb25zIChpbiBkZWdyZWVzKSBvZiB0aGUgVGVydGlhcnkgW1RvbmFsUGFsZXR0ZV0sXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBicmVha3BvaW50cyBpbiBbaHVlc10uXG4gKi9cblNjaGVtZUV4cHJlc3NpdmUudGVydGlhcnlSb3RhdGlvbnMgPSBbXG4gICAgMTIwLjAsXG4gICAgMTIwLjAsXG4gICAgMjAuMCxcbiAgICA0NS4wLFxuICAgIDIwLjAsXG4gICAgMTUuMCxcbiAgICAyMC4wLFxuICAgIDEyMC4wLFxuICAgIDEyMC4wLFxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtZV9leHByZXNzaXZlLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBEaXNsaWtlQW5hbHl6ZXIgfSBmcm9tICcuLi9kaXNsaWtlL2Rpc2xpa2VfYW5hbHl6ZXIuanMnO1xuaW1wb3J0IHsgVG9uYWxQYWxldHRlIH0gZnJvbSAnLi4vcGFsZXR0ZXMvdG9uYWxfcGFsZXR0ZS5qcyc7XG5pbXBvcnQgeyBUZW1wZXJhdHVyZUNhY2hlIH0gZnJvbSAnLi4vdGVtcGVyYXR1cmUvdGVtcGVyYXR1cmVfY2FjaGUuanMnO1xuaW1wb3J0IHsgRHluYW1pY1NjaGVtZSB9IGZyb20gJy4vZHluYW1pY19zY2hlbWUuanMnO1xuaW1wb3J0IHsgVmFyaWFudCB9IGZyb20gJy4vdmFyaWFudC5qcyc7XG4vKipcbiAqIEEgc2NoZW1lIHRoYXQgcGxhY2VzIHRoZSBzb3VyY2UgY29sb3IgaW4gYFNjaGVtZS5wcmltYXJ5Q29udGFpbmVyYC5cbiAqXG4gKiBQcmltYXJ5IENvbnRhaW5lciBpcyB0aGUgc291cmNlIGNvbG9yLCBhZGp1c3RlZCBmb3IgY29sb3IgcmVsYXRpdml0eS5cbiAqIEl0IG1haW50YWlucyBjb25zdGFudCBhcHBlYXJhbmNlIGluIGxpZ2h0IG1vZGUgYW5kIGRhcmsgbW9kZS5cbiAqIFRoaXMgYWRkcyB+NSB0b25lIGluIGxpZ2h0IG1vZGUsIGFuZCBzdWJ0cmFjdHMgfjUgdG9uZSBpbiBkYXJrIG1vZGUuXG4gKiBUZXJ0aWFyeSBDb250YWluZXIgaXMgdGhlIGNvbXBsZW1lbnQgdG8gdGhlIHNvdXJjZSBjb2xvciwgdXNpbmdcbiAqIGBUZW1wZXJhdHVyZUNhY2hlYC4gSXQgYWxzbyBtYWludGFpbnMgY29uc3RhbnQgYXBwZWFyYW5jZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNjaGVtZUZpZGVsaXR5IGV4dGVuZHMgRHluYW1pY1NjaGVtZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlQ29sb3JIY3QsIGlzRGFyaywgY29udHJhc3RMZXZlbCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBzb3VyY2VDb2xvckFyZ2I6IHNvdXJjZUNvbG9ySGN0LnRvSW50KCksXG4gICAgICAgICAgICB2YXJpYW50OiBWYXJpYW50LkZJREVMSVRZLFxuICAgICAgICAgICAgY29udHJhc3RMZXZlbCxcbiAgICAgICAgICAgIGlzRGFyayxcbiAgICAgICAgICAgIHByaW1hcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIHNvdXJjZUNvbG9ySGN0LmNocm9tYSksXG4gICAgICAgICAgICBzZWNvbmRhcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIE1hdGgubWF4KHNvdXJjZUNvbG9ySGN0LmNocm9tYSAtIDMyLjAsIHNvdXJjZUNvbG9ySGN0LmNocm9tYSAqIDAuNSkpLFxuICAgICAgICAgICAgdGVydGlhcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUludChEaXNsaWtlQW5hbHl6ZXJcbiAgICAgICAgICAgICAgICAuZml4SWZEaXNsaWtlZChuZXcgVGVtcGVyYXR1cmVDYWNoZShzb3VyY2VDb2xvckhjdCkuY29tcGxlbWVudClcbiAgICAgICAgICAgICAgICAudG9JbnQoKSksXG4gICAgICAgICAgICBuZXV0cmFsUGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCBzb3VyY2VDb2xvckhjdC5jaHJvbWEgLyA4LjApLFxuICAgICAgICAgICAgbmV1dHJhbFZhcmlhbnRQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIHNvdXJjZUNvbG9ySGN0LmNocm9tYSAvIDguMCArIDQuMCksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtZV9maWRlbGl0eS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVG9uYWxQYWxldHRlIH0gZnJvbSAnLi4vcGFsZXR0ZXMvdG9uYWxfcGFsZXR0ZS5qcyc7XG5pbXBvcnQgeyBEeW5hbWljU2NoZW1lIH0gZnJvbSAnLi9keW5hbWljX3NjaGVtZS5qcyc7XG5pbXBvcnQgeyBWYXJpYW50IH0gZnJvbSAnLi92YXJpYW50LmpzJztcbi8qKiBBIER5bmFtaWMgQ29sb3IgdGhlbWUgdGhhdCBpcyBncmF5c2NhbGUuICovXG5leHBvcnQgY2xhc3MgU2NoZW1lTW9ub2Nocm9tZSBleHRlbmRzIER5bmFtaWNTY2hlbWUge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZUNvbG9ySGN0LCBpc0RhcmssIGNvbnRyYXN0TGV2ZWwpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgc291cmNlQ29sb3JBcmdiOiBzb3VyY2VDb2xvckhjdC50b0ludCgpLFxuICAgICAgICAgICAgdmFyaWFudDogVmFyaWFudC5NT05PQ0hST01FLFxuICAgICAgICAgICAgY29udHJhc3RMZXZlbCxcbiAgICAgICAgICAgIGlzRGFyayxcbiAgICAgICAgICAgIHByaW1hcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDAuMCksXG4gICAgICAgICAgICBzZWNvbmRhcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDAuMCksXG4gICAgICAgICAgICB0ZXJ0aWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgMC4wKSxcbiAgICAgICAgICAgIG5ldXRyYWxQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDAuMCksXG4gICAgICAgICAgICBuZXV0cmFsVmFyaWFudFBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgMC4wKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1lX21vbm9jaHJvbWUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFRvbmFsUGFsZXR0ZSB9IGZyb20gJy4uL3BhbGV0dGVzL3RvbmFsX3BhbGV0dGUuanMnO1xuaW1wb3J0IHsgRHluYW1pY1NjaGVtZSB9IGZyb20gJy4vZHluYW1pY19zY2hlbWUuanMnO1xuaW1wb3J0IHsgVmFyaWFudCB9IGZyb20gJy4vdmFyaWFudC5qcyc7XG4vKiogQSBEeW5hbWljIENvbG9yIHRoZW1lIHRoYXQgaXMgbmVhciBncmF5c2NhbGUuICovXG5leHBvcnQgY2xhc3MgU2NoZW1lTmV1dHJhbCBleHRlbmRzIER5bmFtaWNTY2hlbWUge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZUNvbG9ySGN0LCBpc0RhcmssIGNvbnRyYXN0TGV2ZWwpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgc291cmNlQ29sb3JBcmdiOiBzb3VyY2VDb2xvckhjdC50b0ludCgpLFxuICAgICAgICAgICAgdmFyaWFudDogVmFyaWFudC5ORVVUUkFMLFxuICAgICAgICAgICAgY29udHJhc3RMZXZlbCxcbiAgICAgICAgICAgIGlzRGFyayxcbiAgICAgICAgICAgIHByaW1hcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDEyLjApLFxuICAgICAgICAgICAgc2Vjb25kYXJ5UGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCA4LjApLFxuICAgICAgICAgICAgdGVydGlhcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDE2LjApLFxuICAgICAgICAgICAgbmV1dHJhbFBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgMi4wKSxcbiAgICAgICAgICAgIG5ldXRyYWxWYXJpYW50UGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCAyLjApLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWVfbmV1dHJhbC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVG9uYWxQYWxldHRlIH0gZnJvbSAnLi4vcGFsZXR0ZXMvdG9uYWxfcGFsZXR0ZS5qcyc7XG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4uL3V0aWxzL21hdGhfdXRpbHMuanMnO1xuaW1wb3J0IHsgRHluYW1pY1NjaGVtZSB9IGZyb20gJy4vZHluYW1pY19zY2hlbWUuanMnO1xuaW1wb3J0IHsgVmFyaWFudCB9IGZyb20gJy4vdmFyaWFudC5qcyc7XG4vKipcbiAqIEEgRHluYW1pYyBDb2xvciB0aGVtZSB3aXRoIGxvdyB0byBtZWRpdW0gY29sb3JmdWxuZXNzIGFuZCBhIFRlcnRpYXJ5XG4gKiBUb25hbFBhbGV0dGUgd2l0aCBhIGh1ZSByZWxhdGVkIHRvIHRoZSBzb3VyY2UgY29sb3IuXG4gKlxuICogVGhlIGRlZmF1bHQgTWF0ZXJpYWwgWW91IHRoZW1lIG9uIEFuZHJvaWQgMTIgYW5kIDEzLlxuICovXG5leHBvcnQgY2xhc3MgU2NoZW1lVG9uYWxTcG90IGV4dGVuZHMgRHluYW1pY1NjaGVtZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlQ29sb3JIY3QsIGlzRGFyaywgY29udHJhc3RMZXZlbCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBzb3VyY2VDb2xvckFyZ2I6IHNvdXJjZUNvbG9ySGN0LnRvSW50KCksXG4gICAgICAgICAgICB2YXJpYW50OiBWYXJpYW50LlRPTkFMX1NQT1QsXG4gICAgICAgICAgICBjb250cmFzdExldmVsLFxuICAgICAgICAgICAgaXNEYXJrLFxuICAgICAgICAgICAgcHJpbWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgMzYuMCksXG4gICAgICAgICAgICBzZWNvbmRhcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDE2LjApLFxuICAgICAgICAgICAgdGVydGlhcnlQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShtYXRoLnNhbml0aXplRGVncmVlc0RvdWJsZShzb3VyY2VDb2xvckhjdC5odWUgKyA2MC4wKSwgMjQuMCksXG4gICAgICAgICAgICBuZXV0cmFsUGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCA2LjApLFxuICAgICAgICAgICAgbmV1dHJhbFZhcmlhbnRQYWxldHRlOiBUb25hbFBhbGV0dGUuZnJvbUh1ZUFuZENocm9tYShzb3VyY2VDb2xvckhjdC5odWUsIDguMCksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtZV90b25hbF9zcG90LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBUb25hbFBhbGV0dGUgfSBmcm9tICcuLi9wYWxldHRlcy90b25hbF9wYWxldHRlLmpzJztcbmltcG9ydCB7IER5bmFtaWNTY2hlbWUgfSBmcm9tICcuL2R5bmFtaWNfc2NoZW1lLmpzJztcbmltcG9ydCB7IFZhcmlhbnQgfSBmcm9tICcuL3ZhcmlhbnQuanMnO1xuLyoqXG4gKiBBIER5bmFtaWMgQ29sb3IgdGhlbWUgdGhhdCBtYXhlcyBvdXQgY29sb3JmdWxuZXNzIGF0IGVhY2ggcG9zaXRpb24gaW4gdGhlXG4gKiBQcmltYXJ5IFRvbmFsIFBhbGV0dGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlbWVWaWJyYW50IGV4dGVuZHMgRHluYW1pY1NjaGVtZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlQ29sb3JIY3QsIGlzRGFyaywgY29udHJhc3RMZXZlbCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBzb3VyY2VDb2xvckFyZ2I6IHNvdXJjZUNvbG9ySGN0LnRvSW50KCksXG4gICAgICAgICAgICB2YXJpYW50OiBWYXJpYW50LlZJQlJBTlQsXG4gICAgICAgICAgICBjb250cmFzdExldmVsLFxuICAgICAgICAgICAgaXNEYXJrLFxuICAgICAgICAgICAgcHJpbWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKHNvdXJjZUNvbG9ySGN0Lmh1ZSwgMjAwLjApLFxuICAgICAgICAgICAgc2Vjb25kYXJ5UGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoRHluYW1pY1NjaGVtZS5nZXRSb3RhdGVkSHVlKHNvdXJjZUNvbG9ySGN0LCBTY2hlbWVWaWJyYW50Lmh1ZXMsIFNjaGVtZVZpYnJhbnQuc2Vjb25kYXJ5Um90YXRpb25zKSwgMjQuMCksXG4gICAgICAgICAgICB0ZXJ0aWFyeVBhbGV0dGU6IFRvbmFsUGFsZXR0ZS5mcm9tSHVlQW5kQ2hyb21hKER5bmFtaWNTY2hlbWUuZ2V0Um90YXRlZEh1ZShzb3VyY2VDb2xvckhjdCwgU2NoZW1lVmlicmFudC5odWVzLCBTY2hlbWVWaWJyYW50LnRlcnRpYXJ5Um90YXRpb25zKSwgMzIuMCksXG4gICAgICAgICAgICBuZXV0cmFsUGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCAxMC4wKSxcbiAgICAgICAgICAgIG5ldXRyYWxWYXJpYW50UGFsZXR0ZTogVG9uYWxQYWxldHRlLmZyb21IdWVBbmRDaHJvbWEoc291cmNlQ29sb3JIY3QuaHVlLCAxMi4wKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBIdWVzIChpbiBkZWdyZWVzKSB1c2VkIGF0IGJyZWFrcG9pbnRzIHN1Y2ggdGhhdCBkZXNpZ25lcnMgY2FuIHNwZWNpZnkgYVxuICogaHVlIHJvdGF0aW9uIHRoYXQgb2NjdXJzIGF0IGEgZ2l2ZW4gYnJlYWsgcG9pbnQuXG4gKi9cblNjaGVtZVZpYnJhbnQuaHVlcyA9IFtcbiAgICAwLjAsXG4gICAgNDEuMCxcbiAgICA2MS4wLFxuICAgIDEwMS4wLFxuICAgIDEzMS4wLFxuICAgIDE4MS4wLFxuICAgIDI1MS4wLFxuICAgIDMwMS4wLFxuICAgIDM2MC4wLFxuXTtcbi8qKlxuICogSHVlIHJvdGF0aW9ucyAoaW4gZGVncmVlcykgb2YgdGhlIFNlY29uZGFyeSBbVG9uYWxQYWxldHRlXSxcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGJyZWFrcG9pbnRzIGluIFtodWVzXS5cbiAqL1xuU2NoZW1lVmlicmFudC5zZWNvbmRhcnlSb3RhdGlvbnMgPSBbXG4gICAgMTguMCxcbiAgICAxNS4wLFxuICAgIDEwLjAsXG4gICAgMTIuMCxcbiAgICAxNS4wLFxuICAgIDE4LjAsXG4gICAgMTUuMCxcbiAgICAxMi4wLFxuICAgIDEyLjAsXG5dO1xuLyoqXG4gKiBIdWUgcm90YXRpb25zIChpbiBkZWdyZWVzKSBvZiB0aGUgVGVydGlhcnkgW1RvbmFsUGFsZXR0ZV0sXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBicmVha3BvaW50cyBpbiBbaHVlc10uXG4gKi9cblNjaGVtZVZpYnJhbnQudGVydGlhcnlSb3RhdGlvbnMgPSBbXG4gICAgMzUuMCxcbiAgICAzMC4wLFxuICAgIDIwLjAsXG4gICAgMjUuMCxcbiAgICAzMC4wLFxuICAgIDM1LjAsXG4gICAgMzAuMCxcbiAgICAyNS4wLFxuICAgIDI1LjAsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1lX3ZpYnJhbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEhjdCB9IGZyb20gJy4uL2hjdC9oY3QuanMnO1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuLi91dGlscy9tYXRoX3V0aWxzLmpzJztcbmNvbnN0IFNDT1JFX09QVElPTl9ERUZBVUxUUyA9IHtcbiAgICBkZXNpcmVkOiA0LFxuICAgIGZhbGxiYWNrQ29sb3JBUkdCOiAweGZmNDI4NWY0LFxuICAgIGZpbHRlcjogdHJ1ZSwgLy8gQXZvaWQgdW5zdWl0YWJsZSBjb2xvcnMuXG59O1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgaWYgKGEuc2NvcmUgPiBiLnNjb3JlKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYS5zY29yZSA8IGIuc2NvcmUpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuLyoqXG4gKiAgR2l2ZW4gYSBsYXJnZSBzZXQgb2YgY29sb3JzLCByZW1vdmUgY29sb3JzIHRoYXQgYXJlIHVuc3VpdGFibGUgZm9yIGEgVUlcbiAqICB0aGVtZSwgYW5kIHJhbmsgdGhlIHJlc3QgYmFzZWQgb24gc3VpdGFiaWxpdHkuXG4gKlxuICogIEVuYWJsZXMgdXNlIG9mIGEgaGlnaCBjbHVzdGVyIGNvdW50IGZvciBpbWFnZSBxdWFudGl6YXRpb24sIHRodXMgZW5zdXJpbmdcbiAqICBjb2xvcnMgYXJlbid0IG11ZGRpZWQsIHdoaWxlIGN1cmF0aW5nIHRoZSBoaWdoIGNsdXN0ZXIgY291bnQgdG8gYSBtdWNoXG4gKiAgc21hbGxlciBudW1iZXIgb2YgYXBwcm9wcmlhdGUgY2hvaWNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNjb3JlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbWFwIHdpdGgga2V5cyBvZiBjb2xvcnMgYW5kIHZhbHVlcyBvZiBob3cgb2Z0ZW4gdGhlIGNvbG9yIGFwcGVhcnMsXG4gICAgICogcmFuayB0aGUgY29sb3JzIGJhc2VkIG9uIHN1aXRhYmlsaXR5IGZvciBiZWluZyB1c2VkIGZvciBhIFVJIHRoZW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbG9yc1RvUG9wdWxhdGlvbiBtYXAgd2l0aCBrZXlzIG9mIGNvbG9ycyBhbmQgdmFsdWVzIG9mIGhvdyBvZnRlblxuICAgICAqICAgICB0aGUgY29sb3IgYXBwZWFycywgdXN1YWxseSBmcm9tIGEgc291cmNlIGltYWdlLlxuICAgICAqIEBwYXJhbSB7U2NvcmVPcHRpb25zfSBvcHRpb25zIG9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAgICogQHJldHVybiBDb2xvcnMgc29ydGVkIGJ5IHN1aXRhYmlsaXR5IGZvciBhIFVJIHRoZW1lLiBUaGUgbW9zdCBzdWl0YWJsZVxuICAgICAqICAgICBjb2xvciBpcyB0aGUgZmlyc3QgaXRlbSwgdGhlIGxlYXN0IHN1aXRhYmxlIGlzIHRoZSBsYXN0LiBUaGVyZSB3aWxsXG4gICAgICogICAgIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgY29sb3IgcmV0dXJuZWQuIElmIGFsbCB0aGUgaW5wdXQgY29sb3JzXG4gICAgICogICAgIHdlcmUgbm90IHN1aXRhYmxlIGZvciBhIHRoZW1lLCBhIGRlZmF1bHQgZmFsbGJhY2sgY29sb3Igd2lsbCBiZVxuICAgICAqICAgICBwcm92aWRlZCwgR29vZ2xlIEJsdWUuXG4gICAgICovXG4gICAgc3RhdGljIHNjb3JlKGNvbG9yc1RvUG9wdWxhdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGRlc2lyZWQsIGZhbGxiYWNrQ29sb3JBUkdCLCBmaWx0ZXIgfSA9IHsgLi4uU0NPUkVfT1BUSU9OX0RFRkFVTFRTLCAuLi5vcHRpb25zIH07XG4gICAgICAgIC8vIEdldCB0aGUgSENUIGNvbG9yIGZvciBlYWNoIEFyZ2IgdmFsdWUsIHdoaWxlIGZpbmRpbmcgdGhlIHBlciBodWUgY291bnQgYW5kXG4gICAgICAgIC8vIHRvdGFsIGNvdW50LlxuICAgICAgICBjb25zdCBjb2xvcnNIY3QgPSBbXTtcbiAgICAgICAgY29uc3QgaHVlUG9wdWxhdGlvbiA9IG5ldyBBcnJheSgzNjApLmZpbGwoMCk7XG4gICAgICAgIGxldCBwb3B1bGF0aW9uU3VtID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBbYXJnYiwgcG9wdWxhdGlvbl0gb2YgY29sb3JzVG9Qb3B1bGF0aW9uLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc3QgaGN0ID0gSGN0LmZyb21JbnQoYXJnYik7XG4gICAgICAgICAgICBjb2xvcnNIY3QucHVzaChoY3QpO1xuICAgICAgICAgICAgY29uc3QgaHVlID0gTWF0aC5mbG9vcihoY3QuaHVlKTtcbiAgICAgICAgICAgIGh1ZVBvcHVsYXRpb25baHVlXSArPSBwb3B1bGF0aW9uO1xuICAgICAgICAgICAgcG9wdWxhdGlvblN1bSArPSBwb3B1bGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIC8vIEh1ZXMgd2l0aCBtb3JlIHVzYWdlIGluIG5laWdoYm9yaW5nIDMwIGRlZ3JlZSBzbGljZSBnZXQgYSBsYXJnZXIgbnVtYmVyLlxuICAgICAgICBjb25zdCBodWVFeGNpdGVkUHJvcG9ydGlvbnMgPSBuZXcgQXJyYXkoMzYwKS5maWxsKDAuMCk7XG4gICAgICAgIGZvciAobGV0IGh1ZSA9IDA7IGh1ZSA8IDM2MDsgaHVlKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BvcnRpb24gPSBodWVQb3B1bGF0aW9uW2h1ZV0gLyBwb3B1bGF0aW9uU3VtO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGh1ZSAtIDE0OyBpIDwgaHVlICsgMTY7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ySHVlID0gbWF0aC5zYW5pdGl6ZURlZ3JlZXNJbnQoaSk7XG4gICAgICAgICAgICAgICAgaHVlRXhjaXRlZFByb3BvcnRpb25zW25laWdoYm9ySHVlXSArPSBwcm9wb3J0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNjb3JlcyBlYWNoIEhDVCBjb2xvciBiYXNlZCBvbiB1c2FnZSBhbmQgY2hyb21hLCB3aGlsZSBvcHRpb25hbGx5XG4gICAgICAgIC8vIGZpbHRlcmluZyBvdXQgdmFsdWVzIHRoYXQgZG8gbm90IGhhdmUgZW5vdWdoIGNocm9tYSBvciB1c2FnZS5cbiAgICAgICAgY29uc3Qgc2NvcmVkSGN0ID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvciAoY29uc3QgaGN0IG9mIGNvbG9yc0hjdCkge1xuICAgICAgICAgICAgY29uc3QgaHVlID0gbWF0aC5zYW5pdGl6ZURlZ3JlZXNJbnQoTWF0aC5yb3VuZChoY3QuaHVlKSk7XG4gICAgICAgICAgICBjb25zdCBwcm9wb3J0aW9uID0gaHVlRXhjaXRlZFByb3BvcnRpb25zW2h1ZV07XG4gICAgICAgICAgICBpZiAoZmlsdGVyICYmIChoY3QuY2hyb21hIDwgU2NvcmUuQ1VUT0ZGX0NIUk9NQSB8fCBwcm9wb3J0aW9uIDw9IFNjb3JlLkNVVE9GRl9FWENJVEVEX1BST1BPUlRJT04pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wb3J0aW9uU2NvcmUgPSBwcm9wb3J0aW9uICogMTAwLjAgKiBTY29yZS5XRUlHSFRfUFJPUE9SVElPTjtcbiAgICAgICAgICAgIGNvbnN0IGNocm9tYVdlaWdodCA9IGhjdC5jaHJvbWEgPCBTY29yZS5UQVJHRVRfQ0hST01BID8gU2NvcmUuV0VJR0hUX0NIUk9NQV9CRUxPVyA6IFNjb3JlLldFSUdIVF9DSFJPTUFfQUJPVkU7XG4gICAgICAgICAgICBjb25zdCBjaHJvbWFTY29yZSA9IChoY3QuY2hyb21hIC0gU2NvcmUuVEFSR0VUX0NIUk9NQSkgKiBjaHJvbWFXZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBzY29yZSA9IHByb3BvcnRpb25TY29yZSArIGNocm9tYVNjb3JlO1xuICAgICAgICAgICAgc2NvcmVkSGN0LnB1c2goeyBoY3QsIHNjb3JlIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRlZCBzbyB0aGF0IGNvbG9ycyB3aXRoIGhpZ2hlciBzY29yZXMgY29tZSBmaXJzdC5cbiAgICAgICAgc2NvcmVkSGN0LnNvcnQoY29tcGFyZSk7XG4gICAgICAgIC8vIEl0ZXJhdGVzIHRocm91Z2ggcG90ZW50aWFsIGh1ZSBkaWZmZXJlbmNlcyBpbiBkZWdyZWVzIGluIG9yZGVyIHRvIHNlbGVjdFxuICAgICAgICAvLyB0aGUgY29sb3JzIHdpdGggdGhlIGxhcmdlc3QgZGlzdHJpYnV0aW9uIG9mIGh1ZXMgcG9zc2libGUuIFN0YXJ0aW5nIGF0XG4gICAgICAgIC8vIDkwIGRlZ3JlZXMobWF4aW11bSBkaWZmZXJlbmNlIGZvciA0IGNvbG9ycykgdGhlbiBkZWNyZWFzaW5nIGRvd24gdG8gYVxuICAgICAgICAvLyAxNSBkZWdyZWUgbWluaW11bS5cbiAgICAgICAgY29uc3QgY2hvc2VuQ29sb3JzID0gW107XG4gICAgICAgIGZvciAobGV0IGRpZmZlcmVuY2VEZWdyZWVzID0gOTA7IGRpZmZlcmVuY2VEZWdyZWVzID49IDE1OyBkaWZmZXJlbmNlRGVncmVlcy0tKSB7XG4gICAgICAgICAgICBjaG9zZW5Db2xvcnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBoY3QgfSBvZiBzY29yZWRIY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkdXBsaWNhdGVIdWUgPSBjaG9zZW5Db2xvcnMuZmluZChjaG9zZW5IY3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0aC5kaWZmZXJlbmNlRGVncmVlcyhoY3QuaHVlLCBjaG9zZW5IY3QuaHVlKSA8IGRpZmZlcmVuY2VEZWdyZWVzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghZHVwbGljYXRlSHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNob3NlbkNvbG9ycy5wdXNoKGhjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaG9zZW5Db2xvcnMubGVuZ3RoID49IGRlc2lyZWQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNob3NlbkNvbG9ycy5sZW5ndGggPj0gZGVzaXJlZClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xvcnMgPSBbXTtcbiAgICAgICAgaWYgKGNob3NlbkNvbG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbG9ycy5wdXNoKGZhbGxiYWNrQ29sb3JBUkdCKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGNob3NlbkhjdCBvZiBjaG9zZW5Db2xvcnMpIHtcbiAgICAgICAgICAgIGNvbG9ycy5wdXNoKGNob3NlbkhjdC50b0ludCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgIH1cbn1cblNjb3JlLlRBUkdFVF9DSFJPTUEgPSA0OC4wOyAvLyBBMSBDaHJvbWFcblNjb3JlLldFSUdIVF9QUk9QT1JUSU9OID0gMC43O1xuU2NvcmUuV0VJR0hUX0NIUk9NQV9BQk9WRSA9IDAuMztcblNjb3JlLldFSUdIVF9DSFJPTUFfQkVMT1cgPSAwLjE7XG5TY29yZS5DVVRPRkZfQ0hST01BID0gNS4wO1xuU2NvcmUuQ1VUT0ZGX0VYQ0lURURfUFJPUE9SVElPTiA9IDAuMDE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29yZS5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0ICogYXMgY29sb3JVdGlscyBmcm9tICcuL2NvbG9yX3V0aWxzLmpzJztcbi8qKlxuICogVXRpbGl0eSBtZXRob2RzIGZvciBoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbnMgb2YgY29sb3JzLlxuICovXG4vKipcbiAqIEBwYXJhbSBhcmdiIEFSR0IgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xvci5cbiAqIEByZXR1cm4gSGV4IHN0cmluZyByZXByZXNlbnRpbmcgY29sb3IsIGV4LiAjZmYwMDAwIGZvciByZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhGcm9tQXJnYihhcmdiKSB7XG4gICAgY29uc3QgciA9IGNvbG9yVXRpbHMucmVkRnJvbUFyZ2IoYXJnYik7XG4gICAgY29uc3QgZyA9IGNvbG9yVXRpbHMuZ3JlZW5Gcm9tQXJnYihhcmdiKTtcbiAgICBjb25zdCBiID0gY29sb3JVdGlscy5ibHVlRnJvbUFyZ2IoYXJnYik7XG4gICAgY29uc3Qgb3V0UGFydHMgPSBbci50b1N0cmluZygxNiksIGcudG9TdHJpbmcoMTYpLCBiLnRvU3RyaW5nKDE2KV07XG4gICAgLy8gUGFkIHNpbmdsZS1kaWdpdCBvdXRwdXQgdmFsdWVzXG4gICAgZm9yIChjb25zdCBbaSwgcGFydF0gb2Ygb3V0UGFydHMuZW50cmllcygpKSB7XG4gICAgICAgIGlmIChwYXJ0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb3V0UGFydHNbaV0gPSAnMCcgKyBwYXJ0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnIycgKyBvdXRQYXJ0cy5qb2luKCcnKTtcbn1cbi8qKlxuICogQHBhcmFtIGhleCBTdHJpbmcgcmVwcmVzZW50aW5nIGNvbG9yIGFzIGhleCBjb2RlLiBBY2NlcHRzIHN0cmluZ3Mgd2l0aCBvclxuICogICAgIHdpdGhvdXQgbGVhZGluZyAjLCBhbmQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29sb3IgdXNpbmcgMywgNiwgb3IgOFxuICogICAgIGhleCBjaGFyYWN0ZXJzLlxuICogQHJldHVybiBBUkdCIHJlcHJlc2VudGF0aW9uIG9mIGNvbG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJnYkZyb21IZXgoaGV4KSB7XG4gICAgaGV4ID0gaGV4LnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgY29uc3QgaXNUaHJlZSA9IGhleC5sZW5ndGggPT09IDM7XG4gICAgY29uc3QgaXNTaXggPSBoZXgubGVuZ3RoID09PSA2O1xuICAgIGNvbnN0IGlzRWlnaHQgPSBoZXgubGVuZ3RoID09PSA4O1xuICAgIGlmICghaXNUaHJlZSAmJiAhaXNTaXggJiYgIWlzRWlnaHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIGhleCAnICsgaGV4KTtcbiAgICB9XG4gICAgbGV0IHIgPSAwO1xuICAgIGxldCBnID0gMDtcbiAgICBsZXQgYiA9IDA7XG4gICAgaWYgKGlzVGhyZWUpIHtcbiAgICAgICAgciA9IHBhcnNlSW50SGV4KGhleC5zbGljZSgwLCAxKS5yZXBlYXQoMikpO1xuICAgICAgICBnID0gcGFyc2VJbnRIZXgoaGV4LnNsaWNlKDEsIDIpLnJlcGVhdCgyKSk7XG4gICAgICAgIGIgPSBwYXJzZUludEhleChoZXguc2xpY2UoMiwgMykucmVwZWF0KDIpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTaXgpIHtcbiAgICAgICAgciA9IHBhcnNlSW50SGV4KGhleC5zbGljZSgwLCAyKSk7XG4gICAgICAgIGcgPSBwYXJzZUludEhleChoZXguc2xpY2UoMiwgNCkpO1xuICAgICAgICBiID0gcGFyc2VJbnRIZXgoaGV4LnNsaWNlKDQsIDYpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNFaWdodCkge1xuICAgICAgICByID0gcGFyc2VJbnRIZXgoaGV4LnNsaWNlKDIsIDQpKTtcbiAgICAgICAgZyA9IHBhcnNlSW50SGV4KGhleC5zbGljZSg0LCA2KSk7XG4gICAgICAgIGIgPSBwYXJzZUludEhleChoZXguc2xpY2UoNiwgOCkpO1xuICAgIH1cbiAgICByZXR1cm4gKCgoMjU1IDw8IDI0KSB8ICgociAmIDB4MGZmKSA8PCAxNikgfCAoKGcgJiAweDBmZikgPDwgOCkgfCAoYiAmIDB4MGZmKSkgPj4+XG4gICAgICAgIDApO1xufVxuZnVuY3Rpb24gcGFyc2VJbnRIZXgodmFsdWUpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuXG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxNik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdfdXRpbHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFF1YW50aXplckNlbGViaSB9IGZyb20gJy4uL3F1YW50aXplL3F1YW50aXplcl9jZWxlYmkuanMnO1xuaW1wb3J0IHsgU2NvcmUgfSBmcm9tICcuLi9zY29yZS9zY29yZS5qcyc7XG5pbXBvcnQgeyBhcmdiRnJvbVJnYiB9IGZyb20gJy4vY29sb3JfdXRpbHMuanMnO1xuLyoqXG4gKiBHZXQgdGhlIHNvdXJjZSBjb2xvciBmcm9tIGFuIGltYWdlLlxuICpcbiAqIEBwYXJhbSBpbWFnZSBUaGUgaW1hZ2UgZWxlbWVudFxuICogQHJldHVybiBTb3VyY2UgY29sb3IgLSB0aGUgY29sb3IgbW9zdCBzdWl0YWJsZSBmb3IgY3JlYXRpbmcgYSBVSSB0aGVtZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc291cmNlQ29sb3JGcm9tSW1hZ2UoaW1hZ2UpIHtcbiAgICAvLyBDb252ZXJ0IEltYWdlIGRhdGEgdG8gUGl4ZWwgQXJyYXlcbiAgICBjb25zdCBpbWFnZUJ5dGVzID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBnZXQgY2FudmFzIGNvbnRleHQnKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICBsZXQgcmVjdCA9IFswLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0XTtcbiAgICAgICAgICAgIGNvbnN0IGFyZWEgPSBpbWFnZS5kYXRhc2V0WydhcmVhJ107XG4gICAgICAgICAgICBpZiAoYXJlYSAmJiAvXlxcZCsoXFxzKixcXHMqXFxkKyl7M30kLy50ZXN0KGFyZWEpKSB7XG4gICAgICAgICAgICAgICAgcmVjdCA9IGFyZWEuc3BsaXQoL1xccyosXFxzKi8pLm1hcChzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQocywgMTApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgW3N4LCBzeSwgc3csIHNoXSA9IHJlY3Q7XG4gICAgICAgICAgICByZXNvbHZlKGNvbnRleHQuZ2V0SW1hZ2VEYXRhKHN4LCBzeSwgc3csIHNoKS5kYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBDb252ZXJ0IEltYWdlIGRhdGEgdG8gUGl4ZWwgQXJyYXlcbiAgICBjb25zdCBwaXhlbHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlQnl0ZXMubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgY29uc3QgciA9IGltYWdlQnl0ZXNbaV07XG4gICAgICAgIGNvbnN0IGcgPSBpbWFnZUJ5dGVzW2kgKyAxXTtcbiAgICAgICAgY29uc3QgYiA9IGltYWdlQnl0ZXNbaSArIDJdO1xuICAgICAgICBjb25zdCBhID0gaW1hZ2VCeXRlc1tpICsgM107XG4gICAgICAgIGlmIChhIDwgMjU1KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcmdiID0gYXJnYkZyb21SZ2IociwgZywgYik7XG4gICAgICAgIHBpeGVscy5wdXNoKGFyZ2IpO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IFBpeGVscyB0byBNYXRlcmlhbCBDb2xvcnNcbiAgICBjb25zdCByZXN1bHQgPSBRdWFudGl6ZXJDZWxlYmkucXVhbnRpemUocGl4ZWxzLCAxMjgpO1xuICAgIGNvbnN0IHJhbmtlZCA9IFNjb3JlLnNjb3JlKHJlc3VsdCk7XG4gICAgY29uc3QgdG9wID0gcmFua2VkWzBdO1xuICAgIHJldHVybiB0b3A7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZV91dGlscy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQmxlbmQgfSBmcm9tICcuLi9ibGVuZC9ibGVuZC5qcyc7XG5pbXBvcnQgeyBDb3JlUGFsZXR0ZSB9IGZyb20gJy4uL3BhbGV0dGVzL2NvcmVfcGFsZXR0ZS5qcyc7XG5pbXBvcnQgeyBTY2hlbWUgfSBmcm9tICcuLi9zY2hlbWUvc2NoZW1lLmpzJztcbmltcG9ydCB7IHNvdXJjZUNvbG9yRnJvbUltYWdlIH0gZnJvbSAnLi9pbWFnZV91dGlscy5qcyc7XG5pbXBvcnQgeyBoZXhGcm9tQXJnYiB9IGZyb20gJy4vc3RyaW5nX3V0aWxzLmpzJztcbi8qKlxuICogR2VuZXJhdGUgYSB0aGVtZSBmcm9tIGEgc291cmNlIGNvbG9yXG4gKlxuICogQHBhcmFtIHNvdXJjZSBTb3VyY2UgY29sb3JcbiAqIEBwYXJhbSBjdXN0b21Db2xvcnMgQXJyYXkgb2YgY3VzdG9tIGNvbG9yc1xuICogQHJldHVybiBUaGVtZSBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRoZW1lRnJvbVNvdXJjZUNvbG9yKHNvdXJjZSwgY3VzdG9tQ29sb3JzID0gW10pIHtcbiAgICBjb25zdCBwYWxldHRlID0gQ29yZVBhbGV0dGUub2Yoc291cmNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2UsXG4gICAgICAgIHNjaGVtZXM6IHtcbiAgICAgICAgICAgIGxpZ2h0OiBTY2hlbWUubGlnaHQoc291cmNlKSxcbiAgICAgICAgICAgIGRhcms6IFNjaGVtZS5kYXJrKHNvdXJjZSksXG4gICAgICAgIH0sXG4gICAgICAgIHBhbGV0dGVzOiB7XG4gICAgICAgICAgICBwcmltYXJ5OiBwYWxldHRlLmExLFxuICAgICAgICAgICAgc2Vjb25kYXJ5OiBwYWxldHRlLmEyLFxuICAgICAgICAgICAgdGVydGlhcnk6IHBhbGV0dGUuYTMsXG4gICAgICAgICAgICBuZXV0cmFsOiBwYWxldHRlLm4xLFxuICAgICAgICAgICAgbmV1dHJhbFZhcmlhbnQ6IHBhbGV0dGUubjIsXG4gICAgICAgICAgICBlcnJvcjogcGFsZXR0ZS5lcnJvcixcbiAgICAgICAgfSxcbiAgICAgICAgY3VzdG9tQ29sb3JzOiBjdXN0b21Db2xvcnMubWFwKChjKSA9PiBjdXN0b21Db2xvcihzb3VyY2UsIGMpKSxcbiAgICB9O1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBhIHRoZW1lIGZyb20gYW4gaW1hZ2Ugc291cmNlXG4gKlxuICogQHBhcmFtIGltYWdlIEltYWdlIGVsZW1lbnRcbiAqIEBwYXJhbSBjdXN0b21Db2xvcnMgQXJyYXkgb2YgY3VzdG9tIGNvbG9yc1xuICogQHJldHVybiBUaGVtZSBvYmplY3RcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRoZW1lRnJvbUltYWdlKGltYWdlLCBjdXN0b21Db2xvcnMgPSBbXSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IHNvdXJjZUNvbG9yRnJvbUltYWdlKGltYWdlKTtcbiAgICByZXR1cm4gdGhlbWVGcm9tU291cmNlQ29sb3Ioc291cmNlLCBjdXN0b21Db2xvcnMpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBjdXN0b20gY29sb3IgZ3JvdXAgZnJvbSBzb3VyY2UgYW5kIHRhcmdldCBjb2xvclxuICpcbiAqIEBwYXJhbSBzb3VyY2UgU291cmNlIGNvbG9yXG4gKiBAcGFyYW0gY29sb3IgQ3VzdG9tIGNvbG9yXG4gKiBAcmV0dXJuIEN1c3RvbSBjb2xvciBncm91cFxuICpcbiAqIEBsaW5rIGh0dHBzOi8vbTMubWF0ZXJpYWwuaW8vc3R5bGVzL2NvbG9yL3RoZS1jb2xvci1zeXN0ZW0vY29sb3Itcm9sZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUNvbG9yKHNvdXJjZSwgY29sb3IpIHtcbiAgICBsZXQgdmFsdWUgPSBjb2xvci52YWx1ZTtcbiAgICBjb25zdCBmcm9tID0gdmFsdWU7XG4gICAgY29uc3QgdG8gPSBzb3VyY2U7XG4gICAgaWYgKGNvbG9yLmJsZW5kKSB7XG4gICAgICAgIHZhbHVlID0gQmxlbmQuaGFybW9uaXplKGZyb20sIHRvKTtcbiAgICB9XG4gICAgY29uc3QgcGFsZXR0ZSA9IENvcmVQYWxldHRlLm9mKHZhbHVlKTtcbiAgICBjb25zdCB0b25lcyA9IHBhbGV0dGUuYTE7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBsaWdodDoge1xuICAgICAgICAgICAgY29sb3I6IHRvbmVzLnRvbmUoNDApLFxuICAgICAgICAgICAgb25Db2xvcjogdG9uZXMudG9uZSgxMDApLFxuICAgICAgICAgICAgY29sb3JDb250YWluZXI6IHRvbmVzLnRvbmUoOTApLFxuICAgICAgICAgICAgb25Db2xvckNvbnRhaW5lcjogdG9uZXMudG9uZSgxMCksXG4gICAgICAgIH0sXG4gICAgICAgIGRhcms6IHtcbiAgICAgICAgICAgIGNvbG9yOiB0b25lcy50b25lKDgwKSxcbiAgICAgICAgICAgIG9uQ29sb3I6IHRvbmVzLnRvbmUoMjApLFxuICAgICAgICAgICAgY29sb3JDb250YWluZXI6IHRvbmVzLnRvbmUoMzApLFxuICAgICAgICAgICAgb25Db2xvckNvbnRhaW5lcjogdG9uZXMudG9uZSg5MCksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQXBwbHkgYSB0aGVtZSB0byBhbiBlbGVtZW50XG4gKlxuICogQHBhcmFtIHRoZW1lIFRoZW1lIG9iamVjdFxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlUaGVtZSh0aGVtZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHRhcmdldCA9IG9wdGlvbnM/LnRhcmdldCB8fCBkb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IGlzRGFyayA9IG9wdGlvbnM/LmRhcmsgPz8gZmFsc2U7XG4gICAgY29uc3Qgc2NoZW1lID0gaXNEYXJrID8gdGhlbWUuc2NoZW1lcy5kYXJrIDogdGhlbWUuc2NoZW1lcy5saWdodDtcbiAgICBzZXRTY2hlbWVQcm9wZXJ0aWVzKHRhcmdldCwgc2NoZW1lKTtcbiAgICBpZiAob3B0aW9ucz8uYnJpZ2h0bmVzc1N1ZmZpeCkge1xuICAgICAgICBzZXRTY2hlbWVQcm9wZXJ0aWVzKHRhcmdldCwgdGhlbWUuc2NoZW1lcy5kYXJrLCAnLWRhcmsnKTtcbiAgICAgICAgc2V0U2NoZW1lUHJvcGVydGllcyh0YXJnZXQsIHRoZW1lLnNjaGVtZXMubGlnaHQsICctbGlnaHQnKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnM/LnBhbGV0dGVUb25lcykge1xuICAgICAgICBjb25zdCB0b25lcyA9IG9wdGlvbnM/LnBhbGV0dGVUb25lcyA/PyBbXTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBwYWxldHRlXSBvZiBPYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlcykpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhbGV0dGVLZXkgPSBrZXkucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9uZSBvZiB0b25lcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYC0tbWQtcmVmLXBhbGV0dGUtJHtwYWxldHRlS2V5fS0ke3BhbGV0dGVLZXl9JHt0b25lfWA7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBoZXhGcm9tQXJnYihwYWxldHRlLnRvbmUodG9uZSkpO1xuICAgICAgICAgICAgICAgIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eSh0b2tlbiwgY29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0U2NoZW1lUHJvcGVydGllcyh0YXJnZXQsIHNjaGVtZSwgc3VmZml4ID0gJycpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzY2hlbWUudG9KU09OKCkpKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0ga2V5LnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gaGV4RnJvbUFyZ2IodmFsdWUpO1xuICAgICAgICB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkoYC0tbWQtc3lzLWNvbG9yLSR7dG9rZW59JHtzdWZmaXh9YCwgY29sb3IpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRoZW1lX3V0aWxzLmpzLm1hcCIsInZhciB3ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIEYgPSAobiwgciwgZSkgPT4gciBpbiBuID8gdyhuLCByLCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAsIHZhbHVlOiBlIH0pIDogbltyXSA9IGU7XG52YXIgdSA9IChuLCByLCBlKSA9PiAoRihuLCB0eXBlb2YgciAhPSBcInN5bWJvbFwiID8gciArIFwiXCIgOiByLCBlKSwgZSk7XG5pbXBvcnQgeyByZ2JhRnJvbUFyZ2IgYXMgbCwgaGV4RnJvbUFyZ2IgYXMgQywgSGN0IGFzIEgsIFRvbmFsUGFsZXR0ZSBhcyBvLCBTY2hlbWUgYXMgcCwgY3VzdG9tQ29sb3IgYXMgQSwgc291cmNlQ29sb3JGcm9tSW1hZ2UgYXMgUyB9IGZyb20gXCJAbWF0ZXJpYWwvbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzXCI7XG5jb25zdCBnID0gKG4sIHIsIGUgPSBcIlwiLCB0KSA9PiB7XG4gIGZvciAoY29uc3QgW2EsIGNdIG9mIE9iamVjdC5lbnRyaWVzKHIudG9KU09OKCkpKSB7XG4gICAgY29uc3QgZiA9IGEucmVwbGFjZUFsbCgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpLCBoID0gdCA9PT0gXCJyZ2JcIiA/IE9iamVjdC52YWx1ZXMobChjKSkuc2xpY2UoMCwgLTEpLmpvaW4oXCIgXCIpIDogQyhjKTtcbiAgICBuLnN0eWxlLnNldFByb3BlcnR5KGAtLW1kLXN5cy1jb2xvci0ke2Z9JHtlfWAsIGgpO1xuICB9XG59LCBUID0gKG4sIHIpID0+IHtcbiAgY29uc3QgZSA9IChyID09IG51bGwgPyB2b2lkIDAgOiByLnRhcmdldCkgfHwgZG9jdW1lbnQuYm9keSwgYSA9IChyID09IG51bGwgPyB2b2lkIDAgOiByLmRhcmspID8/ICExID8gbi5zY2hlbWVzLmRhcmsgOiBuLnNjaGVtZXMubGlnaHQ7XG4gIGlmIChyICE9IG51bGwgJiYgci5icmlnaHRuZXNzU3VmZml4ID8gKGcoZSwgbi5zY2hlbWVzLmRhcmssIFwiLWRhcmtcIiwgciA9PSBudWxsID8gdm9pZCAwIDogci5jb2xvckZvcm1hdCksIGcoZSwgbi5zY2hlbWVzLmxpZ2h0LCBcIi1saWdodFwiLCByID09IG51bGwgPyB2b2lkIDAgOiByLmNvbG9yRm9ybWF0KSkgOiBnKGUsIGEsIFwiXCIsIHIgPT0gbnVsbCA/IHZvaWQgMCA6IHIuY29sb3JGb3JtYXQpLCByICE9IG51bGwgJiYgci5wYWxldHRlVG9uZXMpIHtcbiAgICBjb25zdCBjID0gKHIgPT0gbnVsbCA/IHZvaWQgMCA6IHIucGFsZXR0ZVRvbmVzKSA/PyBbXTtcbiAgICBmb3IgKGNvbnN0IFtmLCBoXSBvZiBPYmplY3QuZW50cmllcyhuLnBhbGV0dGVzKSkge1xuICAgICAgY29uc3QgZCA9IGYucmVwbGFjZUFsbCgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChjb25zdCBtIG9mIGMpIHtcbiAgICAgICAgY29uc3QgeSA9IGAtLW1kLXJlZi1wYWxldHRlLSR7ZH0ke219YCwgayA9IChyID09IG51bGwgPyB2b2lkIDAgOiByLmNvbG9yRm9ybWF0KSA9PT0gXCJyZ2JcIiA/IE9iamVjdC52YWx1ZXMobChoLnRvbmUobSkpKS5zbGljZSgwLCAtMSkuam9pbihcIiBcIikgOiBDKGgudG9uZShtKSk7XG4gICAgICAgIGUuc3R5bGUuc2V0UHJvcGVydHkoeSwgayk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuY2xhc3MgcyB7XG4gIGNvbnN0cnVjdG9yKHIsIGUpIHtcbiAgICAvKiogcHJpbWFyeSAqL1xuICAgIHUodGhpcywgXCJhMVwiKTtcbiAgICAvKiogc2Vjb25kYXJ5ICovXG4gICAgdSh0aGlzLCBcImEyXCIpO1xuICAgIC8qKiB0ZXJ0aWFyeSAqL1xuICAgIHUodGhpcywgXCJhM1wiKTtcbiAgICAvKiogbmV1dHJhbCAqL1xuICAgIHUodGhpcywgXCJuMVwiKTtcbiAgICAvKiogbmV1dHJhbFZhcmlhbnQgKi9cbiAgICB1KHRoaXMsIFwibjJcIik7XG4gICAgLyoqIGVycm9yICovXG4gICAgdSh0aGlzLCBcImVycm9yXCIpO1xuICAgIGNvbnN0IHsgaHVlOiB0LCBjaHJvbWE6IGEgfSA9IEguZnJvbUludChyKTtcbiAgICBlID8gKHRoaXMuYTEgPSBvLmZyb21IdWVBbmRDaHJvbWEodCwgYSksIHRoaXMuYTIgPSBvLmZyb21IdWVBbmRDaHJvbWEodCwgYSAvIDMpLCB0aGlzLmEzID0gby5mcm9tSHVlQW5kQ2hyb21hKHQgKyA2MCwgYSAvIDIpLCB0aGlzLm4xID0gby5mcm9tSHVlQW5kQ2hyb21hKHQsIE1hdGgubWluKGEgLyAxMiwgNCkpLCB0aGlzLm4yID0gby5mcm9tSHVlQW5kQ2hyb21hKHQsIE1hdGgubWluKGEgLyA2LCA4KSkpIDogKHRoaXMuYTEgPSBvLmZyb21IdWVBbmRDaHJvbWEodCwgTWF0aC5tYXgoNDgsIGEpKSwgdGhpcy5hMiA9IG8uZnJvbUh1ZUFuZENocm9tYSh0LCAxNiksIHRoaXMuYTMgPSBvLmZyb21IdWVBbmRDaHJvbWEodCArIDYwLCAyNCksIHRoaXMubjEgPSBvLmZyb21IdWVBbmRDaHJvbWEodCwgNiksIHRoaXMubjIgPSBvLmZyb21IdWVBbmRDaHJvbWEodCwgOCkpLCB0aGlzLmVycm9yID0gby5mcm9tSHVlQW5kQ2hyb21hKDI1LCA4NCk7XG4gIH1cbiAgc3RhdGljIG9mKHIpIHtcbiAgICByZXR1cm4gbmV3IHMociwgITEpO1xuICB9XG4gIHN0YXRpYyBjb250ZW50T2Yocikge1xuICAgIHJldHVybiBuZXcgcyhyLCAhMCk7XG4gIH1cbiAgc3RhdGljIGZyb21Db2xvcnMocikge1xuICAgIHJldHVybiBzLmNyZWF0ZVBhbGV0dGVGcm9tQ29sb3JzKCExLCByKTtcbiAgfVxuICBzdGF0aWMgY29udGVudEZyb21Db2xvcnMocikge1xuICAgIHJldHVybiBzLmNyZWF0ZVBhbGV0dGVGcm9tQ29sb3JzKCEwLCByKTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlUGFsZXR0ZUZyb21Db2xvcnMociwgZSkge1xuICAgIGNvbnN0IHQgPSBuZXcgcyhlLnByaW1hcnksIHIpO1xuICAgIGlmIChlLnNlY29uZGFyeSkge1xuICAgICAgY29uc3QgYSA9IG5ldyBzKGUuc2Vjb25kYXJ5LCByKTtcbiAgICAgIHQuYTIgPSBhLmExO1xuICAgIH1cbiAgICBpZiAoZS50ZXJ0aWFyeSkge1xuICAgICAgY29uc3QgYSA9IG5ldyBzKGUudGVydGlhcnksIHIpO1xuICAgICAgdC5hMyA9IGEuYTE7XG4gICAgfVxuICAgIGlmIChlLmVycm9yKSB7XG4gICAgICBjb25zdCBhID0gbmV3IHMoZS5lcnJvciwgcik7XG4gICAgICB0LmVycm9yID0gYS5hMTtcbiAgICB9XG4gICAgaWYgKGUubmV1dHJhbCkge1xuICAgICAgY29uc3QgYSA9IG5ldyBzKGUubmV1dHJhbCwgcik7XG4gICAgICB0Lm4xID0gYS5uMTtcbiAgICB9XG4gICAgaWYgKGUubmV1dHJhbFZhcmlhbnQpIHtcbiAgICAgIGNvbnN0IGEgPSBuZXcgcyhlLm5ldXRyYWxWYXJpYW50LCByKTtcbiAgICAgIHQubjIgPSBhLm4yO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfVxufVxuY2xhc3MgaSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbnN0cnVjdG9yLCB1bmljb3JuL3ByZXZlbnQtYWJicmV2aWF0aW9uc1xuICBjb25zdHJ1Y3RvcihyKSB7XG4gICAgdGhpcy5wcm9wcyA9IHI7XG4gIH1cbiAgZ2V0IHByaW1hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucHJpbWFyeTtcbiAgfVxuICBnZXQgb25QcmltYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uUHJpbWFyeTtcbiAgfVxuICBnZXQgcHJpbWFyeUNvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5wcmltYXJ5Q29udGFpbmVyO1xuICB9XG4gIGdldCBvblByaW1hcnlDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMub25QcmltYXJ5Q29udGFpbmVyO1xuICB9XG4gIGdldCBzZWNvbmRhcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc2Vjb25kYXJ5O1xuICB9XG4gIGdldCBvblNlY29uZGFyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5vblNlY29uZGFyeTtcbiAgfVxuICBnZXQgc2Vjb25kYXJ5Q29udGFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnNlY29uZGFyeUNvbnRhaW5lcjtcbiAgfVxuICBnZXQgb25TZWNvbmRhcnlDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMub25TZWNvbmRhcnlDb250YWluZXI7XG4gIH1cbiAgZ2V0IHRlcnRpYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRlcnRpYXJ5O1xuICB9XG4gIGdldCBvblRlcnRpYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uVGVydGlhcnk7XG4gIH1cbiAgZ2V0IHRlcnRpYXJ5Q29udGFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRlcnRpYXJ5Q29udGFpbmVyO1xuICB9XG4gIGdldCBvblRlcnRpYXJ5Q29udGFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uVGVydGlhcnlDb250YWluZXI7XG4gIH1cbiAgZ2V0IGVycm9yKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmVycm9yO1xuICB9XG4gIGdldCBvbkVycm9yKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uRXJyb3I7XG4gIH1cbiAgZ2V0IGVycm9yQ29udGFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmVycm9yQ29udGFpbmVyO1xuICB9XG4gIGdldCBvbkVycm9yQ29udGFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uRXJyb3JDb250YWluZXI7XG4gIH1cbiAgZ2V0IGJhY2tncm91bmQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuYmFja2dyb3VuZDtcbiAgfVxuICBnZXQgb25CYWNrZ3JvdW5kKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm9uQmFja2dyb3VuZDtcbiAgfVxuICBnZXQgc3VyZmFjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlO1xuICB9XG4gIGdldCBvblN1cmZhY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMub25TdXJmYWNlO1xuICB9XG4gIGdldCBzdXJmYWNlVmFyaWFudCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlVmFyaWFudDtcbiAgfVxuICBnZXQgb25TdXJmYWNlVmFyaWFudCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5vblN1cmZhY2VWYXJpYW50O1xuICB9XG4gIGdldCBvdXRsaW5lKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm91dGxpbmU7XG4gIH1cbiAgZ2V0IG91dGxpbmVWYXJpYW50KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm91dGxpbmVWYXJpYW50O1xuICB9XG4gIGdldCBzaGFkb3coKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc2hhZG93O1xuICB9XG4gIGdldCBzY3JpbSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zY3JpbTtcbiAgfVxuICBnZXQgaW52ZXJzZVN1cmZhY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaW52ZXJzZVN1cmZhY2U7XG4gIH1cbiAgZ2V0IGludmVyc2VPblN1cmZhY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaW52ZXJzZU9uU3VyZmFjZTtcbiAgfVxuICBnZXQgaW52ZXJzZVByaW1hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaW52ZXJzZVByaW1hcnk7XG4gIH1cbiAgLyoqIGV4dHJhICovXG4gIGdldCBzdXJmYWNlQnJpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnN1cmZhY2VCcmlnaHQ7XG4gIH1cbiAgLyoqIGV4dHJhICovXG4gIGdldCBzdXJmYWNlQ29udGFpbmVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnN1cmZhY2VDb250YWluZXI7XG4gIH1cbiAgLyoqIGV4dHJhICovXG4gIGdldCBzdXJmYWNlQ29udGFpbmVySGlnaCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlQ29udGFpbmVySGlnaDtcbiAgfVxuICAvKiogZXh0cmEgKi9cbiAgZ2V0IHN1cmZhY2VDb250YWluZXJIaWdoZXN0KCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnN1cmZhY2VDb250YWluZXJIaWdoZXN0O1xuICB9XG4gIC8qKiBleHRyYSAqL1xuICBnZXQgc3VyZmFjZUNvbnRhaW5lckxvdygpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlQ29udGFpbmVyTG93O1xuICB9XG4gIC8qKiBleHRyYSAqL1xuICBnZXQgc3VyZmFjZUNvbnRhaW5lckxvd2VzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zdXJmYWNlQ29udGFpbmVyTG93ZXN0O1xuICB9XG4gIC8qKiBleHRyYSAqL1xuICBnZXQgc3VyZmFjZVRpbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc3VyZmFjZVRpbnQ7XG4gIH1cbiAgc3RhdGljIGxpZ2h0KHIpIHtcbiAgICByZXR1cm4gaS5saWdodEZyb21Db3JlUGFsZXR0ZShzLm9mKHIpKTtcbiAgfVxuICBzdGF0aWMgZGFyayhyKSB7XG4gICAgcmV0dXJuIGkuZGFya0Zyb21Db3JlUGFsZXR0ZShzLm9mKHIpKTtcbiAgfVxuICBzdGF0aWMgbGlnaHRDb250ZW50KHIpIHtcbiAgICByZXR1cm4gaS5saWdodEZyb21Db3JlUGFsZXR0ZShzLmNvbnRlbnRPZihyKSk7XG4gIH1cbiAgc3RhdGljIGRhcmtDb250ZW50KHIpIHtcbiAgICByZXR1cm4gaS5kYXJrRnJvbUNvcmVQYWxldHRlKHMuY29udGVudE9mKHIpKTtcbiAgfVxuICBzdGF0aWMgbGlnaHRGcm9tQ29yZVBhbGV0dGUocikge1xuICAgIHJldHVybiBuZXcgaSh7XG4gICAgICAuLi5wLmxpZ2h0RnJvbUNvcmVQYWxldHRlKHIpLnRvSlNPTigpLFxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZGVmYXVsdCBsaWdodCB0aGVtZSBzdXJmYWNlIHJvbGUgZnJvbSB0b25lIDk5IHRvIHRvbmUgOThcbiAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vbWF0ZXJpYWwuaW8vYmxvZy90b25lLWJhc2VkLXN1cmZhY2UtY29sb3ItbTN9XG4gICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL20zLm1hdGVyaWFsLmlvL3N0eWxlcy9jb2xvci90aGUtY29sb3Itc3lzdGVtL3Rva2Vuc31cbiAgICAgICAqL1xuICAgICAgYmFja2dyb3VuZDogci5uMS50b25lKDk4KSxcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGRlZmF1bHQgbGlnaHQgdGhlbWUgc3VyZmFjZSByb2xlIGZyb20gdG9uZSA5OSB0byB0b25lIDk4XG4gICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL21hdGVyaWFsLmlvL2Jsb2cvdG9uZS1iYXNlZC1zdXJmYWNlLWNvbG9yLW0zfVxuICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9tMy5tYXRlcmlhbC5pby9zdHlsZXMvY29sb3IvdGhlLWNvbG9yLXN5c3RlbS90b2tlbnN9XG4gICAgICAgKi9cbiAgICAgIHN1cmZhY2U6IHIubjEudG9uZSg5OCksXG4gICAgICBzdXJmYWNlQnJpZ2h0OiByLm4xLnRvbmUoOTgpLFxuICAgICAgc3VyZmFjZUNvbnRhaW5lcjogci5uMS50b25lKDk0KSxcbiAgICAgIHN1cmZhY2VDb250YWluZXJIaWdoOiByLm4xLnRvbmUoOTIpLFxuICAgICAgc3VyZmFjZUNvbnRhaW5lckhpZ2hlc3Q6IHIubjEudG9uZSg5MCksXG4gICAgICBzdXJmYWNlQ29udGFpbmVyTG93OiByLm4xLnRvbmUoOTYpLFxuICAgICAgc3VyZmFjZUNvbnRhaW5lckxvd2VzdDogci5uMS50b25lKDEwMCksXG4gICAgICBzdXJmYWNlRGltOiByLm4xLnRvbmUoODcpLFxuICAgICAgLyoqXG4gICAgICAgKiBFcXVhbCB0byBQcmltYXJ5XG4gICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL20zLm1hdGVyaWFsLmlvL3N0eWxlcy9jb2xvci90aGUtY29sb3Itc3lzdGVtL3Rva2Vuc31cbiAgICAgICAqL1xuICAgICAgc3VyZmFjZVRpbnQ6IHIuYTEudG9uZSg0MClcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgZGFya0Zyb21Db3JlUGFsZXR0ZShyKSB7XG4gICAgcmV0dXJuIG5ldyBpKHtcbiAgICAgIC4uLnAuZGFya0Zyb21Db3JlUGFsZXR0ZShyKS50b0pTT04oKSxcbiAgICAgIC8qKlxuICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWZvdW5kYXRpb24vbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzL2lzc3Vlcy82Mn1cbiAgICAgICAqL1xuICAgICAgb25FcnJvckNvbnRhaW5lcjogci5lcnJvci50b25lKDkwKSxcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHNvcnQta2V5cy1maXgvc29ydC1rZXlzLWZpeCAqL1xuICAgICAgLyoqXG4gICAgICAgKiBTdXJmYWNlIHJvbGVzIGluIGRhcmsgdGhlbWUgYXJlIHNsaWdodGx5IGRhcmtlbmVkXG4gICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL21hdGVyaWFsLmlvL2Jsb2cvdG9uZS1iYXNlZC1zdXJmYWNlLWNvbG9yLW0zfVxuICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9tMy5tYXRlcmlhbC5pby9zdHlsZXMvY29sb3IvdGhlLWNvbG9yLXN5c3RlbS90b2tlbnN9XG4gICAgICAgKi9cbiAgICAgIGJhY2tncm91bmQ6IHIubjEudG9uZSg2KSxcbiAgICAgIC8qIGVzbGludC1lbmFibGUgc29ydC1rZXlzLWZpeC9zb3J0LWtleXMtZml4ICovXG4gICAgICAvKipcbiAgICAgICAqIFN1cmZhY2Ugcm9sZXMgaW4gZGFyayB0aGVtZSBhcmUgc2xpZ2h0bHkgZGFya2VuZWRcbiAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vbWF0ZXJpYWwuaW8vYmxvZy90b25lLWJhc2VkLXN1cmZhY2UtY29sb3ItbTN9XG4gICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL20zLm1hdGVyaWFsLmlvL3N0eWxlcy9jb2xvci90aGUtY29sb3Itc3lzdGVtL3Rva2Vuc31cbiAgICAgICAqL1xuICAgICAgc3VyZmFjZTogci5uMS50b25lKDYpLFxuICAgICAgc3VyZmFjZUJyaWdodDogci5uMS50b25lKDI0KSxcbiAgICAgIHN1cmZhY2VDb250YWluZXI6IHIubjEudG9uZSgxMiksXG4gICAgICBzdXJmYWNlQ29udGFpbmVySGlnaDogci5uMS50b25lKDE3KSxcbiAgICAgIHN1cmZhY2VDb250YWluZXJIaWdoZXN0OiByLm4xLnRvbmUoMjIpLFxuICAgICAgc3VyZmFjZUNvbnRhaW5lckxvdzogci5uMS50b25lKDEwKSxcbiAgICAgIHN1cmZhY2VDb250YWluZXJMb3dlc3Q6IHIubjEudG9uZSg0KSxcbiAgICAgIHN1cmZhY2VEaW06IHIubjEudG9uZSg2KSxcbiAgICAgIC8qKlxuICAgICAgICogRXF1YWwgdG8gUHJpbWFyeVxuICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9tMy5tYXRlcmlhbC5pby9zdHlsZXMvY29sb3IvdGhlLWNvbG9yLXN5c3RlbS90b2tlbnN9XG4gICAgICAgKi9cbiAgICAgIHN1cmZhY2VUaW50OiByLmExLnRvbmUoODApXG4gICAgfSk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzO1xuICB9XG59XG5jb25zdCBiID0gKG4sIHIgPSBbXSkgPT4ge1xuICBjb25zdCBlID0gcy5vZihuKTtcbiAgcmV0dXJuIHtcbiAgICBjdXN0b21Db2xvcnM6IHIubWFwKCh0KSA9PiBBKG4sIHQpKSxcbiAgICBwYWxldHRlczoge1xuICAgICAgZXJyb3I6IGUuZXJyb3IsXG4gICAgICBuZXV0cmFsOiBlLm4xLFxuICAgICAgbmV1dHJhbFZhcmlhbnQ6IGUubjIsXG4gICAgICBwcmltYXJ5OiBlLmExLFxuICAgICAgc2Vjb25kYXJ5OiBlLmEyLFxuICAgICAgdGVydGlhcnk6IGUuYTNcbiAgICB9LFxuICAgIHNjaGVtZXM6IHtcbiAgICAgIGRhcms6IGkuZGFyayhuKSxcbiAgICAgIGxpZ2h0OiBpLmxpZ2h0KG4pXG4gICAgfSxcbiAgICBzb3VyY2U6IG5cbiAgfTtcbn0sIEwgPSBhc3luYyAobiwgciA9IFtdKSA9PiBhd2FpdCBTKG4pLnRoZW4oKGUpID0+IGIoZSwgcikpO1xuZXhwb3J0IHtcbiAgcyBhcyBDb3JlUGFsZXR0ZSxcbiAgaSBhcyBTY2hlbWUsXG4gIFQgYXMgYXBwbHlUaGVtZSxcbiAgTCBhcyB0aGVtZUZyb21JbWFnZSxcbiAgYiBhcyB0aGVtZUZyb21Tb3VyY2VDb2xvclxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX185OV9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTU2X18iLCJTdHlsZVNoZWV0Iiwib3B0aW9ucyIsIl90aGlzIiwiX2luc2VydFRhZyIsInRhZyIsImJlZm9yZSIsInRhZ3MiLCJsZW5ndGgiLCJpbnNlcnRpb25Qb2ludCIsIm5leHRTaWJsaW5nIiwicHJlcGVuZCIsImNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJwdXNoIiwiaXNTcGVlZHkiLCJ1bmRlZmluZWQiLCJzcGVlZHkiLCJjdHIiLCJub25jZSIsImtleSIsIl9wcm90byIsInByb3RvdHlwZSIsImh5ZHJhdGUiLCJub2RlcyIsImZvckVhY2giLCJpbnNlcnQiLCJydWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInNoZWV0IiwiaSIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJlIiwiZmx1c2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhYnMiLCJNYXRoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiT2JqZWN0IiwiYXNzaWduIiwidHJpbSIsInZhbHVlIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwicmVwbGFjZSIsImluZGV4b2YiLCJzZWFyY2giLCJpbmRleE9mIiwiaW5kZXgiLCJjaGFyQ29kZUF0IiwiYmVnaW4iLCJlbmQiLCJzbGljZSIsImFycmF5IiwibGluZSIsImNvbHVtbiIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsIm5vZGUiLCJwYXJlbnQiLCJ0eXBlIiwicHJvcHMiLCJjaGlsZHJlbiIsInJldHVybiIsInByZXYiLCJuZXh0IiwicGVlayIsImNhcmV0IiwidG9rZW4iLCJhbGxvYyIsImRlYWxsb2MiLCJkZWxpbWl0IiwiZGVsaW1pdGVyIiwid2hpdGVzcGFjZSIsImVzY2FwaW5nIiwiY291bnQiLCJjb21tZW50ZXIiLCJpZGVudGlmaWVyIiwiQ09NTUVOVCIsImNhbGxiYWNrIiwib3V0cHV0Iiwic3RyaW5naWZ5IiwiZWxlbWVudCIsImpvaW4iLCJtaWRkbGV3YXJlIiwiY29sbGVjdGlvbiIsImNvbXBpbGUiLCJwYXJzZSIsInJ1bGVzIiwicnVsZXNldHMiLCJwc2V1ZG8iLCJwb2ludHMiLCJkZWNsYXJhdGlvbnMiLCJvZmZzZXQiLCJhdHJ1bGUiLCJwcm9wZXJ0eSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0Iiwic2l6ZSIsImoiLCJrIiwieCIsInkiLCJ6IiwibWVtb2l6ZSIsImZuIiwiY2FjaGUiLCJjcmVhdGUiLCJhcmciLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJmaXhlZEVsZW1lbnRzIiwiV2Vha01hcCIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwiZ2V0Iiwic2V0IiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImhhc2giLCJpc0Jyb3dzZXIiLCJnZXRTZXJ2ZXJTdHlsaXNDYWNoZSIsImZ1bmMiLCJoYXMiLCJyZXQiLCJuYW1lIiwid2Vha01lbW9pemUiLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsIm1hcCIsImV4ZWMiLCJjcmVhdGVDYWNoZSIsInNzclN0eWxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJBcnJheSIsImNhbGwiLCJnZXRBdHRyaWJ1dGUiLCJoZWFkIiwiX2luc2VydCIsInN0eWxpc1BsdWdpbnMiLCJpbnNlcnRlZCIsIm5vZGVzVG9IeWRyYXRlIiwiYXR0cmliIiwic3BsaXQiLCJvbW5pcHJlc2VudFBsdWdpbnMiLCJjdXJyZW50U2hlZXQiLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJjb25jYXQiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsIl9maW5hbGl6aW5nUGx1Z2lucyIsIl9zZXJpYWxpemVyIiwic2VydmVyU3R5bGlzQ2FjaGUiLCJyZWdpc3RlcmVkIiwidW5pdGxlc3NLZXlzIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJtYXRjaCIsInAxIiwicDIiLCJjdXJzb3IiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsImFuaW0iLCJvYmoiLCJzdHJpbmciLCJpc0FycmF5IiwiX2tleSIsImludGVycG9sYXRlZCIsIl9pIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwicmVzdWx0IiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic2VyaWFsaXplU3R5bGVzIiwiYXJncyIsInN0cmluZ01vZGUiLCJzdHJpbmdzIiwicmF3IiwibGFzdEluZGV4IiwiaWRlbnRpZmllck5hbWUiLCJzdHIiLCJoIiwibGVuIiwidG9TdHJpbmciLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJpbnNlcnRXaXRob3V0U2NvcGluZyIsIm1lcmdlIiwiY3NzIiwiY2xhc3NuYW1lcyIsImNscyIsInRvQWRkIiwiX2NyZWF0ZUVtb3Rpb24iLCJfbGVuIiwiYXJndW1lbnRzIiwiaXNTdHJpbmdUYWciLCJyZWdpc3RlclN0eWxlcyIsInN0eWxlc0ZvclNTUiIsImN1cnJlbnQiLCJtYXliZVN0eWxlcyIsImluc2VydFN0eWxlcyIsImN4IiwiX2xlbjQiLCJfa2V5NCIsImluamVjdEdsb2JhbCIsIl9sZW4zIiwiX2tleTMiLCJrZXlmcmFtZXMiLCJfbGVuMiIsIl9rZXkyIiwiYW5pbWF0aW9uIiwiaWRzIiwiYmluZCIsImNyZWF0ZUVtb3Rpb24iLCJ0IiwiciIsIm4iLCJvIiwibCIsIm0iLCJjIiwiZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXBwbHkiLCJhIiwiZm9yd2FyZFJlZiIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJ1IiwiZiIsImNvbG9yIiwiaG9yaXpvbnRhbCIsInYiLCJiIiwidmVydGljYWwiLCJyb3RhdGUiLCJnIiwiTyIsInNwaW4iLCJ3Iiwic3R5bGUiLCJFIiwiUCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiUyIsIl8iLCJDaGlsZHJlbiIsImluU3RhY2siLCJjbG9uZUVsZW1lbnQiLCJ3aWR0aCIsIlQiLCJxIiwiRXJyb3IiLCJyZWYiLCJ2aWV3Qm94Iiwicm9sZSIsImlkIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJib29sIiwiYXJyYXlPZiIsImlzUmVxdWlyZWQiLCJvYmplY3QiLCJkZWZhdWx0UHJvcHMiLCJwYXRoIiwiaGVpZ2h0IiwiZmlsbCIsIk0iLCJDIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwiSSIsIk4iLCJSIiwiQiIsIlgiLCJZIiwiQSIsIl9fcmVzdCIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIkJ1dHRvbiIsImluZGV4XzEiLCJtYXRlcmlhbF9jb2xvcl91dGlsaXRpZXNfMSIsImNzc18xIiwicmVhY3RfMSIsInJlYWN0XzIiLCJzY2hlbWUiLCJ1c2VUaGVtZSIsImljb24iLCJidXR0b25Qcm9wcyIsImJhY2tncm91bmQiLCJoZXhGcm9tQXJnYiIsIm9uYmFja2dyb3VuZCIsIlN0YXRlTGF5ZXJTdHlsZSIsImRpc2FibGVkIiwicm91bmQiLCJwYWRTdGFydCIsInRleHRTdHlsZXNGb3JUeXBlIiwib3V0bGluZSIsIl9fY3JlYXRlQmluZGluZyIsImsyIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnRTdGFyIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwiTmF2aWdhdGlvbkJhciIsIk5hdmlnYXRpb25CYXJTZWdtZW50IiwiYWN0aXZhdGVkIiwidGFiSW5kZXgiLCJvbkNsaWNrIiwib25LZXlEb3duIiwic2Vjb25kYXJ5Q29udGFpbmVyIiwib25TdXJmYWNlIiwib25TdXJmYWNlVmFyaWFudCIsImluQWN0aXZlSWNvbiIsIlRleHQiLCJ0ZXh0QWxpZ24iLCJsYWJlbCIsImFjdGl2ZUluZGV4Iiwic2V0QWN0aXZlSW5kZXgiLCJ1c2VTdGF0ZSIsInNlZ21lbnRzIiwiaGFuZGxlU2VsZWN0ZWQiLCJuYXZpZ2F0aW9uYmFyUHJvcHMiLCJzdXJmYWNlQ29udGFpbmVyIiwic2VnbWVudCIsImluZGV4XzIiLCJfYSIsInNwYW5Qcm9wcyIsIkZyYWdtZW50IiwidHlwb2dyYXBoeVNldCIsImRpc3BsYXlMYXJnZSIsImZvbnRTaXplIiwibGV0dGVyU3BhY2luZyIsImRpc3BsYXlNZWRpdW0iLCJkaXNwbGF5U21hbGwiLCJoZWFkbGluZUxhcmdlIiwiaGVhZGxpbmVNZWRpdW0iLCJoZWFkbGluZVNtYWxsIiwidGl0bGVMYXJnZSIsInRpdGxlTWVkaXVtIiwidGl0bGVTbWFsbCIsImxhYmVsTGFyZ2UiLCJsYWJlbE1lZGl1bSIsImxhYmVsU21hbGwiLCJib2R5TGFyZ2UiLCJib2R5TWVkaXVtIiwiYm9keVNtYWxsIiwidGhpc1RleHRUeXBvZ3JhcGh5IiwiTGF5b3V0V2l0aE5hdmlnYXRpb25CYXIiLCJ1cGRhdGVTb3VyY2VDb2xvciIsInRvZ2dsZVRoZW1lIiwic2VsZWN0ZWQiLCJzZXRTZWxlY3RlZCIsImlzQ29tcGFjdCIsInNldElzQ29tcGFjdCIsInVzZUVmZmVjdCIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJhZGRFdmVudExpc3RlbmVyIiwibWF0Y2hlcyIsIm9uQmFja2dyb3VuZCIsIlRoZW1lUHJvdmlkZXIiLCJtY3VfZXh0cmFfMSIsImRlZmF1bHRWYWx1ZXMiLCJ0aGVtZSIsInNvdXJjZUNvbG9yIiwidGhlbWVGcm9tU291cmNlQ29sb3IiLCJhcmdiRnJvbUhleCIsInNjaGVtZXMiLCJuZXdDb2xvciIsIlRoZW1lQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJzZXRUaGVtZSIsInNldFNvdXJjZUNvbG9yIiwic2V0c2NoZW1lIiwiUHJvdmlkZXIiLCJ1dGhlbWUiLCJuZXdUaGVtZSIsImNvbnRleHQiLCJ1c2VDb250ZXh0Iiwic2lnbnVtIiwibnVtIiwibGVycCIsInN0YXJ0Iiwic3RvcCIsImFtb3VudCIsImNsYW1wSW50IiwibWluIiwibWF4IiwiaW5wdXQiLCJjbGFtcERvdWJsZSIsInNhbml0aXplRGVncmVlc0ludCIsImRlZ3JlZXMiLCJzYW5pdGl6ZURlZ3JlZXNEb3VibGUiLCJyb3RhdGlvbkRpcmVjdGlvbiIsImZyb20iLCJ0byIsIm1hdHJpeE11bHRpcGx5Iiwicm93IiwibWF0cml4IiwiU1JHQl9UT19YWVoiLCJYWVpfVE9fU1JHQiIsIldISVRFX1BPSU5UX0Q2NSIsImFyZ2JGcm9tUmdiIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYXJnYkZyb21MaW5yZ2IiLCJsaW5yZ2IiLCJkZWxpbmVhcml6ZWQiLCJhbHBoYUZyb21BcmdiIiwiYXJnYiIsInJlZEZyb21BcmdiIiwiZ3JlZW5Gcm9tQXJnYiIsImJsdWVGcm9tQXJnYiIsImlzT3BhcXVlIiwiYXJnYkZyb21YeXoiLCJsaW5lYXJSIiwibGluZWFyRyIsImxpbmVhckIiLCJ4eXpGcm9tQXJnYiIsImxpbmVhcml6ZWQiLCJhcmdiRnJvbUxhYiIsIndoaXRlUG9pbnQiLCJmeSIsImZ6IiwieE5vcm1hbGl6ZWQiLCJsYWJJbnZmIiwieU5vcm1hbGl6ZWQiLCJ6Tm9ybWFsaXplZCIsImxhYkZyb21BcmdiIiwiZngiLCJsYWJGIiwiYXJnYkZyb21Mc3RhciIsImxzdGFyIiwiY29tcG9uZW50IiwieUZyb21Mc3RhciIsImxzdGFyRnJvbUFyZ2IiLCJsc3RhckZyb21ZIiwicmdiQ29tcG9uZW50Iiwibm9ybWFsaXplZCIsInBvdyIsIndoaXRlUG9pbnRENjUiLCJyZ2JhRnJvbUFyZ2IiLCJhcmdiRnJvbVJnYmEiLCJyVmFsdWUiLCJjbGFtcENvbXBvbmVudCIsImdWYWx1ZSIsImJWYWx1ZSIsImZ0IiwiZnQzIiwiVmlld2luZ0NvbmRpdGlvbnMiLCJtYWtlIiwiYWRhcHRpbmdMdW1pbmFuY2UiLCJQSSIsImJhY2tncm91bmRMc3RhciIsInN1cnJvdW5kIiwiZGlzY291bnRpbmdJbGx1bWluYW50IiwieHl6IiwiclciLCJnVyIsImJXIiwiZXhwIiwibmMiLCJyZ2JEIiwiazQiLCJrNEYiLCJmbCIsImNicnQiLCJzcXJ0IiwibmJiIiwibmNiIiwicmdiQUZhY3RvcnMiLCJyZ2JBIiwiY29uc3RydWN0b3IiLCJhdyIsImZMUm9vdCIsIkRFRkFVTFQiLCJDYW0xNiIsImh1ZSIsImNocm9tYSIsImpzdGFyIiwiYXN0YXIiLCJic3RhciIsImRpc3RhbmNlIiwib3RoZXIiLCJkSiIsImRBIiwiZEIiLCJkRVByaW1lIiwiZnJvbUludCIsImZyb21JbnRJblZpZXdpbmdDb25kaXRpb25zIiwidmlld2luZ0NvbmRpdGlvbnMiLCJyZWRMIiwiZ3JlZW5MIiwiYmx1ZUwiLCJyQyIsImdDIiwiYkMiLCJyRCIsImdEIiwiYkQiLCJyQUYiLCJnQUYiLCJiQUYiLCJyQSIsImdBIiwiYkEiLCJhdGFuRGVncmVlcyIsImF0YW4yIiwiaHVlUmFkaWFucyIsImFjIiwiaHVlUHJpbWUiLCJjb3MiLCJhbHBoYSIsIm1zdGFyIiwibG9nIiwic2luIiwiZnJvbUpjaCIsImZyb21KY2hJblZpZXdpbmdDb25kaXRpb25zIiwiZnJvbVVjcyIsImZyb21VY3NJblZpZXdpbmdDb25kaXRpb25zIiwidG9JbnQiLCJ2aWV3ZWQiLCJoUmFkIiwiZUh1ZSIsImhTaW4iLCJoQ29zIiwiZ2FtbWEiLCJyQ0Jhc2UiLCJnQ0Jhc2UiLCJiQ0Jhc2UiLCJyRiIsImdGIiwiYkYiLCJmcm9tWHl6SW5WaWV3aW5nQ29uZGl0aW9ucyIsIkoiLCJRIiwieHl6SW5WaWV3aW5nQ29uZGl0aW9ucyIsIkhjdFNvbHZlciIsInNhbml0aXplUmFkaWFucyIsImFuZ2xlIiwidHJ1ZURlbGluZWFyaXplZCIsImNocm9tYXRpY0FkYXB0YXRpb24iLCJhZiIsImh1ZU9mIiwic2NhbGVkRGlzY291bnQiLCJTQ0FMRURfRElTQ09VTlRfRlJPTV9MSU5SR0IiLCJhcmVJbkN5Y2xpY09yZGVyIiwiaW50ZXJjZXB0Iiwic291cmNlIiwibWlkIiwidGFyZ2V0IiwibGVycFBvaW50Iiwic2V0Q29vcmRpbmF0ZSIsImNvb3JkaW5hdGUiLCJheGlzIiwiaXNCb3VuZGVkIiwibnRoVmVydGV4Iiwia1IiLCJZX0ZST01fTElOUkdCIiwia0ciLCJrQiIsImNvb3JkQSIsImNvb3JkQiIsImJpc2VjdFRvU2VnbWVudCIsInRhcmdldEh1ZSIsImxlZnQiLCJyaWdodCIsImxlZnRIdWUiLCJyaWdodEh1ZSIsImluaXRpYWxpemVkIiwidW5jdXQiLCJtaWRIdWUiLCJtaWRwb2ludCIsImNyaXRpY2FsUGxhbmVCZWxvdyIsImZsb29yIiwiY3JpdGljYWxQbGFuZUFib3ZlIiwiY2VpbCIsImJpc2VjdFRvTGltaXQiLCJsUGxhbmUiLCJyUGxhbmUiLCJtUGxhbmUiLCJtaWRQbGFuZUNvb3JkaW5hdGUiLCJDUklUSUNBTF9QTEFORVMiLCJpbnZlcnNlQ2hyb21hdGljQWRhcHRhdGlvbiIsImFkYXB0ZWQiLCJhZGFwdGVkQWJzIiwiYmFzZSIsImZpbmRSZXN1bHRCeUoiLCJ0SW5uZXJDb2VmZiIsIml0ZXJhdGlvblJvdW5kIiwiak5vcm1hbGl6ZWQiLCJMSU5SR0JfRlJPTV9TQ0FMRURfRElTQ09VTlQiLCJmbmoiLCJzb2x2ZVRvSW50IiwiaHVlRGVncmVlcyIsImV4YWN0QW5zd2VyIiwic29sdmVUb0NhbSIsIkhjdCIsInRvbmUiLCJpbnRlcm5hbEh1ZSIsIm5ld0h1ZSIsInNldEludGVybmFsU3RhdGUiLCJpbnRlcm5hbENocm9tYSIsImludGVybmFsVG9uZSIsIm5ld0Nocm9tYSIsIm5ld1RvbmUiLCJjYW0iLCJpblZpZXdpbmdDb25kaXRpb25zIiwidmMiLCJ2aWV3ZWRJblZjIiwicmVjYXN0SW5WYyIsIkJsZW5kIiwiaGFybW9uaXplIiwiZGVzaWduQ29sb3IiLCJmcm9tSGN0IiwidG9IY3QiLCJkaWZmZXJlbmNlRGVncmVlcyIsInJvdGF0aW9uRGVncmVlcyIsIm91dHB1dEh1ZSIsImhjdEh1ZSIsInVjcyIsImNhbTE2VWNzIiwidWNzQ2FtIiwiZnJvbUNhbSIsInRvQ2FtIiwiZnJvbUoiLCJmcm9tQSIsImZyb21CIiwiQ29udHJhc3QiLCJyYXRpb09mVG9uZXMiLCJ0b25lQSIsInRvbmVCIiwicmF0aW9PZllzIiwieTEiLCJ5MiIsImxpZ2h0ZXIiLCJyYXRpbyIsImRhcmtZIiwibGlnaHRZIiwicmVhbENvbnRyYXN0IiwiZGVsdGEiLCJyZXR1cm5WYWx1ZSIsImRhcmtlciIsImxpZ2h0ZXJVbnNhZmUiLCJsaWdodGVyU2FmZSIsImRhcmtlclVuc2FmZSIsImRhcmtlclNhZmUiLCJEaXNsaWtlQW5hbHl6ZXIiLCJpc0Rpc2xpa2VkIiwiaGN0IiwiaHVlUGFzc2VzIiwiY2hyb21hUGFzc2VzIiwidG9uZVBhc3NlcyIsImZpeElmRGlzbGlrZWQiLCJEeW5hbWljQ29sb3IiLCJmcm9tUGFsZXR0ZSIsInBhbGV0dGUiLCJpc0JhY2tncm91bmQiLCJzZWNvbmRCYWNrZ3JvdW5kIiwiY29udHJhc3RDdXJ2ZSIsInRvbmVEZWx0YVBhaXIiLCJoY3RDYWNoZSIsIk1hcCIsImdldEFyZ2IiLCJnZXRIY3QiLCJjYWNoZWRBbnN3ZXIiLCJnZXRUb25lIiwiYW5zd2VyIiwiY2xlYXIiLCJkZWNyZWFzaW5nQ29udHJhc3QiLCJjb250cmFzdExldmVsIiwicm9sZUEiLCJyb2xlQiIsInBvbGFyaXR5Iiwic3RheVRvZ2V0aGVyIiwiYmdUb25lIiwiYUlzTmVhcmVyIiwiaXNEYXJrIiwibmVhcmVyIiwiZmFydGhlciIsImFtTmVhcmVyIiwiZXhwYW5zaW9uRGlyIiwibkNvbnRyYXN0IiwiZ2V0Q29udHJhc3QiLCJmQ29udHJhc3QiLCJuSW5pdGlhbFRvbmUiLCJuVG9uZSIsImZvcmVncm91bmRUb25lIiwiZkluaXRpYWxUb25lIiwiZlRvbmUiLCJkZXNpcmVkUmF0aW8iLCJiZzEiLCJiZzIiLCJiZ1RvbmUxIiwiYmdUb25lMiIsInVwcGVyIiwibG93ZXIiLCJsaWdodE9wdGlvbiIsImRhcmtPcHRpb24iLCJhdmFpbGFibGVzIiwidG9uZVByZWZlcnNMaWdodEZvcmVncm91bmQiLCJsaWdodGVyVG9uZSIsImRhcmtlclRvbmUiLCJsaWdodGVyUmF0aW8iLCJkYXJrZXJSYXRpbyIsIm5lZ2xpZ2libGVEaWZmZXJlbmNlIiwidG9uZUFsbG93c0xpZ2h0Rm9yZWdyb3VuZCIsImVuYWJsZUxpZ2h0Rm9yZWdyb3VuZCIsIlZhcmlhbnQiLCJDb250cmFzdEN1cnZlIiwibG93Iiwibm9ybWFsIiwibWVkaXVtIiwiaGlnaCIsIlRvbmVEZWx0YVBhaXIiLCJpc0ZpZGVsaXR5IiwidmFyaWFudCIsIkZJREVMSVRZIiwiQ09OVEVOVCIsImlzTW9ub2Nocm9tZSIsIk1PTk9DSFJPTUUiLCJwZXJmb3JtQWxiZXJzIiwicHJlYWxiZXJzIiwiYWxiZXJzZCIsInZpZXdpbmdDb25kaXRpb25zRm9yQWxiZXJzIiwiTWF0ZXJpYWxEeW5hbWljQ29sb3JzIiwiaGlnaGVzdFN1cmZhY2UiLCJzdXJmYWNlQnJpZ2h0Iiwic3VyZmFjZURpbSIsImNvbnRlbnRBY2NlbnRUb25lRGVsdGEiLCJwcmltYXJ5UGFsZXR0ZUtleUNvbG9yIiwicHJpbWFyeVBhbGV0dGUiLCJrZXlDb2xvciIsInNlY29uZGFyeVBhbGV0dGVLZXlDb2xvciIsInNlY29uZGFyeVBhbGV0dGUiLCJ0ZXJ0aWFyeVBhbGV0dGVLZXlDb2xvciIsInRlcnRpYXJ5UGFsZXR0ZSIsIm5ldXRyYWxQYWxldHRlS2V5Q29sb3IiLCJuZXV0cmFsUGFsZXR0ZSIsIm5ldXRyYWxWYXJpYW50UGFsZXR0ZUtleUNvbG9yIiwibmV1dHJhbFZhcmlhbnRQYWxldHRlIiwic3VyZmFjZSIsInN1cmZhY2VDb250YWluZXJMb3dlc3QiLCJzdXJmYWNlQ29udGFpbmVyTG93Iiwic3VyZmFjZUNvbnRhaW5lckhpZ2giLCJzdXJmYWNlQ29udGFpbmVySGlnaGVzdCIsInN1cmZhY2VWYXJpYW50IiwiaW52ZXJzZVN1cmZhY2UiLCJpbnZlcnNlT25TdXJmYWNlIiwib3V0bGluZVZhcmlhbnQiLCJzaGFkb3ciLCJzY3JpbSIsInN1cmZhY2VUaW50IiwicHJpbWFyeSIsInByaW1hcnlDb250YWluZXIiLCJvblByaW1hcnkiLCJzb3VyY2VDb2xvckhjdCIsIm9uUHJpbWFyeUNvbnRhaW5lciIsImludmVyc2VQcmltYXJ5Iiwic2Vjb25kYXJ5Iiwib25TZWNvbmRhcnkiLCJpbml0aWFsVG9uZSIsImJ5RGVjcmVhc2luZ1RvbmUiLCJjbG9zZXN0VG9DaHJvbWEiLCJjaHJvbWFQZWFrIiwicG90ZW50aWFsU29sdXRpb24iLCJmaW5kRGVzaXJlZENocm9tYUJ5VG9uZSIsIm9uU2Vjb25kYXJ5Q29udGFpbmVyIiwidGVydGlhcnkiLCJ0ZXJ0aWFyeUNvbnRhaW5lciIsIm9uVGVydGlhcnkiLCJhbGJlcnNUb25lIiwicHJvcG9zZWRIY3QiLCJvblRlcnRpYXJ5Q29udGFpbmVyIiwiZXJyb3IiLCJlcnJvclBhbGV0dGUiLCJlcnJvckNvbnRhaW5lciIsIm9uRXJyb3IiLCJvbkVycm9yQ29udGFpbmVyIiwicHJpbWFyeUZpeGVkIiwicHJpbWFyeUZpeGVkRGltIiwib25QcmltYXJ5Rml4ZWQiLCJvblByaW1hcnlGaXhlZFZhcmlhbnQiLCJzZWNvbmRhcnlGaXhlZCIsInNlY29uZGFyeUZpeGVkRGltIiwib25TZWNvbmRhcnlGaXhlZCIsIm9uU2Vjb25kYXJ5Rml4ZWRWYXJpYW50IiwidGVydGlhcnlGaXhlZCIsInRlcnRpYXJ5Rml4ZWREaW0iLCJvblRlcnRpYXJ5Rml4ZWQiLCJvblRlcnRpYXJ5Rml4ZWRWYXJpYW50IiwiVG9uYWxQYWxldHRlIiwiZnJvbUh1ZUFuZENocm9tYSIsImNyZWF0ZUtleUNvbG9yIiwic21hbGxlc3REZWx0YUhjdCIsInNtYWxsZXN0RGVsdGEiLCJoY3RBZGQiLCJoY3RBZGREZWx0YSIsImhjdFN1YnRyYWN0IiwiaGN0U3VidHJhY3REZWx0YSIsIkNvcmVQYWxldHRlIiwib2YiLCJjb250ZW50T2YiLCJmcm9tQ29sb3JzIiwiY29sb3JzIiwiY3JlYXRlUGFsZXR0ZUZyb21Db2xvcnMiLCJjb250ZW50RnJvbUNvbG9ycyIsImNvbnRlbnQiLCJhMiIsImExIiwiYTMiLCJuZXV0cmFsIiwibjEiLCJuZXV0cmFsVmFyaWFudCIsIm4yIiwiaXNDb250ZW50IiwiTGFiUG9pbnRQcm92aWRlciIsInBvaW50IiwiZEwiLCJRdWFudGl6ZXJXc21lYW5zIiwicXVhbnRpemUiLCJpbnB1dFBpeGVscyIsInN0YXJ0aW5nQ2x1c3RlcnMiLCJtYXhDb2xvcnMiLCJwaXhlbFRvQ291bnQiLCJwaXhlbHMiLCJwb2ludFByb3ZpZGVyIiwicG9pbnRDb3VudCIsImlucHV0UGl4ZWwiLCJwaXhlbENvdW50IiwiY291bnRzIiwicGl4ZWwiLCJjbHVzdGVyQ291bnQiLCJjbHVzdGVycyIsImFkZGl0aW9uYWxDbHVzdGVyc05lZWRlZCIsInJhbmRvbSIsImNsdXN0ZXJJbmRpY2VzIiwiaW5kZXhNYXRyaXgiLCJkaXN0YW5jZVRvSW5kZXhNYXRyaXgiLCJEaXN0YW5jZUFuZEluZGV4IiwicGl4ZWxDb3VudFN1bXMiLCJpdGVyYXRpb24iLCJzb3J0IiwicG9pbnRzTW92ZWQiLCJwcmV2aW91c0NsdXN0ZXJJbmRleCIsInByZXZpb3VzQ2x1c3RlciIsInByZXZpb3VzRGlzdGFuY2UiLCJtaW5pbXVtRGlzdGFuY2UiLCJuZXdDbHVzdGVySW5kZXgiLCJjb21wb25lbnRBU3VtcyIsImNvbXBvbmVudEJTdW1zIiwiY29tcG9uZW50Q1N1bXMiLCJjbHVzdGVySW5kZXgiLCJhcmdiVG9Qb3B1bGF0aW9uIiwicG9zc2libGVOZXdDbHVzdGVyIiwiUXVhbnRpemVyTWFwIiwiY291bnRCeUNvbG9yIiwiU0lERV9MRU5HVEgiLCJUT1RBTF9TSVpFIiwiZGlyZWN0aW9ucyIsIlF1YW50aXplcld1Iiwid2VpZ2h0cyIsIm1vbWVudHNSIiwibW9tZW50c0ciLCJtb21lbnRzQiIsIm1vbWVudHMiLCJjdWJlcyIsImNvbnN0cnVjdEhpc3RvZ3JhbSIsImNvbXB1dGVNb21lbnRzIiwiY3JlYXRlQm94ZXNSZXN1bHQiLCJjcmVhdGVCb3hlcyIsImNyZWF0ZVJlc3VsdCIsInJlc3VsdENvdW50IiwiZW50cmllcyIsImJpdHNUb1JlbW92ZSIsImlSIiwiaUciLCJpQiIsImdldEluZGV4IiwiYXJlYSIsImFyZWFSIiwiYXJlYUciLCJhcmVhQiIsImFyZWEyIiwibGluZVIiLCJsaW5lRyIsImxpbmVCIiwibGluZTIiLCJwcmV2aW91c0luZGV4IiwiQm94Iiwidm9sdW1lVmFyaWFuY2UiLCJyMCIsImcwIiwiYjAiLCJyMSIsImcxIiwiYjEiLCJnZW5lcmF0ZWRDb2xvckNvdW50IiwiY3V0Iiwidm9sIiwidmFyaWFuY2UiLCJ0ZW1wIiwiQ3JlYXRlQm94ZXNSZXN1bHQiLCJjb2xvckNvdW50IiwiY3ViZSIsIndlaWdodCIsInZvbHVtZSIsImRyIiwiZGciLCJkYiIsIm9uZSIsInR3byIsIndob2xlUiIsIndob2xlRyIsIndob2xlQiIsIndob2xlVyIsIm1heFJSZXN1bHQiLCJtYXhpbWl6ZSIsIm1heEdSZXN1bHQiLCJtYXhCUmVzdWx0IiwiZGlyZWN0aW9uIiwibWF4UiIsIm1heGltdW0iLCJtYXhHIiwibWF4QiIsImN1dExvY2F0aW9uIiwiZmlyc3QiLCJsYXN0IiwiYm90dG9tUiIsImJvdHRvbSIsImJvdHRvbUciLCJib3R0b21CIiwiYm90dG9tVyIsImhhbGZSIiwiaGFsZkciLCJoYWxmQiIsImhhbGZXIiwidG9wIiwidGVtcE51bWVyYXRvciIsInRlbXBEZW5vbWluYXRvciIsIk1heGltaXplUmVzdWx0IiwibW9tZW50IiwicmVxdWVzdGVkQ291bnQiLCJRdWFudGl6ZXJDZWxlYmkiLCJ3dVJlc3VsdCIsIkR5bmFtaWNTY2hlbWUiLCJzb3VyY2VDb2xvckFyZ2IiLCJnZXRSb3RhdGVkSHVlIiwiaHVlcyIsInJvdGF0aW9ucyIsInNvdXJjZUh1ZSIsInRoaXNIdWUiLCJuZXh0SHVlIiwiU2NoZW1lIiwibGlnaHQiLCJsaWdodEZyb21Db3JlUGFsZXR0ZSIsImRhcmsiLCJkYXJrRnJvbUNvcmVQYWxldHRlIiwibGlnaHRDb250ZW50IiwiZGFya0NvbnRlbnQiLCJjb3JlIiwidG9KU09OIiwiU2NoZW1lQW5kcm9pZCIsImNvbG9yQWNjZW50UHJpbWFyeSIsImNvbG9yQWNjZW50UHJpbWFyeVZhcmlhbnQiLCJjb2xvckFjY2VudFNlY29uZGFyeSIsImNvbG9yQWNjZW50U2Vjb25kYXJ5VmFyaWFudCIsImNvbG9yQWNjZW50VGVydGlhcnkiLCJjb2xvckFjY2VudFRlcnRpYXJ5VmFyaWFudCIsInRleHRDb2xvclByaW1hcnkiLCJ0ZXh0Q29sb3JTZWNvbmRhcnkiLCJ0ZXh0Q29sb3JUZXJ0aWFyeSIsInRleHRDb2xvclByaW1hcnlJbnZlcnNlIiwidGV4dENvbG9yU2Vjb25kYXJ5SW52ZXJzZSIsInRleHRDb2xvclRlcnRpYXJ5SW52ZXJzZSIsImNvbG9yQmFja2dyb3VuZCIsImNvbG9yQmFja2dyb3VuZEZsb2F0aW5nIiwiY29sb3JTdXJmYWNlIiwiY29sb3JTdXJmYWNlVmFyaWFudCIsImNvbG9yU3VyZmFjZUhpZ2hsaWdodCIsInN1cmZhY2VIZWFkZXIiLCJ1bmRlclN1cmZhY2UiLCJvZmZTdGF0ZSIsImFjY2VudFN1cmZhY2UiLCJ0ZXh0UHJpbWFyeU9uQWNjZW50IiwidGV4dFNlY29uZGFyeU9uQWNjZW50Iiwidm9sdW1lQmFja2dyb3VuZCIsIlRlbXBlcmF0dXJlQ2FjaGUiLCJoY3RzQnlUZW1wQ2FjaGUiLCJoY3RzQnlIdWVDYWNoZSIsInRlbXBzQnlIY3RDYWNoZSIsImlucHV0UmVsYXRpdmVUZW1wZXJhdHVyZUNhY2hlIiwiY29tcGxlbWVudENhY2hlIiwiaGN0c0J5VGVtcCIsImhjdHMiLCJoY3RzQnlIdWUiLCJ0ZW1wZXJhdHVyZXNCeUhjdCIsInRlbXBzQnlIY3QiLCJ3YXJtZXN0IiwiY29sZGVzdCIsImFuYWxvZ291cyIsImRpdmlzaW9ucyIsInN0YXJ0SHVlIiwic3RhcnRIY3QiLCJsYXN0VGVtcCIsInJlbGF0aXZlVGVtcGVyYXR1cmUiLCJhbGxDb2xvcnMiLCJhYnNvbHV0ZVRvdGFsVGVtcERlbHRhIiwidGVtcERlbHRhIiwiaHVlQWRkZW5kIiwidGVtcFN0ZXAiLCJ0b3RhbFRlbXBEZWx0YSIsImluZGV4U2F0aXNmaWVkIiwiaW5kZXhBZGRlbmQiLCJhbnN3ZXJzIiwiaW5jcmVhc2VIdWVDb3VudCIsInNwbGljZSIsImRlY3JlYXNlSHVlQ291bnQiLCJjb21wbGVtZW50IiwiY29sZGVzdEh1ZSIsImNvbGRlc3RUZW1wIiwid2FybWVzdEh1ZSIsInJhbmdlIiwic3RhcnRIdWVJc0NvbGRlc3RUb1dhcm1lc3QiLCJpc0JldHdlZW4iLCJlbmRIdWUiLCJzbWFsbGVzdEVycm9yIiwiY29tcGxlbWVudFJlbGF0aXZlVGVtcCIsImlucHV0UmVsYXRpdmVUZW1wZXJhdHVyZSIsInBvc3NpYmxlQW5zd2VyIiwicmVsYXRpdmVUZW1wIiwiZGlmZmVyZW5jZUZyb21Db2xkZXN0IiwiYWxsSGN0cyIsInJhd1RlbXBlcmF0dXJlIiwiY29sb3JBdEh1ZSIsImxhYiIsIlNjaGVtZUNvbnRlbnQiLCJzdXBlciIsIlNjaGVtZUV4cHJlc3NpdmUiLCJFWFBSRVNTSVZFIiwic2Vjb25kYXJ5Um90YXRpb25zIiwidGVydGlhcnlSb3RhdGlvbnMiLCJTY2hlbWVGaWRlbGl0eSIsIlNjaGVtZU1vbm9jaHJvbWUiLCJTY2hlbWVOZXV0cmFsIiwiTkVVVFJBTCIsIlNjaGVtZVRvbmFsU3BvdCIsIlRPTkFMX1NQT1QiLCJTY2hlbWVWaWJyYW50IiwiVklCUkFOVCIsIlNDT1JFX09QVElPTl9ERUZBVUxUUyIsImRlc2lyZWQiLCJmYWxsYmFja0NvbG9yQVJHQiIsImZpbHRlciIsImNvbXBhcmUiLCJzY29yZSIsIlNjb3JlIiwiY29sb3JzVG9Qb3B1bGF0aW9uIiwiY29sb3JzSGN0IiwiaHVlUG9wdWxhdGlvbiIsInBvcHVsYXRpb25TdW0iLCJwb3B1bGF0aW9uIiwiaHVlRXhjaXRlZFByb3BvcnRpb25zIiwicHJvcG9ydGlvbiIsInNjb3JlZEhjdCIsIkNVVE9GRl9DSFJPTUEiLCJDVVRPRkZfRVhDSVRFRF9QUk9QT1JUSU9OIiwicHJvcG9ydGlvblNjb3JlIiwiV0VJR0hUX1BST1BPUlRJT04iLCJjaHJvbWFXZWlnaHQiLCJUQVJHRVRfQ0hST01BIiwiV0VJR0hUX0NIUk9NQV9CRUxPVyIsIldFSUdIVF9DSFJPTUFfQUJPVkUiLCJjaG9zZW5Db2xvcnMiLCJmaW5kIiwiY2hvc2VuSGN0Iiwib3V0UGFydHMiLCJwYXJ0IiwiaGV4IiwiaXNUaHJlZSIsImlzU2l4IiwiaXNFaWdodCIsInBhcnNlSW50SGV4IiwicmVwZWF0IiwicGFyc2VJbnQiLCJhc3luYyIsInNvdXJjZUNvbG9yRnJvbUltYWdlIiwiaW1hZ2UiLCJpbWFnZUJ5dGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwicmVjdCIsImRhdGFzZXQiLCJ0ZXN0Iiwic3giLCJzeSIsInN3Iiwic2giLCJnZXRJbWFnZURhdGEiLCJkYXRhIiwiY29tcGxldGUiLCJvbmxvYWQiLCJjdXN0b21Db2xvcnMiLCJwYWxldHRlcyIsImN1c3RvbUNvbG9yIiwidGhlbWVGcm9tSW1hZ2UiLCJibGVuZCIsInRvbmVzIiwib25Db2xvciIsImNvbG9yQ29udGFpbmVyIiwib25Db2xvckNvbnRhaW5lciIsImFwcGx5VGhlbWUiLCJib2R5Iiwic2V0U2NoZW1lUHJvcGVydGllcyIsImJyaWdodG5lc3NTdWZmaXgiLCJwYWxldHRlVG9uZXMiLCJwYWxldHRlS2V5Iiwic2V0UHJvcGVydHkiLCJzdWZmaXgiLCJGIiwicmVwbGFjZUFsbCIsInZhbHVlcyIsImNvbG9yRm9ybWF0IiwiTCIsInRoZW4iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsInByb3AiXSwic291cmNlUm9vdCI6IiJ9