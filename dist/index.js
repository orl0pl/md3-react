/*! For license information please see index.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("prop-types"),require("react")):"function"==typeof define&&define.amd?define(["prop-types","react"],t):"object"==typeof exports?exports["md3-react"]=t(require("prop-types"),require("react")):e["md3-react"]=t(e["prop-types"],e.react)}(this,((e,t)=>(()=>{var r={821:(e,t,r)=>{"use strict";r.r(t),r.d(t,{cache:()=>Be,css:()=>De,cx:()=>Oe,flush:()=>Se,getRegisteredStyles:()=>Ae,hydrate:()=>Me,injectGlobal:()=>Ie,keyframes:()=>Te,merge:()=>_e,sheet:()=>Fe});var n=function(){function e(e){var t=this;this._insertTag=function(e){var r;r=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,r),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{r.insertRule(e,r.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=Math.abs,a=String.fromCharCode,i=Object.assign;function s(e){return e.trim()}function c(e,t,r){return e.replace(t,r)}function u(e,t){return e.indexOf(t)}function l(e,t){return 0|e.charCodeAt(t)}function h(e,t,r){return e.slice(t,r)}function f(e){return e.length}function d(e){return e.length}function m(e,t){return t.push(e),e}var p=1,g=1,y=0,b=0,v=0,C="";function P(e,t,r,n,o,a,i){return{value:e,root:t,parent:r,type:n,props:o,children:a,line:p,column:g,length:i,return:""}}function w(e,t){return i(P("",null,null,"",null,null,0),e,{length:-e.length},t)}function x(){return v=b>0?l(C,--b):0,g--,10===v&&(g=1,p--),v}function k(){return v=b<y?l(C,b++):0,g++,10===v&&(g=1,p++),v}function S(){return l(C,b)}function M(){return b}function O(e,t){return h(C,e,t)}function _(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function A(e){return p=g=1,y=f(C=e),b=0,[]}function I(e){return C="",e}function T(e){return s(O(b-1,B(91===e?e+2:40===e?e+1:e)))}function D(e){for(;(v=S())&&v<33;)k();return _(e)>2||_(v)>3?"":" "}function F(e,t){for(;--t&&k()&&!(v<48||v>102||v>57&&v<65||v>70&&v<97););return O(e,M()+(t<6&&32==S()&&32==k()))}function B(e){for(;k();)switch(v){case e:return b;case 34:case 39:34!==e&&39!==e&&B(v);break;case 40:41===e&&B(e);break;case 92:k()}return b}function H(e,t){for(;k()&&e+v!==57&&(e+v!==84||47!==S()););return"/*"+O(t,b-1)+"*"+a(47===e?e:k())}function j(e){for(;!_(S());)k();return O(e,b)}var E="-ms-",R="-moz-",L="-webkit-",z="comm",$="rule",V="decl",N="@keyframes";function G(e,t){for(var r="",n=d(e),o=0;o<n;o++)r+=t(e[o],o,e,t)||"";return r}function q(e,t,r,n){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case V:return e.return=e.return||e.value;case z:return"";case N:return e.return=e.value+"{"+G(e.children,n)+"}";case $:e.value=e.props.join(",")}return f(r=G(e.children,n))?e.return=e.value+"{"+r+"}":""}function W(e){var t=d(e);return function(r,n,o,a){for(var i="",s=0;s<t;s++)i+=e[s](r,n,o,a)||"";return i}}function U(e){return I(Y("",null,null,null,[""],e=A(e),0,[0],e))}function Y(e,t,r,n,o,i,s,h,d){for(var p=0,g=0,y=s,b=0,v=0,C=0,P=1,w=1,O=1,_=0,A="",I=o,B=i,E=n,R=A;w;)switch(C=_,_=k()){case 40:if(108!=C&&58==l(R,y-1)){-1!=u(R+=c(T(_),"&","&\f"),"&\f")&&(O=-1);break}case 34:case 39:case 91:R+=T(_);break;case 9:case 10:case 13:case 32:R+=D(C);break;case 92:R+=F(M()-1,7);continue;case 47:switch(S()){case 42:case 47:m(X(H(k(),M()),t,r),d);break;default:R+="/"}break;case 123*P:h[p++]=f(R)*O;case 125*P:case 59:case 0:switch(_){case 0:case 125:w=0;case 59+g:-1==O&&(R=c(R,/\f/g,"")),v>0&&f(R)-y&&m(v>32?K(R+";",n,r,y-1):K(c(R," ","")+";",n,r,y-2),d);break;case 59:R+=";";default:if(m(E=J(R,t,r,p,g,o,h,A,I=[],B=[],y),i),123===_)if(0===g)Y(R,t,E,E,I,i,y,h,B);else switch(99===b&&110===l(R,3)?100:b){case 100:case 108:case 109:case 115:Y(e,E,E,n&&m(J(e,E,E,0,0,o,h,A,o,I=[],y),B),o,B,y,h,n?I:B);break;default:Y(R,E,E,E,[""],B,0,h,B)}}p=g=v=0,P=O=1,A=R="",y=s;break;case 58:y=1+f(R),v=C;default:if(P<1)if(123==_)--P;else if(125==_&&0==P++&&125==x())continue;switch(R+=a(_),_*P){case 38:O=g>0?1:(R+="\f",-1);break;case 44:h[p++]=(f(R)-1)*O,O=1;break;case 64:45===S()&&(R+=T(k())),b=S(),g=y=f(A=R+=j(M())),_++;break;case 45:45===C&&2==f(R)&&(P=0)}}return i}function J(e,t,r,n,a,i,u,l,f,m,p){for(var g=a-1,y=0===a?i:[""],b=d(y),v=0,C=0,w=0;v<n;++v)for(var x=0,k=h(e,g+1,g=o(C=u[v])),S=e;x<b;++x)(S=s(C>0?y[x]+" "+k:c(k,/&\f/g,y[x])))&&(f[w++]=S);return P(e,t,r,0===a?$:l,f,m,p)}function X(e,t,r){return P(e,t,r,z,a(v),h(e,2,-2),0)}function K(e,t,r,n){return P(e,t,r,V,h(e,0,n),h(e,n+1,-1),n)}function Z(e){var t=Object.create(null);return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}}var Q=function(e,t,r){for(var n=0,o=0;n=o,o=S(),38===n&&12===o&&(t[r]=1),!_(o);)k();return O(e,b)},ee=new WeakMap,te=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,r=e.parent,n=e.column===r.column&&e.line===r.line;"rule"!==r.type;)if(!(r=r.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ee.get(r))&&!n){ee.set(e,!0);for(var o=[],i=function(e,t){return I(function(e,t){var r=-1,n=44;do{switch(_(n)){case 0:38===n&&12===S()&&(t[r]=1),e[r]+=Q(b-1,t,r);break;case 2:e[r]+=T(n);break;case 4:if(44===n){e[++r]=58===S()?"&\f":"",t[r]=e[r].length;break}default:e[r]+=a(n)}}while(n=k());return e}(A(e),t))}(t,o),s=r.props,c=0,u=0;c<i.length;c++)for(var l=0;l<s.length;l++,u++)e.props[u]=o[c]?i[c].replace(/&\f/g,s[l]):s[l]+" "+i[c]}}},re=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ne(e,t){switch(function(e,t){return 45^l(e,0)?(((t<<2^l(e,0))<<2^l(e,1))<<2^l(e,2))<<2^l(e,3):0}(e,t)){case 5103:return L+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return L+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return L+e+R+e+E+e+e;case 6828:case 4268:return L+e+E+e+e;case 6165:return L+e+E+"flex-"+e+e;case 5187:return L+e+c(e,/(\w+).+(:[^]+)/,L+"box-$1$2"+E+"flex-$1$2")+e;case 5443:return L+e+E+"flex-item-"+c(e,/flex-|-self/,"")+e;case 4675:return L+e+E+"flex-line-pack"+c(e,/align-content|flex-|-self/,"")+e;case 5548:return L+e+E+c(e,"shrink","negative")+e;case 5292:return L+e+E+c(e,"basis","preferred-size")+e;case 6060:return L+"box-"+c(e,"-grow","")+L+e+E+c(e,"grow","positive")+e;case 4554:return L+c(e,/([^-])(transform)/g,"$1"+L+"$2")+e;case 6187:return c(c(c(e,/(zoom-|grab)/,L+"$1"),/(image-set)/,L+"$1"),e,"")+e;case 5495:case 3959:return c(e,/(image-set\([^]*)/,L+"$1$`$1");case 4968:return c(c(e,/(.+:)(flex-)?(.*)/,L+"box-pack:$3"+E+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+L+e+e;case 4095:case 3583:case 4068:case 2532:return c(e,/(.+)-inline(.+)/,L+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(f(e)-1-t>6)switch(l(e,t+1)){case 109:if(45!==l(e,t+4))break;case 102:return c(e,/(.+:)(.+)-([^]+)/,"$1"+L+"$2-$3$1"+R+(108==l(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?ne(c(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==l(e,t+1))break;case 6444:switch(l(e,f(e)-3-(~u(e,"!important")&&10))){case 107:return c(e,":",":"+L)+e;case 101:return c(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+L+(45===l(e,14)?"inline-":"")+"box$3$1"+L+"$2$3$1"+E+"$2box$3")+e}break;case 5936:switch(l(e,t+11)){case 114:return L+e+E+c(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return L+e+E+c(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return L+e+E+c(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return L+e+E+e+e}return e}var oe="undefined"!=typeof document,ae=oe?void 0:function(e){var t=new WeakMap;return function(e){if(t.has(e))return t.get(e);var r=Z((function(){var e={};return function(t){return e[t]}}));return t.set(e,r),r}}(),ie=[function(e,t,r,n){if(e.length>-1&&!e.return)switch(e.type){case V:e.return=ne(e.value,e.length);break;case N:return G([w(e,{value:c(e.value,"@","@"+L)})],n);case $:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return G([w(e,{props:[c(t,/:(read-\w+)/,":-moz-$1")]})],n);case"::placeholder":return G([w(e,{props:[c(t,/:(plac\w+)/,":"+L+"input-$1")]}),w(e,{props:[c(t,/:(plac\w+)/,":-moz-$1")]}),w(e,{props:[c(t,/:(plac\w+)/,E+"input-$1")]})],n)}return""}))}}],se=function(e){var t=e.key;if(oe&&"css"===t){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,a,i=e.stylisPlugins||ie,s={},c=[];oe&&(o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),r=1;r<t.length;r++)s[t[r]]=!0;c.push(e)})));var u,l=[te,re];if(oe){var h,f=[q,(u=function(e){h.insert(e)},function(e){e.root||(e=e.return)&&u(e)})],d=W(l.concat(i,f));a=function(e,t,r,n){h=r,G(U(e?e+"{"+t.styles+"}":t.styles),d),n&&(y.inserted[t.name]=!0)}}else{var m=[q],p=W(l.concat(i,m)),g=ae(i)(t);a=function(e,t,r,n){var o=t.name,a=function(e,t){var r=t.name;return void 0===g[r]&&(g[r]=G(U(e?e+"{"+t.styles+"}":t.styles),p)),g[r]}(e,t);return void 0===y.compat?(n&&(y.inserted[o]=!0),a):n?void(y.inserted[o]=a):a}}var y={key:t,sheet:new n({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:a};return y.sheet.hydrate(c),y},ce={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ue=/[A-Z]|^ms/g,le=/_EMO_([^_]+?)_([^]*?)_EMO_/g,he=function(e){return 45===e.charCodeAt(1)},fe=function(e){return null!=e&&"boolean"!=typeof e},de=Z((function(e){return he(e)?e:e.replace(ue,"-$&").toLowerCase()})),me=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(le,(function(e,t,r){return ge={name:t,styles:r,next:ge},t}))}return 1===ce[e]||he(e)||"number"!=typeof t||0===t?t:t+"px"};function pe(e,t,r){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return ge={name:r.name,styles:r.styles,next:ge},r.name;if(void 0!==r.styles){var n=r.next;if(void 0!==n)for(;void 0!==n;)ge={name:n.name,styles:n.styles,next:ge},n=n.next;return r.styles+";"}return function(e,t,r){var n="";if(Array.isArray(r))for(var o=0;o<r.length;o++)n+=pe(e,t,r[o])+";";else for(var a in r){var i=r[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?n+=a+"{"+t[i]+"}":fe(i)&&(n+=de(a)+":"+me(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var s=pe(e,t,i);switch(a){case"animation":case"animationName":n+=de(a)+":"+s+";";break;default:n+=a+"{"+s+"}"}}else for(var c=0;c<i.length;c++)fe(i[c])&&(n+=de(a)+":"+me(a,i[c])+";")}return n}(e,t,r);case"function":if(void 0!==e){var o=ge,a=r(e);return ge=o,pe(e,t,a)}}if(null==t)return r;var i=t[r];return void 0!==i?i:r}var ge,ye=/label:\s*([^\s;\n{]+)\s*(;|$)/g,be=function(e,t,r){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var n=!0,o="";ge=void 0;var a=e[0];null==a||void 0===a.raw?(n=!1,o+=pe(r,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=pe(r,t,e[i]),n&&(o+=a[i]);ye.lastIndex=0;for(var s,c="";null!==(s=ye.exec(o));)c+="-"+s[1];var u=function(e){for(var t,r=0,n=0,o=e.length;o>=4;++n,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(n)|(255&e.charCodeAt(++n))<<8|(255&e.charCodeAt(++n))<<16|(255&e.charCodeAt(++n))<<24))+(59797*(t>>>16)<<16),r=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(o){case 3:r^=(255&e.charCodeAt(n+2))<<16;case 2:r^=(255&e.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)}(o)+c;return{name:u,styles:o,next:ge}},ve="undefined"!=typeof document;function Ce(e,t,r){var n="";return r.split(" ").forEach((function(r){void 0!==e[r]?t.push(e[r]+";"):n+=r+" "})),n}function Pe(e,t){if(void 0===e.inserted[t.name])return e.insert("",t,e.sheet,!0)}function we(e,t,r){var n=[],o=Ce(e,n,r);return n.length<2?r:o+t(n)}var xe=function e(t){for(var r="",n=0;n<t.length;n++){var o=t[n];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"object":if(Array.isArray(o))a=e(o);else for(var i in a="",o)o[i]&&i&&(a&&(a+=" "),a+=i);break;default:a=o}a&&(r&&(r+=" "),r+=a)}}return r},ke=function(e){var t=se({key:"css"});t.sheet.speedy=function(e){this.isSpeedy=e},t.compat=!0;var r=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=be(r,t.registered,void 0);return function(e,t,r){!function(e,t,r){var n=e.key+"-"+t.name;(!1===r||!1===ve&&void 0!==e.compat)&&void 0===e.registered[n]&&(e.registered[n]=t.styles)}(e,t,r);var n=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o="",a=t;do{var i=e.insert(t===a?"."+n:"",a,e.sheet,!0);ve||void 0===i||(o+=i),a=a.next}while(void 0!==a);if(!ve&&0!==o.length);}}(t,o,!1),t.key+"-"+o.name};return{css:r,cx:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return we(t.registered,r,xe(n))},injectGlobal:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=be(r,t.registered);Pe(t,o)},keyframes:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var o=be(r,t.registered),a="animation-"+o.name;return Pe(t,{name:o.name,styles:"@keyframes "+a+"{"+o.styles+"}"}),a},hydrate:function(e){e.forEach((function(e){t.inserted[e]=!0}))},flush:function(){t.registered={},t.inserted={},t.sheet.flush()},sheet:t.sheet,cache:t,getRegisteredStyles:Ce.bind(null,t.registered),merge:we.bind(null,t.registered,r)}}(),Se=ke.flush,Me=ke.hydrate,Oe=ke.cx,_e=ke.merge,Ae=ke.getRegisteredStyles,Ie=ke.injectGlobal,Te=ke.keyframes,De=ke.css,Fe=ke.sheet,Be=ke.cache},849:(e,t,r)=>{e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(e,t){e.exports=r(99)},function(e,t){e.exports=r(156)},function(e,t,r){"use strict";r.r(t);var n=r(1),o=r(0),a=function(){return(a=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=0,s=n.forwardRef((function(e,t){var r=e.title,o=void 0===r?null:r,s=e.description,c=void 0===s?null:s,u=e.size,l=void 0===u?null:u,h=e.color,f=void 0===h?"currentColor":h,d=e.horizontal,m=void 0===d?null:d,p=e.vertical,g=void 0===p?null:p,y=e.rotate,b=void 0===y?null:y,v=e.spin,C=void 0===v?null:v,P=e.style,w=void 0===P?{}:P,x=e.children,k=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}(e,["title","description","size","color","horizontal","vertical","rotate","spin","style","children"]);i++;var S,M=null!==C&&C,O=n.Children.map(x,(function(e){var t=e;!0!==M&&(M=!0===(null===C?t.props.spin:C));var r=t.props.size;"number"==typeof l&&"number"==typeof t.props.size&&(r=t.props.size/l);var o={size:r,color:null===f?t.props.color:f,horizontal:null===m?t.props.horizontal:m,vertical:null===g?t.props.vertical:g,rotate:null===b?t.props.rotate:b,spin:null===C?t.props.spin:C,inStack:!0};return n.cloneElement(t,o)}));null!==l&&(w.width="string"==typeof l?l:1.5*l+"rem");var _,A="stack_labelledby_"+i,I="stack_describedby_"+i;if(o)S=c?A+" "+I:A;else if(_="presentation",c)throw new Error("title attribute required when description is set");return n.createElement("svg",a({ref:t,viewBox:"0 0 24 24",style:w,role:_,"aria-labelledby":S},k),o&&n.createElement("title",{id:A},o),c&&n.createElement("desc",{id:I},c),M&&n.createElement("style",null,"@keyframes spin { from { transform: rotate(0deg) } to { transform: rotate(360deg) } }","@keyframes spin-inverse { from { transform: rotate(0deg) } to { transform: rotate(-360deg) } }"),O)}));s.displayName="Stack",s.propTypes={size:o.oneOfType([o.number,o.string]),color:o.string,horizontal:o.bool,vertical:o.bool,rotate:o.number,spin:o.oneOfType([o.bool,o.number]),children:o.oneOfType([o.arrayOf(o.node),o.node]).isRequired,className:o.string,style:o.object},s.defaultProps={size:null,color:null,horizontal:null,vertical:null,rotate:null,spin:null};var c=s;r.d(t,"Icon",(function(){return h})),r.d(t,"Stack",(function(){return c}));var u=function(){return(u=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},l=0,h=n.forwardRef((function(e,t){var r=e.path,o=e.id,a=void 0===o?++l:o,i=e.title,s=void 0===i?null:i,c=e.description,h=void 0===c?null:c,f=e.size,d=void 0===f?null:f,m=e.color,p=void 0===m?"currentColor":m,g=e.horizontal,y=void 0!==g&&g,b=e.vertical,v=void 0!==b&&b,C=e.rotate,P=void 0===C?0:C,w=e.spin,x=void 0!==w&&w,k=e.style,S=void 0===k?{}:k,M=e.inStack,O=void 0!==M&&M,_=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}(e,["path","id","title","description","size","color","horizontal","vertical","rotate","spin","style","inStack"]),A={},I=[];null!==d&&(O?I.push("scale("+d+")"):(S.width="string"==typeof d?d:1.5*d+"rem",S.height=S.width)),y&&I.push("scaleX(-1)"),v&&I.push("scaleY(-1)"),0!==P&&I.push("rotate("+P+"deg)"),null!==p&&(A.fill=p);var T=n.createElement("path",u({d:r,style:A},O?_:{})),D=T;I.length>0&&(S.transform=I.join(" "),S.transformOrigin="center",O&&(D=n.createElement("g",{style:S},T,n.createElement("rect",{width:"24",height:"24",fill:"transparent"}))));var F,B=D,H=!0===x||"number"!=typeof x?2:x,j=!O&&(y||v);if(H<0&&(j=!j),x&&(B=n.createElement("g",{style:{animation:"spin"+(j?"-inverse":"")+" linear "+Math.abs(H)+"s infinite",transformOrigin:"center"}},D,!(y||v||0!==P)&&n.createElement("rect",{width:"24",height:"24",fill:"transparent"}))),O)return B;var E,R="icon_labelledby_"+a,L="icon_describedby_"+a;if(s)F=h?R+" "+L:R;else if(E="presentation",h)throw new Error("title attribute required when description is set");return n.createElement("svg",u({ref:t,viewBox:"0 0 24 24",style:S,role:E,"aria-labelledby":F},_),s&&n.createElement("title",{id:R},s),h&&n.createElement("desc",{id:L},h),!O&&x&&(j?n.createElement("style",null,"@keyframes spin-inverse { from { transform: rotate(0deg) } to { transform: rotate(-360deg) } }"):n.createElement("style",null,"@keyframes spin { from { transform: rotate(0deg) } to { transform: rotate(360deg) } }")),B)}));h.displayName="Icon",h.propTypes={path:o.string.isRequired,size:o.oneOfType([o.number,o.string]),color:o.string,horizontal:o.bool,vertical:o.bool,rotate:o.number,spin:o.oneOfType([o.bool,o.number]),style:o.object,inStack:o.bool,className:o.string},h.defaultProps={size:null,color:"currentColor",horizontal:!1,vertical:!1,rotate:0,spin:!1},t.default=h}])},870:function(e,t,r){"use strict";var n=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0;const a=r(607),i=r(794),s=r(821),c=o(r(849)),u=o(r(156));t.Button=e=>{const{scheme:t}=(0,a.useTheme)(),{type:r="filled",icon:o}=e,l=n(e,["type","icon"]),h="filled"===r?(0,i.hexFromArgb)(t.primary):"tonal"===r?(0,i.hexFromArgb)(t.secondaryContainer):"transparent",f="filled"===r?(0,i.hexFromArgb)(t.onPrimary):"tonal"===r?(0,i.hexFromArgb)(t.onSecondaryContainer):(0,i.hexFromArgb)(t.primary),d=s.css`
		padding: 0px 24px;
		transition: background-color 300ms;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
		${o&&"padding-left: 16px;"}
		color: ${f}${e.disabled&&Math.round(97.28).toString(16).padStart(2,"0")};
		
		button:not(:disabled):hover & {
			background-color: ${f+Math.round(20.48).toString(16).padStart(2,"0")};
		}
		button:not(:disabled):active & {
			background-color: ${f+Math.round(30.72).toString(16).padStart(2,"0")};
		}
		button:not(:disabled):focus-visible & {
			background-color: ${f+Math.round(30.72).toString(16).padStart(2,"0")};
		}
		${(0,a.textStylesForType)("labelLarge")}
	`;return u.default.createElement("button",Object.assign({className:s.css`
				all: unset;
				cursor: ${!e.disabled&&"pointer"};
				overflow: hidden;
				width: fit-content;
				height: 36px;
				display: flex;
				border-radius: 999px;
				background-color: ${h}${e.disabled&&Math.round(97.28).toString(16).padStart(2,"0")};
				${"outline"===r&&`border: ${(0,i.hexFromArgb)(t.outline)}${e.disabled?Math.round(97.28).toString(16).padStart(2,"0"):""} 1px solid `}
			`},l),u.default.createElement("div",{className:d},o&&u.default.createElement(c.default,{path:o,size:"18px"}),e.children))}},31:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(870),t)},740:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(31),t),o(r(651),t),o(r(246),t)},838:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},i=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.NavigationBar=void 0;const c=a(r(156)),u=r(607),l=r(794),h=r(821),f=s(r(849)),d=e=>{const{scheme:t}=(0,u.useTheme)(),r=(e.activated,(0,l.hexFromArgb)(t.onPrimaryContainer));return c.default.createElement("div",{tabIndex:1,className:h.css`
				display: flex;
				flex-direction: column;
				gap: 4px;
				align-items: center;
				& div,
				span {
					transition: background-color 300ms ease-in-out, color 300ms ease-in-out;
				}
                &:focus-visible {
                    outline: unset;
                }
                
			`,onClick:e.onClick,onKeyDown:t=>{"Enter"===t.key&&e.onClick&&e.onClick(t)}},c.default.createElement("div",{className:h.css`
					display: flex;
					justify-content: center;
					align-items: center;
					border-radius: 99px;
					width: ${e.horizontal?"56px":"64px"};
					height: 32px;
					background-color: ${e.activated&&(0,l.hexFromArgb)(t.secondaryContainer)};
					color: ${e.activated?(0,l.hexFromArgb)(t.onSurface):(0,l.hexFromArgb)(t.onSurfaceVariant)};
					div:hover > & {
						background-color: ${r+Math.round(20.48).toString(16).padStart(2,"0")};
					}
					div:active > & {
						background-color: ${r+Math.round(30.72).toString(16).padStart(2,"0")};
					}
					div:focus-visible > & {
						background-color: ${r+Math.round(30.72).toString(16).padStart(2,"0")};
					}
				`},e.icon&&e.activated?c.default.createElement(f.default,{size:"24px",path:e.icon}):e.inActiveIcon&&!e.activated?c.default.createElement(f.default,{size:"24px",path:e.inActiveIcon}):e.icon&&c.default.createElement(f.default,{size:"24px",path:e.icon})),c.default.createElement(u.Text,{style:{textAlign:"center"},type:"labelMedium",color:e.activated?"onSurface":"onSurfaceVariant"},e.label))};t.NavigationBar=e=>{const{scheme:t}=(0,u.useTheme)(),[r,n]=(0,c.useState)(0),{horizontal:o,segments:a,handleSelected:s}=e,f=i(e,["horizontal","segments","handleSelected"]);return c.default.createElement("nav",Object.assign({className:h.css`
				display: flex;
				flex-direction: ${e.horizontal?"column":"row"};
				gap: 16px;
				background-color: ${(0,l.hexFromArgb)(t.surfaceContainer)};
				width: max-content;
                ${!o&&"justify-content: space-evenly;"};
				padding-top: 12px;
				padding-bottom: 16px;
				${!o&&"width: 100%;"};
				${o&&"width: 80px;"};
			`},f),e.segments.map(((t,o)=>c.default.createElement(d,Object.assign({},t,{title:r===o?"tak":"nie",activated:r===o,key:o,horizontal:e.horizontal,onClick:()=>{n(o),e.handleSelected&&e.handleSelected(o)}})))))}},246:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(838),t)},169:function(e,t,r){"use strict";var n=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Text=void 0;const a=o(r(156)),i=r(794),s=r(821),c=r(607),u=r(607);t.Text=e=>{var t=n(e,[]);const{color:r,type:o,children:l}=t,h=n(t,["color","type","children"]),{scheme:f}=(0,c.useTheme)();return a.default.createElement(a.default.Fragment,null,a.default.createElement("span",Object.assign({className:s.css`
					//color: #${f[r||"onBackground"].toString(16).slice(0,-2)};
					color: ${(0,i.hexFromArgb)(f[r||"onBackground"])};
					${(0,u.textStylesForType)(o||"bodyMedium")}
				`},h),l))}},651:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(169),t),o(r(684),t)},684:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.textStylesForType=t.typographySet=void 0,t.typographySet={displayLarge:{lineHeight:64,fontSize:57,letterSpacing:-.25,fontWeight:400},displayMedium:{lineHeight:52,fontSize:45,letterSpacing:0,fontWeight:400},displaySmall:{lineHeight:44,fontSize:36,letterSpacing:0,fontWeight:400},headlineLarge:{lineHeight:44,fontSize:36,letterSpacing:0,fontWeight:400},headlineMedium:{lineHeight:36,fontSize:28,letterSpacing:0,fontWeight:400},headlineSmall:{lineHeight:32,fontSize:24,letterSpacing:0,fontWeight:400},titleLarge:{lineHeight:28,fontSize:22,letterSpacing:0,fontWeight:400},titleMedium:{lineHeight:24,fontSize:16,letterSpacing:.15,fontWeight:500},titleSmall:{lineHeight:20,fontSize:14,letterSpacing:.1,fontWeight:500},labelLarge:{lineHeight:20,fontSize:14,letterSpacing:.1,fontWeight:500},labelMedium:{lineHeight:16,fontSize:12,letterSpacing:.5,fontWeight:500},labelSmall:{lineHeight:16,fontSize:11,letterSpacing:.5,fontWeight:500},bodyLarge:{lineHeight:24,fontSize:16,letterSpacing:.5,fontWeight:400},bodyMedium:{lineHeight:20,fontSize:14,letterSpacing:.25,fontWeight:400},bodySmall:{lineHeight:16,fontSize:12,letterSpacing:.4,fontWeight:400}},t.textStylesForType=function(e){const r=t.typographySet[e];return`\n  line-height: ${r.lineHeight}px;\n  font-size: ${r.fontSize}px;\n  letter-spacing: ${r.letterSpacing}px;\n  font-weight: ${r.fontWeight};`}},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(740),t),o(r(402),t),o(r(606),t)},434:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LayoutWithNavigationBar=void 0;const i=r(821),s=r(794),c=r(607),u=a(r(156));t.LayoutWithNavigationBar=function(e){const{updateSourceColor:t,scheme:r,toggleTheme:n}=(0,c.useTheme)(),[o,a]=(0,u.useState)(0),[l,h]=(0,u.useState)(window.matchMedia("(max-width: 600px)").matches);window.matchMedia("(max-width: 600px)").addEventListener("change",(e=>h(e.matches)));let f=[];return f=Array.isArray(e.children)?e.children:[e.children],u.default.createElement("div",{className:i.css`
				background-color: ${(0,s.hexFromArgb)(r.background)};
				flex: 1;
				display: flex;
				flex-direction: ${l?"column-reverse":"row"};
				width: 100%;
				height: 100%;
				color: ${(0,s.hexFromArgb)(r.onBackground)};
			`},u.default.createElement(c.NavigationBar,{handleSelected:e=>{a(e)},horizontal:!l,segments:e.segments}),u.default.createElement("main",{className:i.css`flex: 1; display: flex; background-color: ${(0,s.hexFromArgb)(r.background)}; overflow: auto;`},f[o]))}},402:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(434),t)},606:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.useTheme=t.ThemeProvider=void 0;const i=r(794),s=a(r(156)),c=r(450),u={theme:"light",sourceColor:"#4400ee",scheme:(0,c.themeFromSourceColor)((0,i.argbFromHex)("#4400ee")).schemes.light,toggleTheme:function(){},updateSourceColor:function(e){}},l=(0,s.createContext)(u);t.ThemeProvider=function({children:e}){const[t,r]=(0,s.useState)("light"),[n,o]=(0,s.useState)("#4400ee"),[a,u]=(0,s.useState)((0,c.themeFromSourceColor)((0,i.argbFromHex)("#4400ee"),[]).schemes.light);return s.default.createElement(l.Provider,{value:{theme:t,toggleTheme:e=>{r(e||(e=>"light"===e?"dark":"light")),u((0,c.themeFromSourceColor)((0,i.argbFromHex)(n),[]).schemes[e||("light"===t?"dark":"light")])},sourceColor:n,updateSourceColor:e=>{o(e),u((0,c.themeFromSourceColor)((0,i.argbFromHex)(e),[]).schemes[t])},scheme:a}},e)},t.useTheme=function(){const e=(0,s.useContext)(l);if(!e)throw new Error("useTheme must be used within a ThemeProvider");return e}},99:t=>{"use strict";t.exports=e},156:e=>{"use strict";e.exports=t},794:(e,t,r)=>{"use strict";function n(e){return e<0?-1:0===e?0:1}function o(e,t,r){return(1-r)*e+r*t}function a(e,t,r){return r<e?e:r>t?t:r}function i(e,t,r){return r<e?e:r>t?t:r}function s(e){return(e%=360)<0&&(e+=360),e}function c(e){return(e%=360)<0&&(e+=360),e}function u(e,t){return c(t-e)<=180?1:-1}function l(e,t){return 180-Math.abs(Math.abs(e-t)-180)}function h(e,t){return[e[0]*t[0][0]+e[1]*t[0][1]+e[2]*t[0][2],e[0]*t[1][0]+e[1]*t[1][1]+e[2]*t[1][2],e[0]*t[2][0]+e[1]*t[2][1]+e[2]*t[2][2]]}r.r(t),r.d(t,{Blend:()=>V,Cam16:()=>L,Contrast:()=>N,CorePalette:()=>ee,DislikeAnalyzer:()=>G,DynamicColor:()=>q,DynamicScheme:()=>pe,Hct:()=>$,MaterialDynamicColors:()=>Z,QuantizerCelebi:()=>me,QuantizerMap:()=>oe,QuantizerWsmeans:()=>re,QuantizerWu:()=>le,Scheme:()=>ge,SchemeAndroid:()=>ye,SchemeContent:()=>ve,SchemeExpressive:()=>Ce,SchemeFidelity:()=>Pe,SchemeMonochrome:()=>we,SchemeNeutral:()=>xe,SchemeTonalSpot:()=>ke,SchemeVibrant:()=>Se,Score:()=>_e,TemperatureCache:()=>be,TonalPalette:()=>Q,ViewingConditions:()=>R,alphaFromArgb:()=>y,applyTheme:()=>je,argbFromHex:()=>Ie,argbFromLab:()=>k,argbFromLinrgb:()=>g,argbFromLstar:()=>M,argbFromRgb:()=>p,argbFromRgba:()=>B,argbFromXyz:()=>w,blueFromArgb:()=>C,clampDouble:()=>i,clampInt:()=>a,customColor:()=>He,delinearized:()=>T,differenceDegrees:()=>l,greenFromArgb:()=>v,hexFromArgb:()=>Ae,isOpaque:()=>P,labFromArgb:()=>S,lerp:()=>o,linearized:()=>I,lstarFromArgb:()=>O,lstarFromY:()=>A,matrixMultiply:()=>h,redFromArgb:()=>b,rgbaFromArgb:()=>F,rotationDirection:()=>u,sanitizeDegreesDouble:()=>c,sanitizeDegreesInt:()=>s,signum:()=>n,sourceColorFromImage:()=>De,themeFromImage:()=>Be,themeFromSourceColor:()=>Fe,whitePointD65:()=>D,xyzFromArgb:()=>x,yFromLstar:()=>_});const f=[[.41233895,.35762064,.18051042],[.2126,.7152,.0722],[.01932141,.11916382,.95034478]],d=[[3.2413774792388685,-1.5376652402851851,-.49885366846268053],[-.9691452513005321,1.8758853451067872,.04156585616912061],[.05562093689691305,-.20395524564742123,1.0571799111220335]],m=[95.047,100,108.883];function p(e,t,r){return(255<<24|(255&e)<<16|(255&t)<<8|255&r)>>>0}function g(e){return p(T(e[0]),T(e[1]),T(e[2]))}function y(e){return e>>24&255}function b(e){return e>>16&255}function v(e){return e>>8&255}function C(e){return 255&e}function P(e){return y(e)>=255}function w(e,t,r){const n=d,o=n[0][0]*e+n[0][1]*t+n[0][2]*r,a=n[1][0]*e+n[1][1]*t+n[1][2]*r,i=n[2][0]*e+n[2][1]*t+n[2][2]*r;return p(T(o),T(a),T(i))}function x(e){return h([I(b(e)),I(v(e)),I(C(e))],f)}function k(e,t,r){const n=m,o=(e+16)/116,a=o-r/200,i=E(t/500+o),s=E(o),c=E(a);return w(i*n[0],s*n[1],c*n[2])}function S(e){const t=I(b(e)),r=I(v(e)),n=I(C(e)),o=f,a=o[0][0]*t+o[0][1]*r+o[0][2]*n,i=o[1][0]*t+o[1][1]*r+o[1][2]*n,s=o[2][0]*t+o[2][1]*r+o[2][2]*n,c=m,u=a/c[0],l=i/c[1],h=s/c[2],d=j(u),p=j(l);return[116*p-16,500*(d-p),200*(p-j(h))]}function M(e){const t=T(_(e));return p(t,t,t)}function O(e){return 116*j(x(e)[1]/100)-16}function _(e){return 100*E((e+16)/116)}function A(e){return 116*j(e/100)-16}function I(e){const t=e/255;return t<=.040449936?t/12.92*100:100*Math.pow((t+.055)/1.055,2.4)}function T(e){const t=e/100;let r=0;return r=t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,a(0,255,Math.round(255*r))}function D(){return m}function F(e){return{r:b(e),g:v(e),b:C(e),a:y(e)}}function B({r:e,g:t,b:r,a:n}){const o=H(e),a=H(t),i=H(r);return H(n)<<24|o<<16|a<<8|i}function H(e){return e<0?0:e>255?255:e}function j(e){return e>216/24389?Math.pow(e,1/3):(903.2962962962963*e+16)/116}function E(e){const t=e*e*e;return t>216/24389?t:(116*e-16)/903.2962962962963}class R{static make(e=D(),t=200/Math.PI*_(50)/100,r=50,n=2,a=!1){const i=e,s=.401288*i[0]+.650173*i[1]+-.051461*i[2],c=-.250268*i[0]+1.204414*i[1]+.045854*i[2],u=-.002079*i[0]+.048952*i[1]+.953127*i[2],l=.8+n/10,h=l>=.9?o(.59,.69,10*(l-.9)):o(.525,.59,10*(l-.8));let f=a?1:l*(1-1/3.6*Math.exp((-t-42)/92));f=f>1?1:f<0?0:f;const d=l,m=[f*(100/s)+1-f,f*(100/c)+1-f,f*(100/u)+1-f],p=1/(5*t+1),g=p*p*p*p,y=1-g,b=g*t+.1*y*y*Math.cbrt(5*t),v=_(r)/e[1],C=1.48+Math.sqrt(v),P=.725/Math.pow(v,.2),w=P,x=[Math.pow(b*m[0]*s/100,.42),Math.pow(b*m[1]*c/100,.42),Math.pow(b*m[2]*u/100,.42)],k=[400*x[0]/(x[0]+27.13),400*x[1]/(x[1]+27.13),400*x[2]/(x[2]+27.13)];return new R(v,(2*k[0]+k[1]+.05*k[2])*P,P,w,h,d,m,b,Math.pow(b,.25),C)}constructor(e,t,r,n,o,a,i,s,c,u){this.n=e,this.aw=t,this.nbb=r,this.ncb=n,this.c=o,this.nc=a,this.rgbD=i,this.fl=s,this.fLRoot=c,this.z=u}}R.DEFAULT=R.make();class L{constructor(e,t,r,n,o,a,i,s,c){this.hue=e,this.chroma=t,this.j=r,this.q=n,this.m=o,this.s=a,this.jstar=i,this.astar=s,this.bstar=c}distance(e){const t=this.jstar-e.jstar,r=this.astar-e.astar,n=this.bstar-e.bstar,o=Math.sqrt(t*t+r*r+n*n);return 1.41*Math.pow(o,.63)}static fromInt(e){return L.fromIntInViewingConditions(e,R.DEFAULT)}static fromIntInViewingConditions(e,t){const r=(65280&e)>>8,o=255&e,a=I((16711680&e)>>16),i=I(r),s=I(o),c=.41233895*a+.35762064*i+.18051042*s,u=.2126*a+.7152*i+.0722*s,l=.01932141*a+.11916382*i+.95034478*s,h=.401288*c+.650173*u-.051461*l,f=-.250268*c+1.204414*u+.045854*l,d=-.002079*c+.048952*u+.953127*l,m=t.rgbD[0]*h,p=t.rgbD[1]*f,g=t.rgbD[2]*d,y=Math.pow(t.fl*Math.abs(m)/100,.42),b=Math.pow(t.fl*Math.abs(p)/100,.42),v=Math.pow(t.fl*Math.abs(g)/100,.42),C=400*n(m)*y/(y+27.13),P=400*n(p)*b/(b+27.13),w=400*n(g)*v/(v+27.13),x=(11*C+-12*P+w)/11,k=(C+P-2*w)/9,S=(20*C+20*P+21*w)/20,M=(40*C+20*P+w)/20,O=180*Math.atan2(k,x)/Math.PI,_=O<0?O+360:O>=360?O-360:O,A=_*Math.PI/180,T=M*t.nbb,D=100*Math.pow(T/t.aw,t.c*t.z),F=4/t.c*Math.sqrt(D/100)*(t.aw+4)*t.fLRoot,B=_<20.14?_+360:_,H=5e4/13*(.25*(Math.cos(B*Math.PI/180+2)+3.8))*t.nc*t.ncb*Math.sqrt(x*x+k*k)/(S+.305),j=Math.pow(H,.9)*Math.pow(1.64-Math.pow(.29,t.n),.73),E=j*Math.sqrt(D/100),R=E*t.fLRoot,z=50*Math.sqrt(j*t.c/(t.aw+4)),$=(1+100*.007)*D/(1+.007*D),V=1/.0228*Math.log(1+.0228*R),N=V*Math.cos(A),G=V*Math.sin(A);return new L(_,E,D,F,R,z,$,N,G)}static fromJch(e,t,r){return L.fromJchInViewingConditions(e,t,r,R.DEFAULT)}static fromJchInViewingConditions(e,t,r,n){const o=4/n.c*Math.sqrt(e/100)*(n.aw+4)*n.fLRoot,a=t*n.fLRoot,i=t/Math.sqrt(e/100),s=50*Math.sqrt(i*n.c/(n.aw+4)),c=r*Math.PI/180,u=(1+100*.007)*e/(1+.007*e),l=1/.0228*Math.log(1+.0228*a),h=l*Math.cos(c),f=l*Math.sin(c);return new L(r,t,e,o,a,s,u,h,f)}static fromUcs(e,t,r){return L.fromUcsInViewingConditions(e,t,r,R.DEFAULT)}static fromUcsInViewingConditions(e,t,r,n){const o=t,a=r,i=Math.sqrt(o*o+a*a),s=(Math.exp(.0228*i)-1)/.0228/n.fLRoot;let c=Math.atan2(a,o)*(180/Math.PI);c<0&&(c+=360);const u=e/(1-.007*(e-100));return L.fromJchInViewingConditions(u,s,c,n)}toInt(){return this.viewed(R.DEFAULT)}viewed(e){const t=0===this.chroma||0===this.j?0:this.chroma/Math.sqrt(this.j/100),r=Math.pow(t/Math.pow(1.64-Math.pow(.29,e.n),.73),1/.9),o=this.hue*Math.PI/180,a=.25*(Math.cos(o+2)+3.8),i=e.aw*Math.pow(this.j/100,1/e.c/e.z),s=a*(5e4/13)*e.nc*e.ncb,c=i/e.nbb,u=Math.sin(o),l=Math.cos(o),h=23*(c+.305)*r/(23*s+11*r*l+108*r*u),f=h*l,d=h*u,m=(460*c+451*f+288*d)/1403,p=(460*c-891*f-261*d)/1403,g=(460*c-220*f-6300*d)/1403,y=Math.max(0,27.13*Math.abs(m)/(400-Math.abs(m))),b=n(m)*(100/e.fl)*Math.pow(y,1/.42),v=Math.max(0,27.13*Math.abs(p)/(400-Math.abs(p))),C=n(p)*(100/e.fl)*Math.pow(v,1/.42),P=Math.max(0,27.13*Math.abs(g)/(400-Math.abs(g))),x=n(g)*(100/e.fl)*Math.pow(P,1/.42),k=b/e.rgbD[0],S=C/e.rgbD[1],M=x/e.rgbD[2];return w(1.86206786*k-1.01125463*S+.14918677*M,.38752654*k+.62144744*S-.00897398*M,-.0158415*k-.03412294*S+1.04996444*M)}static fromXyzInViewingConditions(e,t,r,o){const a=.401288*e+.650173*t-.051461*r,i=-.250268*e+1.204414*t+.045854*r,s=-.002079*e+.048952*t+.953127*r,c=o.rgbD[0]*a,u=o.rgbD[1]*i,l=o.rgbD[2]*s,h=Math.pow(o.fl*Math.abs(c)/100,.42),f=Math.pow(o.fl*Math.abs(u)/100,.42),d=Math.pow(o.fl*Math.abs(l)/100,.42),m=400*n(c)*h/(h+27.13),p=400*n(u)*f/(f+27.13),g=400*n(l)*d/(d+27.13),y=(11*m+-12*p+g)/11,b=(m+p-2*g)/9,v=(20*m+20*p+21*g)/20,C=(40*m+20*p+g)/20,P=180*Math.atan2(b,y)/Math.PI,w=P<0?P+360:P>=360?P-360:P,x=w*Math.PI/180,k=C*o.nbb,S=100*Math.pow(k/o.aw,o.c*o.z),M=4/o.c*Math.sqrt(S/100)*(o.aw+4)*o.fLRoot,O=w<20.14?w+360:w,_=5e4/13*(1/4*(Math.cos(O*Math.PI/180+2)+3.8))*o.nc*o.ncb*Math.sqrt(y*y+b*b)/(v+.305),A=Math.pow(_,.9)*Math.pow(1.64-Math.pow(.29,o.n),.73),I=A*Math.sqrt(S/100),T=I*o.fLRoot,D=50*Math.sqrt(A*o.c/(o.aw+4)),F=(1+100*.007)*S/(1+.007*S),B=Math.log(1+.0228*T)/.0228,H=B*Math.cos(x),j=B*Math.sin(x);return new L(w,I,S,M,T,D,F,H,j)}xyzInViewingConditions(e){const t=0===this.chroma||0===this.j?0:this.chroma/Math.sqrt(this.j/100),r=Math.pow(t/Math.pow(1.64-Math.pow(.29,e.n),.73),1/.9),o=this.hue*Math.PI/180,a=.25*(Math.cos(o+2)+3.8),i=e.aw*Math.pow(this.j/100,1/e.c/e.z),s=a*(5e4/13)*e.nc*e.ncb,c=i/e.nbb,u=Math.sin(o),l=Math.cos(o),h=23*(c+.305)*r/(23*s+11*r*l+108*r*u),f=h*l,d=h*u,m=(460*c+451*f+288*d)/1403,p=(460*c-891*f-261*d)/1403,g=(460*c-220*f-6300*d)/1403,y=Math.max(0,27.13*Math.abs(m)/(400-Math.abs(m))),b=n(m)*(100/e.fl)*Math.pow(y,1/.42),v=Math.max(0,27.13*Math.abs(p)/(400-Math.abs(p))),C=n(p)*(100/e.fl)*Math.pow(v,1/.42),P=Math.max(0,27.13*Math.abs(g)/(400-Math.abs(g))),w=n(g)*(100/e.fl)*Math.pow(P,1/.42),x=b/e.rgbD[0],k=C/e.rgbD[1],S=w/e.rgbD[2];return[1.86206786*x-1.01125463*k+.14918677*S,.38752654*x+.62144744*k-.00897398*S,-.0158415*x-.03412294*k+1.04996444*S]}}class z{static sanitizeRadians(e){return(e+8*Math.PI)%(2*Math.PI)}static trueDelinearized(e){const t=e/100;let r=0;return r=t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,255*r}static chromaticAdaptation(e){const t=Math.pow(Math.abs(e),.42);return 400*n(e)*t/(t+27.13)}static hueOf(e){const t=h(e,z.SCALED_DISCOUNT_FROM_LINRGB),r=z.chromaticAdaptation(t[0]),n=z.chromaticAdaptation(t[1]),o=z.chromaticAdaptation(t[2]),a=(11*r+-12*n+o)/11,i=(r+n-2*o)/9;return Math.atan2(i,a)}static areInCyclicOrder(e,t,r){return z.sanitizeRadians(t-e)<z.sanitizeRadians(r-e)}static intercept(e,t,r){return(t-e)/(r-e)}static lerpPoint(e,t,r){return[e[0]+(r[0]-e[0])*t,e[1]+(r[1]-e[1])*t,e[2]+(r[2]-e[2])*t]}static setCoordinate(e,t,r,n){const o=z.intercept(e[n],t,r[n]);return z.lerpPoint(e,o,r)}static isBounded(e){return 0<=e&&e<=100}static nthVertex(e,t){const r=z.Y_FROM_LINRGB[0],n=z.Y_FROM_LINRGB[1],o=z.Y_FROM_LINRGB[2],a=t%4<=1?0:100,i=t%2==0?0:100;if(t<4){const t=a,s=i,c=(e-t*n-s*o)/r;return z.isBounded(c)?[c,t,s]:[-1,-1,-1]}if(t<8){const t=a,s=i,c=(e-s*r-t*o)/n;return z.isBounded(c)?[s,c,t]:[-1,-1,-1]}{const t=a,s=i,c=(e-t*r-s*n)/o;return z.isBounded(c)?[t,s,c]:[-1,-1,-1]}}static bisectToSegment(e,t){let r=[-1,-1,-1],n=r,o=0,a=0,i=!1,s=!0;for(let c=0;c<12;c++){const u=z.nthVertex(e,c);if(u[0]<0)continue;const l=z.hueOf(u);i?(s||z.areInCyclicOrder(o,l,a))&&(s=!1,z.areInCyclicOrder(o,t,l)?(n=u,a=l):(r=u,o=l)):(r=u,n=u,o=l,a=l,i=!0)}return[r,n]}static midpoint(e,t){return[(e[0]+t[0])/2,(e[1]+t[1])/2,(e[2]+t[2])/2]}static criticalPlaneBelow(e){return Math.floor(e-.5)}static criticalPlaneAbove(e){return Math.ceil(e-.5)}static bisectToLimit(e,t){const r=z.bisectToSegment(e,t);let n=r[0],o=z.hueOf(n),a=r[1];for(let e=0;e<3;e++)if(n[e]!==a[e]){let r=-1,i=255;n[e]<a[e]?(r=z.criticalPlaneBelow(z.trueDelinearized(n[e])),i=z.criticalPlaneAbove(z.trueDelinearized(a[e]))):(r=z.criticalPlaneAbove(z.trueDelinearized(n[e])),i=z.criticalPlaneBelow(z.trueDelinearized(a[e])));for(let s=0;s<8&&!(Math.abs(i-r)<=1);s++){const s=Math.floor((r+i)/2),c=z.CRITICAL_PLANES[s],u=z.setCoordinate(n,c,a,e),l=z.hueOf(u);z.areInCyclicOrder(o,t,l)?(a=u,i=s):(n=u,o=l,r=s)}}return z.midpoint(n,a)}static inverseChromaticAdaptation(e){const t=Math.abs(e),r=Math.max(0,27.13*t/(400-t));return n(e)*Math.pow(r,1/.42)}static findResultByJ(e,t,r){let n=11*Math.sqrt(r);const o=R.DEFAULT,a=1/Math.pow(1.64-Math.pow(.29,o.n),.73),i=.25*(Math.cos(e+2)+3.8)*(5e4/13)*o.nc*o.ncb,s=Math.sin(e),c=Math.cos(e);for(let e=0;e<5;e++){const u=n/100,l=0===t||0===n?0:t/Math.sqrt(u),f=Math.pow(l*a,1/.9),d=o.aw*Math.pow(u,1/o.c/o.z)/o.nbb,m=23*(d+.305)*f/(23*i+11*f*c+108*f*s),p=m*c,y=m*s,b=(460*d+451*p+288*y)/1403,v=(460*d-891*p-261*y)/1403,C=(460*d-220*p-6300*y)/1403,P=h([z.inverseChromaticAdaptation(b),z.inverseChromaticAdaptation(v),z.inverseChromaticAdaptation(C)],z.LINRGB_FROM_SCALED_DISCOUNT);if(P[0]<0||P[1]<0||P[2]<0)return 0;const w=z.Y_FROM_LINRGB[0],x=z.Y_FROM_LINRGB[1],k=z.Y_FROM_LINRGB[2],S=w*P[0]+x*P[1]+k*P[2];if(S<=0)return 0;if(4===e||Math.abs(S-r)<.002)return P[0]>100.01||P[1]>100.01||P[2]>100.01?0:g(P);n-=(S-r)*n/(2*S)}return 0}static solveToInt(e,t,r){if(t<1e-4||r<1e-4||r>99.9999)return M(r);const n=(e=c(e))/180*Math.PI,o=_(r),a=z.findResultByJ(n,t,o);return 0!==a?a:g(z.bisectToLimit(o,n))}static solveToCam(e,t,r){return L.fromInt(z.solveToInt(e,t,r))}}z.SCALED_DISCOUNT_FROM_LINRGB=[[.001200833568784504,.002389694492170889,.0002795742885861124],[.0005891086651375999,.0029785502573438758,.0003270666104008398],[.00010146692491640572,.0005364214359186694,.0032979401770712076]],z.LINRGB_FROM_SCALED_DISCOUNT=[[1373.2198709594231,-1100.4251190754821,-7.278681089101213],[-271.815969077903,559.6580465940733,-32.46047482791194],[1.9622899599665666,-57.173814538844006,308.7233197812385]],z.Y_FROM_LINRGB=[.2126,.7152,.0722],z.CRITICAL_PLANES=[.015176349177441876,.045529047532325624,.07588174588720938,.10623444424209313,.13658714259697685,.16693984095186062,.19729253930674434,.2276452376616281,.2579979360165119,.28835063437139563,.3188300904430532,.350925934958123,.3848314933096426,.42057480301049466,.458183274052838,.4976837250274023,.5391024159806381,.5824650784040898,.6277969426914107,.6751227633498623,.7244668422128921,.775853049866786,.829304845476233,.8848452951698498,.942497089126609,1.0022825574869039,1.0642236851973577,1.1283421258858297,1.1946592148522128,1.2631959812511864,1.3339731595349034,1.407011200216447,1.4823302800086415,1.5599503113873272,1.6398909516233677,1.7221716113234105,1.8068114625156377,1.8938294463134073,1.9832442801866852,2.075074464868551,2.1693382909216234,2.2660538449872063,2.36523901573795,2.4669114995532007,2.5710888059345764,2.6777882626779785,2.7870270208169257,2.898822059350997,3.0131901897720907,3.1301480604002863,3.2497121605402226,3.3718988244681087,3.4967242352587946,3.624204428461639,3.754355295633311,3.887192587735158,4.022731918402185,4.160988767090289,4.301978482107941,4.445716283538092,4.592217266055746,4.741496401646282,4.893568542229298,5.048448422192488,5.20615066083972,5.3666897647573375,5.5300801301023865,5.696336044816294,5.865471690767354,6.037501145825082,6.212438385869475,6.390297286737924,6.571091626112461,6.7548350853498045,6.941541251256611,7.131223617812143,7.323895587840543,7.5195704746346665,7.7182615035334345,7.919981813454504,8.124744458384042,8.332562408825165,8.543448553206703,8.757415699253682,8.974476575321063,9.194643831691977,9.417930041841839,9.644347703669503,9.873909240696694,10.106627003236781,10.342513269534024,10.58158024687427,10.8238400726681,11.069304815507364,11.317986476196008,11.569896988756009,11.825048221409341,12.083451977536606,12.345119996613247,12.610063955123938,12.878295467455942,13.149826086772048,13.42466730586372,13.702830557985108,13.984327217668513,14.269168601521828,14.55736596900856,14.848930523210871,15.143873411576273,15.44220572664832,15.743938506781891,16.04908273684337,16.35764934889634,16.66964922287304,16.985093187232053,17.30399201960269,17.62635644741625,17.95219714852476,18.281524751807332,18.614349837764564,18.95068293910138,19.290534541298456,19.633915083172692,19.98083495742689,20.331304511189067,20.685334046541502,21.042933821039977,21.404114048223256,21.76888489811322,22.137256497705877,22.50923893145328,22.884842241736916,23.264076429332462,23.6469514538663,24.033477234264016,24.42366364919083,24.817520537484558,25.21505769858089,25.61628489293138,26.021211842414342,26.429848230738664,26.842203703840827,27.258287870275353,27.678110301598522,28.10168053274597,28.529008062403893,28.96010235337422,29.39497283293396,29.83362889318845,30.276079891419332,30.722335150426627,31.172403958865512,31.62629557157785,32.08401920991837,32.54558406207592,33.010999283389665,33.4802739966603,33.953417292456834,34.430438229418264,34.911345834551085,35.39614910352207,35.88485700094671,36.37747846067349,36.87402238606382,37.37449765026789,37.87891309649659,38.38727753828926,38.89959975977785,39.41588851594697,39.93615253289054,40.460400508064545,40.98864111053629,41.520882981230194,42.05713473317016,42.597404951718396,43.141702194811224,43.6900349931913,44.24241185063697,44.798841244188324,45.35933162437017,45.92389141541209,46.49252901546552,47.065252796817916,47.64207110610409,48.22299226451468,48.808024568002054,49.3971762874833,49.9904556690408,50.587870934119984,51.189430279724725,51.79514187861014,52.40501387947288,53.0190544071392,53.637271562750364,54.259673423945976,54.88626804504493,55.517063457223934,56.15206766869424,56.79128866487574,57.43473440856916,58.08241284012621,58.734331877617365,59.39049941699807,60.05092333227251,60.715611475655585,61.38457167773311,62.057811747619894,62.7353394731159,63.417162620860914,64.10328893648692,64.79372614476921,65.48848194977529,66.18756403501224,66.89098006357258,67.59873767827808,68.31084450182222,69.02730813691093,69.74813616640164,70.47333615344107,71.20291564160104,71.93688215501312,72.67524319850172,73.41800625771542,74.16517879925733,74.9167682708136,75.67278210128072,76.43322770089146,77.1981124613393,77.96744375590167,78.74122893956174,79.51947534912904,80.30219030335869,81.08938110306934,81.88105503125999,82.67721935322541,83.4778813166706,84.28304815182372,85.09272707154808,85.90692527145302,86.72564993000343,87.54890820862819,88.3767072518277,89.2090541872801,90.04595612594655,90.88742016217518,91.73345337380438,92.58406282226491,93.43925555268066,94.29903859396902,95.16341895893969,96.03240364439274,96.9059996312159,97.78421388448044,98.6670533535366,99.55452497210776];class ${static from(e,t,r){return new $(z.solveToInt(e,t,r))}static fromInt(e){return new $(e)}toInt(){return this.argb}get hue(){return this.internalHue}set hue(e){this.setInternalState(z.solveToInt(e,this.internalChroma,this.internalTone))}get chroma(){return this.internalChroma}set chroma(e){this.setInternalState(z.solveToInt(this.internalHue,e,this.internalTone))}get tone(){return this.internalTone}set tone(e){this.setInternalState(z.solveToInt(this.internalHue,this.internalChroma,e))}constructor(e){this.argb=e;const t=L.fromInt(e);this.internalHue=t.hue,this.internalChroma=t.chroma,this.internalTone=O(e),this.argb=e}setInternalState(e){const t=L.fromInt(e);this.internalHue=t.hue,this.internalChroma=t.chroma,this.internalTone=O(e),this.argb=e}inViewingConditions(e){const t=L.fromInt(this.toInt()).xyzInViewingConditions(e),r=L.fromXyzInViewingConditions(t[0],t[1],t[2],R.make());return $.from(r.hue,r.chroma,A(t[1]))}}class V{static harmonize(e,t){const r=$.fromInt(e),n=$.fromInt(t),o=l(r.hue,n.hue),a=Math.min(.5*o,15),i=c(r.hue+a*u(r.hue,n.hue));return $.from(i,r.chroma,r.tone).toInt()}static hctHue(e,t,r){const n=V.cam16Ucs(e,t,r),o=L.fromInt(n),a=L.fromInt(e);return $.from(o.hue,a.chroma,O(e)).toInt()}static cam16Ucs(e,t,r){const n=L.fromInt(e),o=L.fromInt(t),a=n.jstar,i=n.astar,s=n.bstar,c=a+(o.jstar-a)*r,u=i+(o.astar-i)*r,l=s+(o.bstar-s)*r;return L.fromUcs(c,u,l).toInt()}}class N{static ratioOfTones(e,t){return e=i(0,100,e),t=i(0,100,t),N.ratioOfYs(_(e),_(t))}static ratioOfYs(e,t){const r=e>t?e:t;return(r+5)/((r===t?e:t)+5)}static lighter(e,t){if(e<0||e>100)return-1;const r=_(e),n=t*(r+5)-5,o=N.ratioOfYs(n,r),a=Math.abs(o-t);if(o<t&&a>.04)return-1;const i=A(n)+.4;return i<0||i>100?-1:i}static darker(e,t){if(e<0||e>100)return-1;const r=_(e),n=(r+5)/t-5,o=N.ratioOfYs(r,n),a=Math.abs(o-t);if(o<t&&a>.04)return-1;const i=A(n)-.4;return i<0||i>100?-1:i}static lighterUnsafe(e,t){const r=N.lighter(e,t);return r<0?100:r}static darkerUnsafe(e,t){const r=N.darker(e,t);return r<0?0:r}}class G{static isDisliked(e){const t=Math.round(e.hue)>=90&&Math.round(e.hue)<=111,r=Math.round(e.chroma)>16,n=Math.round(e.tone)<65;return t&&r&&n}static fixIfDisliked(e){return G.isDisliked(e)?$.from(e.hue,e.chroma,70):e}}class q{static fromPalette(e){return new q(e.name??"",e.palette,e.tone,e.isBackground??!1,e.background,e.secondBackground,e.contrastCurve,e.toneDeltaPair)}constructor(e,t,r,n,o,a,i,s){if(this.name=e,this.palette=t,this.tone=r,this.isBackground=n,this.background=o,this.secondBackground=a,this.contrastCurve=i,this.toneDeltaPair=s,this.hctCache=new Map,!o&&a)throw new Error(`Color ${e} has secondBackgrounddefined, but background is not defined.`);if(!o&&i)throw new Error(`Color ${e} has contrastCurvedefined, but background is not defined.`);if(o&&!i)throw new Error(`Color ${e} has backgrounddefined, but contrastCurve is not defined.`)}getArgb(e){return this.getHct(e).toInt()}getHct(e){const t=this.hctCache.get(e);if(null!=t)return t;const r=this.getTone(e),n=this.palette(e).getHct(r);return this.hctCache.size>4&&this.hctCache.clear(),this.hctCache.set(e,n),n}getTone(e){const t=e.contrastLevel<0;if(this.toneDeltaPair){const r=this.toneDeltaPair(e),n=r.roleA,o=r.roleB,a=r.delta,s=r.polarity,c=r.stayTogether,u=this.background(e).getTone(e),l="nearer"===s||"lighter"===s&&!e.isDark||"darker"===s&&e.isDark,h=l?n:o,f=l?o:n,d=this.name===h.name,m=e.isDark?1:-1,p=h.contrastCurve.getContrast(e.contrastLevel),g=f.contrastCurve.getContrast(e.contrastLevel),y=h.tone(e);let b=N.ratioOfTones(u,y)>=p?y:q.foregroundTone(u,p);const v=f.tone(e);let C=N.ratioOfTones(u,v)>=g?v:q.foregroundTone(u,g);return t&&(b=q.foregroundTone(u,p),C=q.foregroundTone(u,g)),(C-b)*m>=a||(C=i(0,100,b+a*m),(C-b)*m>=a||(b=i(0,100,C-a*m))),50<=b&&b<60?m>0?(b=60,C=Math.max(C,b+a*m)):(b=49,C=Math.min(C,b+a*m)):50<=C&&C<60&&(c?m>0?(b=60,C=Math.max(C,b+a*m)):(b=49,C=Math.min(C,b+a*m)):C=m>0?60:49),d?b:C}{let r=this.tone(e);if(null==this.background)return r;const n=this.background(e).getTone(e),o=this.contrastCurve.getContrast(e.contrastLevel);if(N.ratioOfTones(n,r)>=o||(r=q.foregroundTone(n,o)),t&&(r=q.foregroundTone(n,o)),this.isBackground&&50<=r&&r<60&&(r=N.ratioOfTones(49,n)>=o?49:60),this.secondBackground){const[t,n]=[this.background,this.secondBackground],[a,i]=[t(e).getTone(e),n(e).getTone(e)],[s,c]=[Math.max(a,i),Math.min(a,i)];if(N.ratioOfTones(s,r)>=o&&N.ratioOfTones(c,r)>=o)return r;const u=N.lighter(s,o),l=N.darker(c,o),h=[];return-1!==u&&h.push(u),-1!==l&&h.push(l),q.tonePrefersLightForeground(a)||q.tonePrefersLightForeground(i)?u<0?100:u:1===h.length?h[0]:l<0?0:l}return r}}static foregroundTone(e,t){const r=N.lighterUnsafe(e,t),n=N.darkerUnsafe(e,t),o=N.ratioOfTones(r,e),a=N.ratioOfTones(n,e);if(q.tonePrefersLightForeground(e)){const e=Math.abs(o-a)<.1&&o<t&&a<t;return o>=t||o>=a||e?r:n}return a>=t||a>=o?n:r}static tonePrefersLightForeground(e){return Math.round(e)<60}static toneAllowsLightForeground(e){return Math.round(e)<=49}static enableLightForeground(e){return q.tonePrefersLightForeground(e)&&!q.toneAllowsLightForeground(e)?49:e}}var W;!function(e){e[e.MONOCHROME=0]="MONOCHROME",e[e.NEUTRAL=1]="NEUTRAL",e[e.TONAL_SPOT=2]="TONAL_SPOT",e[e.VIBRANT=3]="VIBRANT",e[e.EXPRESSIVE=4]="EXPRESSIVE",e[e.FIDELITY=5]="FIDELITY",e[e.CONTENT=6]="CONTENT",e[e.RAINBOW=7]="RAINBOW",e[e.FRUIT_SALAD=8]="FRUIT_SALAD"}(W||(W={}));class U{constructor(e,t,r,n){this.low=e,this.normal=t,this.medium=r,this.high=n}getContrast(e){return e<=-1?this.low:e<0?o(this.low,this.normal,(e- -1)/1):e<.5?o(this.normal,this.medium,(e-0)/.5):e<1?o(this.medium,this.high,(e-.5)/.5):this.high}}class Y{constructor(e,t,r,n,o){this.roleA=e,this.roleB=t,this.delta=r,this.polarity=n,this.stayTogether=o}}function J(e){return e.variant===W.FIDELITY||e.variant===W.CONTENT}function X(e){return e.variant===W.MONOCHROME}function K(e,t){const r=e.inViewingConditions(function(e){return R.make(void 0,void 0,e.isDark?30:80,void 0,void 0)}(t));return q.tonePrefersLightForeground(e.tone)&&!q.toneAllowsLightForeground(r.tone)?q.enableLightForeground(e.tone):q.enableLightForeground(r.tone)}class Z{static highestSurface(e){return e.isDark?Z.surfaceBright:Z.surfaceDim}}Z.contentAccentToneDelta=15,Z.primaryPaletteKeyColor=q.fromPalette({name:"primary_palette_key_color",palette:e=>e.primaryPalette,tone:e=>e.primaryPalette.keyColor.tone}),Z.secondaryPaletteKeyColor=q.fromPalette({name:"secondary_palette_key_color",palette:e=>e.secondaryPalette,tone:e=>e.secondaryPalette.keyColor.tone}),Z.tertiaryPaletteKeyColor=q.fromPalette({name:"tertiary_palette_key_color",palette:e=>e.tertiaryPalette,tone:e=>e.tertiaryPalette.keyColor.tone}),Z.neutralPaletteKeyColor=q.fromPalette({name:"neutral_palette_key_color",palette:e=>e.neutralPalette,tone:e=>e.neutralPalette.keyColor.tone}),Z.neutralVariantPaletteKeyColor=q.fromPalette({name:"neutral_variant_palette_key_color",palette:e=>e.neutralVariantPalette,tone:e=>e.neutralVariantPalette.keyColor.tone}),Z.background=q.fromPalette({name:"background",palette:e=>e.neutralPalette,tone:e=>e.isDark?6:98,isBackground:!0}),Z.onBackground=q.fromPalette({name:"on_background",palette:e=>e.neutralPalette,tone:e=>e.isDark?90:10,background:e=>Z.background,contrastCurve:new U(3,3,4.5,7)}),Z.surface=q.fromPalette({name:"surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?6:98,isBackground:!0}),Z.surfaceDim=q.fromPalette({name:"surface_dim",palette:e=>e.neutralPalette,tone:e=>e.isDark?6:87,isBackground:!0}),Z.surfaceBright=q.fromPalette({name:"surface_bright",palette:e=>e.neutralPalette,tone:e=>e.isDark?24:98,isBackground:!0}),Z.surfaceContainerLowest=q.fromPalette({name:"surface_container_lowest",palette:e=>e.neutralPalette,tone:e=>e.isDark?4:100,isBackground:!0}),Z.surfaceContainerLow=q.fromPalette({name:"surface_container_low",palette:e=>e.neutralPalette,tone:e=>e.isDark?10:96,isBackground:!0}),Z.surfaceContainer=q.fromPalette({name:"surface_container",palette:e=>e.neutralPalette,tone:e=>e.isDark?12:94,isBackground:!0}),Z.surfaceContainerHigh=q.fromPalette({name:"surface_container_high",palette:e=>e.neutralPalette,tone:e=>e.isDark?17:92,isBackground:!0}),Z.surfaceContainerHighest=q.fromPalette({name:"surface_container_highest",palette:e=>e.neutralPalette,tone:e=>e.isDark?22:90,isBackground:!0}),Z.onSurface=q.fromPalette({name:"on_surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?90:10,background:e=>Z.highestSurface(e),contrastCurve:new U(4.5,7,11,21)}),Z.surfaceVariant=q.fromPalette({name:"surface_variant",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?30:90,isBackground:!0}),Z.onSurfaceVariant=q.fromPalette({name:"on_surface_variant",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?80:30,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11)}),Z.inverseSurface=q.fromPalette({name:"inverse_surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?90:20}),Z.inverseOnSurface=q.fromPalette({name:"inverse_on_surface",palette:e=>e.neutralPalette,tone:e=>e.isDark?20:95,background:e=>Z.inverseSurface,contrastCurve:new U(4.5,7,11,21)}),Z.outline=q.fromPalette({name:"outline",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?60:50,background:e=>Z.highestSurface(e),contrastCurve:new U(1.5,3,4.5,7)}),Z.outlineVariant=q.fromPalette({name:"outline_variant",palette:e=>e.neutralVariantPalette,tone:e=>e.isDark?30:80,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7)}),Z.shadow=q.fromPalette({name:"shadow",palette:e=>e.neutralPalette,tone:e=>0}),Z.scrim=q.fromPalette({name:"scrim",palette:e=>e.neutralPalette,tone:e=>0}),Z.surfaceTint=q.fromPalette({name:"surface_tint",palette:e=>e.primaryPalette,tone:e=>e.isDark?80:40,isBackground:!0}),Z.primary=q.fromPalette({name:"primary",palette:e=>e.primaryPalette,tone:e=>X(e)?e.isDark?100:0:e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.primaryContainer,Z.primary,15,"nearer",!1)}),Z.onPrimary=q.fromPalette({name:"on_primary",palette:e=>e.primaryPalette,tone:e=>X(e)?e.isDark?10:90:e.isDark?20:100,background:e=>Z.primary,contrastCurve:new U(4.5,7,11,21)}),Z.primaryContainer=q.fromPalette({name:"primary_container",palette:e=>e.primaryPalette,tone:e=>J(e)?K(e.sourceColorHct,e):X(e)?e.isDark?85:25:e.isDark?30:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.primaryContainer,Z.primary,15,"nearer",!1)}),Z.onPrimaryContainer=q.fromPalette({name:"on_primary_container",palette:e=>e.primaryPalette,tone:e=>J(e)?q.foregroundTone(Z.primaryContainer.tone(e),4.5):X(e)?e.isDark?0:100:e.isDark?90:10,background:e=>Z.primaryContainer,contrastCurve:new U(4.5,7,11,21)}),Z.inversePrimary=q.fromPalette({name:"inverse_primary",palette:e=>e.primaryPalette,tone:e=>e.isDark?40:80,background:e=>Z.inverseSurface,contrastCurve:new U(3,4.5,7,11)}),Z.secondary=q.fromPalette({name:"secondary",palette:e=>e.secondaryPalette,tone:e=>e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.secondaryContainer,Z.secondary,15,"nearer",!1)}),Z.onSecondary=q.fromPalette({name:"on_secondary",palette:e=>e.secondaryPalette,tone:e=>X(e)?e.isDark?10:100:e.isDark?20:100,background:e=>Z.secondary,contrastCurve:new U(4.5,7,11,21)}),Z.secondaryContainer=q.fromPalette({name:"secondary_container",palette:e=>e.secondaryPalette,tone:e=>{const t=e.isDark?30:90;if(X(e))return e.isDark?30:85;if(!J(e))return t;let r=function(e,t,r,n){let o=r,a=$.from(e,t,r);if(a.chroma<t){let r=a.chroma;for(;a.chroma<t;){o+=n?-1:1;const i=$.from(e,t,o);if(r>i.chroma)break;if(Math.abs(i.chroma-t)<.4)break;Math.abs(i.chroma-t)<Math.abs(a.chroma-t)&&(a=i),r=Math.max(r,i.chroma)}}return o}(e.secondaryPalette.hue,e.secondaryPalette.chroma,t,!e.isDark);return r=K(e.secondaryPalette.getHct(r),e),r},isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.secondaryContainer,Z.secondary,15,"nearer",!1)}),Z.onSecondaryContainer=q.fromPalette({name:"on_secondary_container",palette:e=>e.secondaryPalette,tone:e=>J(e)?q.foregroundTone(Z.secondaryContainer.tone(e),4.5):e.isDark?90:10,background:e=>Z.secondaryContainer,contrastCurve:new U(4.5,7,11,21)}),Z.tertiary=q.fromPalette({name:"tertiary",palette:e=>e.tertiaryPalette,tone:e=>X(e)?e.isDark?90:25:e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.tertiaryContainer,Z.tertiary,15,"nearer",!1)}),Z.onTertiary=q.fromPalette({name:"on_tertiary",palette:e=>e.tertiaryPalette,tone:e=>X(e)?e.isDark?10:90:e.isDark?20:100,background:e=>Z.tertiary,contrastCurve:new U(4.5,7,11,21)}),Z.tertiaryContainer=q.fromPalette({name:"tertiary_container",palette:e=>e.tertiaryPalette,tone:e=>{if(X(e))return e.isDark?60:49;if(!J(e))return e.isDark?30:90;const t=K(e.tertiaryPalette.getHct(e.sourceColorHct.tone),e),r=e.tertiaryPalette.getHct(t);return G.fixIfDisliked(r).tone},isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.tertiaryContainer,Z.tertiary,15,"nearer",!1)}),Z.onTertiaryContainer=q.fromPalette({name:"on_tertiary_container",palette:e=>e.tertiaryPalette,tone:e=>X(e)?e.isDark?0:100:J(e)?q.foregroundTone(Z.tertiaryContainer.tone(e),4.5):e.isDark?90:10,background:e=>Z.tertiaryContainer,contrastCurve:new U(4.5,7,11,21)}),Z.error=q.fromPalette({name:"error",palette:e=>e.errorPalette,tone:e=>e.isDark?80:40,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(3,4.5,7,11),toneDeltaPair:e=>new Y(Z.errorContainer,Z.error,15,"nearer",!1)}),Z.onError=q.fromPalette({name:"on_error",palette:e=>e.errorPalette,tone:e=>e.isDark?20:100,background:e=>Z.error,contrastCurve:new U(4.5,7,11,21)}),Z.errorContainer=q.fromPalette({name:"error_container",palette:e=>e.errorPalette,tone:e=>e.isDark?30:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.errorContainer,Z.error,15,"nearer",!1)}),Z.onErrorContainer=q.fromPalette({name:"on_error_container",palette:e=>e.errorPalette,tone:e=>e.isDark?90:10,background:e=>Z.errorContainer,contrastCurve:new U(4.5,7,11,21)}),Z.primaryFixed=q.fromPalette({name:"primary_fixed",palette:e=>e.primaryPalette,tone:e=>X(e)?40:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.primaryFixed,Z.primaryFixedDim,10,"lighter",!0)}),Z.primaryFixedDim=q.fromPalette({name:"primary_fixed_dim",palette:e=>e.primaryPalette,tone:e=>X(e)?30:80,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.primaryFixed,Z.primaryFixedDim,10,"lighter",!0)}),Z.onPrimaryFixed=q.fromPalette({name:"on_primary_fixed",palette:e=>e.primaryPalette,tone:e=>X(e)?100:10,background:e=>Z.primaryFixedDim,secondBackground:e=>Z.primaryFixed,contrastCurve:new U(4.5,7,11,21)}),Z.onPrimaryFixedVariant=q.fromPalette({name:"on_primary_fixed_variant",palette:e=>e.primaryPalette,tone:e=>X(e)?90:30,background:e=>Z.primaryFixedDim,secondBackground:e=>Z.primaryFixed,contrastCurve:new U(3,4.5,7,11)}),Z.secondaryFixed=q.fromPalette({name:"secondary_fixed",palette:e=>e.secondaryPalette,tone:e=>X(e)?80:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.secondaryFixed,Z.secondaryFixedDim,10,"lighter",!0)}),Z.secondaryFixedDim=q.fromPalette({name:"secondary_fixed_dim",palette:e=>e.secondaryPalette,tone:e=>X(e)?70:80,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.secondaryFixed,Z.secondaryFixedDim,10,"lighter",!0)}),Z.onSecondaryFixed=q.fromPalette({name:"on_secondary_fixed",palette:e=>e.secondaryPalette,tone:e=>10,background:e=>Z.secondaryFixedDim,secondBackground:e=>Z.secondaryFixed,contrastCurve:new U(4.5,7,11,21)}),Z.onSecondaryFixedVariant=q.fromPalette({name:"on_secondary_fixed_variant",palette:e=>e.secondaryPalette,tone:e=>X(e)?25:30,background:e=>Z.secondaryFixedDim,secondBackground:e=>Z.secondaryFixed,contrastCurve:new U(3,4.5,7,11)}),Z.tertiaryFixed=q.fromPalette({name:"tertiary_fixed",palette:e=>e.tertiaryPalette,tone:e=>X(e)?40:90,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.tertiaryFixed,Z.tertiaryFixedDim,10,"lighter",!0)}),Z.tertiaryFixedDim=q.fromPalette({name:"tertiary_fixed_dim",palette:e=>e.tertiaryPalette,tone:e=>X(e)?30:80,isBackground:!0,background:e=>Z.highestSurface(e),contrastCurve:new U(1,1,3,7),toneDeltaPair:e=>new Y(Z.tertiaryFixed,Z.tertiaryFixedDim,10,"lighter",!0)}),Z.onTertiaryFixed=q.fromPalette({name:"on_tertiary_fixed",palette:e=>e.tertiaryPalette,tone:e=>X(e)?100:10,background:e=>Z.tertiaryFixedDim,secondBackground:e=>Z.tertiaryFixed,contrastCurve:new U(4.5,7,11,21)}),Z.onTertiaryFixedVariant=q.fromPalette({name:"on_tertiary_fixed_variant",palette:e=>e.tertiaryPalette,tone:e=>X(e)?90:30,background:e=>Z.tertiaryFixedDim,secondBackground:e=>Z.tertiaryFixed,contrastCurve:new U(3,4.5,7,11)});class Q{static fromInt(e){const t=$.fromInt(e);return Q.fromHct(t)}static fromHct(e){return new Q(e.hue,e.chroma,e)}static fromHueAndChroma(e,t){return new Q(e,t,Q.createKeyColor(e,t))}constructor(e,t,r){this.hue=e,this.chroma=t,this.keyColor=r,this.cache=new Map}static createKeyColor(e,t){let r=$.from(e,t,50),n=Math.abs(r.chroma-t);for(let o=1;o<50;o+=1){if(Math.round(t)===Math.round(r.chroma))return r;const a=$.from(e,t,50+o),i=Math.abs(a.chroma-t);i<n&&(n=i,r=a);const s=$.from(e,t,50-o),c=Math.abs(s.chroma-t);c<n&&(n=c,r=s)}return r}tone(e){let t=this.cache.get(e);return void 0===t&&(t=$.from(this.hue,this.chroma,e).toInt(),this.cache.set(e,t)),t}getHct(e){return $.fromInt(this.tone(e))}}class ee{static of(e){return new ee(e,!1)}static contentOf(e){return new ee(e,!0)}static fromColors(e){return ee.createPaletteFromColors(!1,e)}static contentFromColors(e){return ee.createPaletteFromColors(!0,e)}static createPaletteFromColors(e,t){const r=new ee(t.primary,e);if(t.secondary){const n=new ee(t.secondary,e);r.a2=n.a1}if(t.tertiary){const n=new ee(t.tertiary,e);r.a3=n.a1}if(t.error){const n=new ee(t.error,e);r.error=n.a1}if(t.neutral){const n=new ee(t.neutral,e);r.n1=n.n1}if(t.neutralVariant){const n=new ee(t.neutralVariant,e);r.n2=n.n2}return r}constructor(e,t){const r=$.fromInt(e),n=r.hue,o=r.chroma;t?(this.a1=Q.fromHueAndChroma(n,o),this.a2=Q.fromHueAndChroma(n,o/3),this.a3=Q.fromHueAndChroma(n+60,o/2),this.n1=Q.fromHueAndChroma(n,Math.min(o/12,4)),this.n2=Q.fromHueAndChroma(n,Math.min(o/6,8))):(this.a1=Q.fromHueAndChroma(n,Math.max(48,o)),this.a2=Q.fromHueAndChroma(n,16),this.a3=Q.fromHueAndChroma(n+60,24),this.n1=Q.fromHueAndChroma(n,4),this.n2=Q.fromHueAndChroma(n,8)),this.error=Q.fromHueAndChroma(25,84)}}class te{fromInt(e){return S(e)}toInt(e){return k(e[0],e[1],e[2])}distance(e,t){const r=e[0]-t[0],n=e[1]-t[1],o=e[2]-t[2];return r*r+n*n+o*o}}class re{static quantize(e,t,r){const n=new Map,o=new Array,a=new Array,i=new te;let s=0;for(let t=0;t<e.length;t++){const r=e[t],c=n.get(r);void 0===c?(s++,o.push(i.fromInt(r)),a.push(r),n.set(r,1)):n.set(r,c+1)}const c=new Array;for(let e=0;e<s;e++){const t=a[e],r=n.get(t);void 0!==r&&(c[e]=r)}let u=Math.min(r,s);t.length>0&&(u=Math.min(u,t.length));const l=new Array;for(let e=0;e<t.length;e++)l.push(i.fromInt(t[e]));const h=u-l.length;if(0===t.length&&h>0)for(let e=0;e<h;e++){const e=100*Math.random(),t=201*Math.random()-100,r=201*Math.random()-100;l.push(new Array(e,t,r))}const f=new Array;for(let e=0;e<s;e++)f.push(Math.floor(Math.random()*u));const d=new Array;for(let e=0;e<u;e++){d.push(new Array);for(let t=0;t<u;t++)d[e].push(0)}const m=new Array;for(let e=0;e<u;e++){m.push(new Array);for(let t=0;t<u;t++)m[e].push(new ne)}const p=new Array;for(let e=0;e<u;e++)p.push(0);for(let e=0;e<10;e++){for(let e=0;e<u;e++){for(let t=e+1;t<u;t++){const r=i.distance(l[e],l[t]);m[t][e].distance=r,m[t][e].index=e,m[e][t].distance=r,m[e][t].index=t}m[e].sort();for(let t=0;t<u;t++)d[e][t]=m[e][t].index}let t=0;for(let e=0;e<s;e++){const r=o[e],n=f[e],a=l[n],s=i.distance(r,a);let c=s,h=-1;for(let e=0;e<u;e++){if(m[n][e].distance>=4*s)continue;const t=i.distance(r,l[e]);t<c&&(c=t,h=e)}-1!==h&&Math.abs(Math.sqrt(c)-Math.sqrt(s))>3&&(t++,f[e]=h)}if(0===t&&0!==e)break;const r=new Array(u).fill(0),n=new Array(u).fill(0),a=new Array(u).fill(0);for(let e=0;e<u;e++)p[e]=0;for(let e=0;e<s;e++){const t=f[e],i=o[e],s=c[e];p[t]+=s,r[t]+=i[0]*s,n[t]+=i[1]*s,a[t]+=i[2]*s}for(let e=0;e<u;e++){const t=p[e];if(0===t){l[e]=[0,0,0];continue}const o=r[e]/t,i=n[e]/t,s=a[e]/t;l[e]=[o,i,s]}}const g=new Map;for(let e=0;e<u;e++){const t=p[e];if(0===t)continue;const r=i.toInt(l[e]);g.has(r)||g.set(r,t)}return g}}class ne{constructor(){this.distance=-1,this.index=-1}}class oe{static quantize(e){const t=new Map;for(let r=0;r<e.length;r++){const n=e[r];y(n)<255||t.set(n,(t.get(n)??0)+1)}return t}}const ae=33,ie=35937,se="red",ce="green",ue="blue";class le{constructor(e=[],t=[],r=[],n=[],o=[],a=[]){this.weights=e,this.momentsR=t,this.momentsG=r,this.momentsB=n,this.moments=o,this.cubes=a}quantize(e,t){this.constructHistogram(e),this.computeMoments();const r=this.createBoxes(t);return this.createResult(r.resultCount)}constructHistogram(e){this.weights=Array.from({length:ie}).fill(0),this.momentsR=Array.from({length:ie}).fill(0),this.momentsG=Array.from({length:ie}).fill(0),this.momentsB=Array.from({length:ie}).fill(0),this.moments=Array.from({length:ie}).fill(0);const t=oe.quantize(e);for(const[e,r]of t.entries()){const t=b(e),n=v(e),o=C(e),a=3,i=1+(t>>a),s=1+(n>>a),c=1+(o>>a),u=this.getIndex(i,s,c);this.weights[u]=(this.weights[u]??0)+r,this.momentsR[u]+=r*t,this.momentsG[u]+=r*n,this.momentsB[u]+=r*o,this.moments[u]+=r*(t*t+n*n+o*o)}}computeMoments(){for(let e=1;e<ae;e++){const t=Array.from({length:ae}).fill(0),r=Array.from({length:ae}).fill(0),n=Array.from({length:ae}).fill(0),o=Array.from({length:ae}).fill(0),a=Array.from({length:ae}).fill(0);for(let i=1;i<ae;i++){let s=0,c=0,u=0,l=0,h=0;for(let f=1;f<ae;f++){const d=this.getIndex(e,i,f);s+=this.weights[d],c+=this.momentsR[d],u+=this.momentsG[d],l+=this.momentsB[d],h+=this.moments[d],t[f]+=s,r[f]+=c,n[f]+=u,o[f]+=l,a[f]+=h;const m=this.getIndex(e-1,i,f);this.weights[d]=this.weights[m]+t[f],this.momentsR[d]=this.momentsR[m]+r[f],this.momentsG[d]=this.momentsG[m]+n[f],this.momentsB[d]=this.momentsB[m]+o[f],this.moments[d]=this.moments[m]+a[f]}}}}createBoxes(e){this.cubes=Array.from({length:e}).fill(0).map((()=>new he));const t=Array.from({length:e}).fill(0);this.cubes[0].r0=0,this.cubes[0].g0=0,this.cubes[0].b0=0,this.cubes[0].r1=32,this.cubes[0].g1=32,this.cubes[0].b1=32;let r=e,n=0;for(let o=1;o<e;o++){this.cut(this.cubes[n],this.cubes[o])?(t[n]=this.cubes[n].vol>1?this.variance(this.cubes[n]):0,t[o]=this.cubes[o].vol>1?this.variance(this.cubes[o]):0):(t[n]=0,o--),n=0;let e=t[0];for(let r=1;r<=o;r++)t[r]>e&&(e=t[r],n=r);if(e<=0){r=o+1;break}}return new fe(e,r)}createResult(e){const t=[];for(let r=0;r<e;++r){const e=this.cubes[r],n=this.volume(e,this.weights);if(n>0){const r=255<<24|(255&Math.round(this.volume(e,this.momentsR)/n))<<16|(255&Math.round(this.volume(e,this.momentsG)/n))<<8|255&Math.round(this.volume(e,this.momentsB)/n);t.push(r)}}return t}variance(e){const t=this.volume(e,this.momentsR),r=this.volume(e,this.momentsG),n=this.volume(e,this.momentsB);return this.moments[this.getIndex(e.r1,e.g1,e.b1)]-this.moments[this.getIndex(e.r1,e.g1,e.b0)]-this.moments[this.getIndex(e.r1,e.g0,e.b1)]+this.moments[this.getIndex(e.r1,e.g0,e.b0)]-this.moments[this.getIndex(e.r0,e.g1,e.b1)]+this.moments[this.getIndex(e.r0,e.g1,e.b0)]+this.moments[this.getIndex(e.r0,e.g0,e.b1)]-this.moments[this.getIndex(e.r0,e.g0,e.b0)]-(t*t+r*r+n*n)/this.volume(e,this.weights)}cut(e,t){const r=this.volume(e,this.momentsR),n=this.volume(e,this.momentsG),o=this.volume(e,this.momentsB),a=this.volume(e,this.weights),i=this.maximize(e,se,e.r0+1,e.r1,r,n,o,a),s=this.maximize(e,ce,e.g0+1,e.g1,r,n,o,a),c=this.maximize(e,ue,e.b0+1,e.b1,r,n,o,a);let u;const l=i.maximum,h=s.maximum,f=c.maximum;if(l>=h&&l>=f){if(i.cutLocation<0)return!1;u=se}else u=h>=l&&h>=f?ce:ue;switch(t.r1=e.r1,t.g1=e.g1,t.b1=e.b1,u){case se:e.r1=i.cutLocation,t.r0=e.r1,t.g0=e.g0,t.b0=e.b0;break;case ce:e.g1=s.cutLocation,t.r0=e.r0,t.g0=e.g1,t.b0=e.b0;break;case ue:e.b1=c.cutLocation,t.r0=e.r0,t.g0=e.g0,t.b0=e.b1;break;default:throw new Error("unexpected direction "+u)}return e.vol=(e.r1-e.r0)*(e.g1-e.g0)*(e.b1-e.b0),t.vol=(t.r1-t.r0)*(t.g1-t.g0)*(t.b1-t.b0),!0}maximize(e,t,r,n,o,a,i,s){const c=this.bottom(e,t,this.momentsR),u=this.bottom(e,t,this.momentsG),l=this.bottom(e,t,this.momentsB),h=this.bottom(e,t,this.weights);let f=0,d=-1,m=0,p=0,g=0,y=0;for(let b=r;b<n;b++){if(m=c+this.top(e,t,b,this.momentsR),p=u+this.top(e,t,b,this.momentsG),g=l+this.top(e,t,b,this.momentsB),y=h+this.top(e,t,b,this.weights),0===y)continue;let r=1*(m*m+p*p+g*g),n=1*y,v=r/n;m=o-m,p=a-p,g=i-g,y=s-y,0!==y&&(r=1*(m*m+p*p+g*g),n=1*y,v+=r/n,v>f&&(f=v,d=b))}return new de(d,f)}volume(e,t){return t[this.getIndex(e.r1,e.g1,e.b1)]-t[this.getIndex(e.r1,e.g1,e.b0)]-t[this.getIndex(e.r1,e.g0,e.b1)]+t[this.getIndex(e.r1,e.g0,e.b0)]-t[this.getIndex(e.r0,e.g1,e.b1)]+t[this.getIndex(e.r0,e.g1,e.b0)]+t[this.getIndex(e.r0,e.g0,e.b1)]-t[this.getIndex(e.r0,e.g0,e.b0)]}bottom(e,t,r){switch(t){case se:return-r[this.getIndex(e.r0,e.g1,e.b1)]+r[this.getIndex(e.r0,e.g1,e.b0)]+r[this.getIndex(e.r0,e.g0,e.b1)]-r[this.getIndex(e.r0,e.g0,e.b0)];case ce:return-r[this.getIndex(e.r1,e.g0,e.b1)]+r[this.getIndex(e.r1,e.g0,e.b0)]+r[this.getIndex(e.r0,e.g0,e.b1)]-r[this.getIndex(e.r0,e.g0,e.b0)];case ue:return-r[this.getIndex(e.r1,e.g1,e.b0)]+r[this.getIndex(e.r1,e.g0,e.b0)]+r[this.getIndex(e.r0,e.g1,e.b0)]-r[this.getIndex(e.r0,e.g0,e.b0)];default:throw new Error("unexpected direction $direction")}}top(e,t,r,n){switch(t){case se:return n[this.getIndex(r,e.g1,e.b1)]-n[this.getIndex(r,e.g1,e.b0)]-n[this.getIndex(r,e.g0,e.b1)]+n[this.getIndex(r,e.g0,e.b0)];case ce:return n[this.getIndex(e.r1,r,e.b1)]-n[this.getIndex(e.r1,r,e.b0)]-n[this.getIndex(e.r0,r,e.b1)]+n[this.getIndex(e.r0,r,e.b0)];case ue:return n[this.getIndex(e.r1,e.g1,r)]-n[this.getIndex(e.r1,e.g0,r)]-n[this.getIndex(e.r0,e.g1,r)]+n[this.getIndex(e.r0,e.g0,r)];default:throw new Error("unexpected direction $direction")}}getIndex(e,t,r){return(e<<10)+(e<<6)+e+(t<<5)+t+r}}class he{constructor(e=0,t=0,r=0,n=0,o=0,a=0,i=0){this.r0=e,this.r1=t,this.g0=r,this.g1=n,this.b0=o,this.b1=a,this.vol=i}}class fe{constructor(e,t){this.requestedCount=e,this.resultCount=t}}class de{constructor(e,t){this.cutLocation=e,this.maximum=t}}class me{static quantize(e,t){const r=(new le).quantize(e,t);return re.quantize(e,r,t)}}class pe{constructor(e){this.sourceColorArgb=e.sourceColorArgb,this.variant=e.variant,this.contrastLevel=e.contrastLevel,this.isDark=e.isDark,this.sourceColorHct=$.fromInt(e.sourceColorArgb),this.primaryPalette=e.primaryPalette,this.secondaryPalette=e.secondaryPalette,this.tertiaryPalette=e.tertiaryPalette,this.neutralPalette=e.neutralPalette,this.neutralVariantPalette=e.neutralVariantPalette,this.errorPalette=Q.fromHueAndChroma(25,84)}static getRotatedHue(e,t,r){const n=e.hue;if(t.length!==r.length)throw new Error(`mismatch between hue length ${t.length} & rotations ${r.length}`);if(1===r.length)return c(e.hue+r[0]);const o=t.length;for(let e=0;e<=o-2;e++){const o=t[e],a=t[e+1];if(o<n&&n<a)return c(n+r[e])}return n}}class ge{get primary(){return this.props.primary}get onPrimary(){return this.props.onPrimary}get primaryContainer(){return this.props.primaryContainer}get onPrimaryContainer(){return this.props.onPrimaryContainer}get secondary(){return this.props.secondary}get onSecondary(){return this.props.onSecondary}get secondaryContainer(){return this.props.secondaryContainer}get onSecondaryContainer(){return this.props.onSecondaryContainer}get tertiary(){return this.props.tertiary}get onTertiary(){return this.props.onTertiary}get tertiaryContainer(){return this.props.tertiaryContainer}get onTertiaryContainer(){return this.props.onTertiaryContainer}get error(){return this.props.error}get onError(){return this.props.onError}get errorContainer(){return this.props.errorContainer}get onErrorContainer(){return this.props.onErrorContainer}get background(){return this.props.background}get onBackground(){return this.props.onBackground}get surface(){return this.props.surface}get onSurface(){return this.props.onSurface}get surfaceVariant(){return this.props.surfaceVariant}get onSurfaceVariant(){return this.props.onSurfaceVariant}get outline(){return this.props.outline}get outlineVariant(){return this.props.outlineVariant}get shadow(){return this.props.shadow}get scrim(){return this.props.scrim}get inverseSurface(){return this.props.inverseSurface}get inverseOnSurface(){return this.props.inverseOnSurface}get inversePrimary(){return this.props.inversePrimary}static light(e){return ge.lightFromCorePalette(ee.of(e))}static dark(e){return ge.darkFromCorePalette(ee.of(e))}static lightContent(e){return ge.lightFromCorePalette(ee.contentOf(e))}static darkContent(e){return ge.darkFromCorePalette(ee.contentOf(e))}static lightFromCorePalette(e){return new ge({primary:e.a1.tone(40),onPrimary:e.a1.tone(100),primaryContainer:e.a1.tone(90),onPrimaryContainer:e.a1.tone(10),secondary:e.a2.tone(40),onSecondary:e.a2.tone(100),secondaryContainer:e.a2.tone(90),onSecondaryContainer:e.a2.tone(10),tertiary:e.a3.tone(40),onTertiary:e.a3.tone(100),tertiaryContainer:e.a3.tone(90),onTertiaryContainer:e.a3.tone(10),error:e.error.tone(40),onError:e.error.tone(100),errorContainer:e.error.tone(90),onErrorContainer:e.error.tone(10),background:e.n1.tone(99),onBackground:e.n1.tone(10),surface:e.n1.tone(99),onSurface:e.n1.tone(10),surfaceVariant:e.n2.tone(90),onSurfaceVariant:e.n2.tone(30),outline:e.n2.tone(50),outlineVariant:e.n2.tone(80),shadow:e.n1.tone(0),scrim:e.n1.tone(0),inverseSurface:e.n1.tone(20),inverseOnSurface:e.n1.tone(95),inversePrimary:e.a1.tone(80)})}static darkFromCorePalette(e){return new ge({primary:e.a1.tone(80),onPrimary:e.a1.tone(20),primaryContainer:e.a1.tone(30),onPrimaryContainer:e.a1.tone(90),secondary:e.a2.tone(80),onSecondary:e.a2.tone(20),secondaryContainer:e.a2.tone(30),onSecondaryContainer:e.a2.tone(90),tertiary:e.a3.tone(80),onTertiary:e.a3.tone(20),tertiaryContainer:e.a3.tone(30),onTertiaryContainer:e.a3.tone(90),error:e.error.tone(80),onError:e.error.tone(20),errorContainer:e.error.tone(30),onErrorContainer:e.error.tone(80),background:e.n1.tone(10),onBackground:e.n1.tone(90),surface:e.n1.tone(10),onSurface:e.n1.tone(90),surfaceVariant:e.n2.tone(30),onSurfaceVariant:e.n2.tone(80),outline:e.n2.tone(60),outlineVariant:e.n2.tone(30),shadow:e.n1.tone(0),scrim:e.n1.tone(0),inverseSurface:e.n1.tone(90),inverseOnSurface:e.n1.tone(20),inversePrimary:e.a1.tone(40)})}constructor(e){this.props=e}toJSON(){return{...this.props}}}class ye{get colorAccentPrimary(){return this.props.colorAccentPrimary}get colorAccentPrimaryVariant(){return this.props.colorAccentPrimaryVariant}get colorAccentSecondary(){return this.props.colorAccentSecondary}get colorAccentSecondaryVariant(){return this.props.colorAccentSecondaryVariant}get colorAccentTertiary(){return this.props.colorAccentTertiary}get colorAccentTertiaryVariant(){return this.props.colorAccentTertiaryVariant}get textColorPrimary(){return this.props.textColorPrimary}get textColorSecondary(){return this.props.textColorSecondary}get textColorTertiary(){return this.props.textColorTertiary}get textColorPrimaryInverse(){return this.props.textColorPrimaryInverse}get textColorSecondaryInverse(){return this.props.textColorSecondaryInverse}get textColorTertiaryInverse(){return this.props.textColorTertiaryInverse}get colorBackground(){return this.props.colorBackground}get colorBackgroundFloating(){return this.props.colorBackgroundFloating}get colorSurface(){return this.props.colorSurface}get colorSurfaceVariant(){return this.props.colorSurfaceVariant}get colorSurfaceHighlight(){return this.props.colorSurfaceHighlight}get surfaceHeader(){return this.props.surfaceHeader}get underSurface(){return this.props.underSurface}get offState(){return this.props.offState}get accentSurface(){return this.props.accentSurface}get textPrimaryOnAccent(){return this.props.textPrimaryOnAccent}get textSecondaryOnAccent(){return this.props.textSecondaryOnAccent}get volumeBackground(){return this.props.volumeBackground}get scrim(){return this.props.scrim}static light(e){const t=ee.of(e);return ye.lightFromCorePalette(t)}static dark(e){const t=ee.of(e);return ye.darkFromCorePalette(t)}static lightContent(e){const t=ee.contentOf(e);return ye.lightFromCorePalette(t)}static darkContent(e){const t=ee.contentOf(e);return ye.darkFromCorePalette(t)}static lightFromCorePalette(e){return new ye({colorAccentPrimary:e.a1.tone(90),colorAccentPrimaryVariant:e.a1.tone(40),colorAccentSecondary:e.a2.tone(90),colorAccentSecondaryVariant:e.a2.tone(40),colorAccentTertiary:e.a3.tone(90),colorAccentTertiaryVariant:e.a3.tone(40),textColorPrimary:e.n1.tone(10),textColorSecondary:e.n2.tone(30),textColorTertiary:e.n2.tone(50),textColorPrimaryInverse:e.n1.tone(95),textColorSecondaryInverse:e.n1.tone(80),textColorTertiaryInverse:e.n1.tone(60),colorBackground:e.n1.tone(95),colorBackgroundFloating:e.n1.tone(98),colorSurface:e.n1.tone(98),colorSurfaceVariant:e.n1.tone(90),colorSurfaceHighlight:e.n1.tone(100),surfaceHeader:e.n1.tone(90),underSurface:e.n1.tone(0),offState:e.n1.tone(20),accentSurface:e.a2.tone(95),textPrimaryOnAccent:e.n1.tone(10),textSecondaryOnAccent:e.n2.tone(30),volumeBackground:e.n1.tone(25),scrim:e.n1.tone(80)})}static darkFromCorePalette(e){return new ye({colorAccentPrimary:e.a1.tone(90),colorAccentPrimaryVariant:e.a1.tone(70),colorAccentSecondary:e.a2.tone(90),colorAccentSecondaryVariant:e.a2.tone(70),colorAccentTertiary:e.a3.tone(90),colorAccentTertiaryVariant:e.a3.tone(70),textColorPrimary:e.n1.tone(95),textColorSecondary:e.n2.tone(80),textColorTertiary:e.n2.tone(60),textColorPrimaryInverse:e.n1.tone(10),textColorSecondaryInverse:e.n1.tone(30),textColorTertiaryInverse:e.n1.tone(50),colorBackground:e.n1.tone(10),colorBackgroundFloating:e.n1.tone(10),colorSurface:e.n1.tone(20),colorSurfaceVariant:e.n1.tone(30),colorSurfaceHighlight:e.n1.tone(35),surfaceHeader:e.n1.tone(30),underSurface:e.n1.tone(0),offState:e.n1.tone(20),accentSurface:e.a2.tone(95),textPrimaryOnAccent:e.n1.tone(10),textSecondaryOnAccent:e.n2.tone(30),volumeBackground:e.n1.tone(25),scrim:e.n1.tone(80)})}constructor(e){this.props=e}toJSON(){return{...this.props}}}class be{constructor(e){this.input=e,this.hctsByTempCache=[],this.hctsByHueCache=[],this.tempsByHctCache=new Map,this.inputRelativeTemperatureCache=-1,this.complementCache=null}get hctsByTemp(){if(this.hctsByTempCache.length>0)return this.hctsByTempCache;const e=this.hctsByHue.concat([this.input]),t=this.tempsByHct;return e.sort(((e,r)=>t.get(e)-t.get(r))),this.hctsByTempCache=e,e}get warmest(){return this.hctsByTemp[this.hctsByTemp.length-1]}get coldest(){return this.hctsByTemp[0]}analogous(e=5,t=12){const r=Math.round(this.input.hue),n=this.hctsByHue[r];let o=this.relativeTemperature(n);const a=[n];let i=0;for(let e=0;e<360;e++){const t=s(r+e),n=this.hctsByHue[t],a=this.relativeTemperature(n),c=Math.abs(a-o);o=a,i+=c}let c=1;const u=i/t;let l=0;for(o=this.relativeTemperature(n);a.length<t;){const e=s(r+c),n=this.hctsByHue[e],i=this.relativeTemperature(n);l+=Math.abs(i-o);let h=l>=a.length*u,f=1;for(;h&&a.length<t;)a.push(n),h=l>=(a.length+f)*u,f++;if(o=i,c++,c>360){for(;a.length<t;)a.push(n);break}}const h=[this.input],f=Math.floor((e-1)/2);for(let e=1;e<f+1;e++){let t=0-e;for(;t<0;)t=a.length+t;t>=a.length&&(t%=a.length),h.splice(0,0,a[t])}const d=e-f-1;for(let e=1;e<d+1;e++){let t=e;for(;t<0;)t=a.length+t;t>=a.length&&(t%=a.length),h.push(a[t])}return h}get complement(){if(null!=this.complementCache)return this.complementCache;const e=this.coldest.hue,t=this.tempsByHct.get(this.coldest),r=this.warmest.hue,n=this.tempsByHct.get(this.warmest)-t,o=be.isBetween(this.input.hue,e,r),a=o?r:e,i=o?e:r;let s=1e3,u=this.hctsByHue[Math.round(this.input.hue)];const l=1-this.inputRelativeTemperature;for(let e=0;e<=360;e+=1){const r=c(a+1*e);if(!be.isBetween(r,a,i))continue;const o=this.hctsByHue[Math.round(r)],h=(this.tempsByHct.get(o)-t)/n,f=Math.abs(l-h);f<s&&(s=f,u=o)}return this.complementCache=u,this.complementCache}relativeTemperature(e){const t=this.tempsByHct.get(this.warmest)-this.tempsByHct.get(this.coldest),r=this.tempsByHct.get(e)-this.tempsByHct.get(this.coldest);return 0===t?.5:r/t}get inputRelativeTemperature(){return this.inputRelativeTemperatureCache>=0||(this.inputRelativeTemperatureCache=this.relativeTemperature(this.input)),this.inputRelativeTemperatureCache}get tempsByHct(){if(this.tempsByHctCache.size>0)return this.tempsByHctCache;const e=this.hctsByHue.concat([this.input]),t=new Map;for(const r of e)t.set(r,be.rawTemperature(r));return this.tempsByHctCache=t,t}get hctsByHue(){if(this.hctsByHueCache.length>0)return this.hctsByHueCache;const e=[];for(let t=0;t<=360;t+=1){const r=$.from(t,this.input.chroma,this.input.tone);e.push(r)}return this.hctsByHueCache=e,this.hctsByHueCache}static isBetween(e,t,r){return t<r?t<=e&&e<=r:t<=e||e<=r}static rawTemperature(e){const t=S(e.toInt()),r=c(180*Math.atan2(t[2],t[1])/Math.PI),n=Math.sqrt(t[1]*t[1]+t[2]*t[2]);return.02*Math.pow(n,1.07)*Math.cos(c(r-50)*Math.PI/180)-.5}}class ve extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.CONTENT,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,e.chroma),secondaryPalette:Q.fromHueAndChroma(e.hue,Math.max(e.chroma-32,.5*e.chroma)),tertiaryPalette:Q.fromInt(G.fixIfDisliked(new be(e).analogous(3,6)[2]).toInt()),neutralPalette:Q.fromHueAndChroma(e.hue,e.chroma/8),neutralVariantPalette:Q.fromHueAndChroma(e.hue,e.chroma/8+4)})}}class Ce extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.EXPRESSIVE,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(c(e.hue+240),40),secondaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Ce.hues,Ce.secondaryRotations),24),tertiaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Ce.hues,Ce.tertiaryRotations),32),neutralPalette:Q.fromHueAndChroma(e.hue+15,8),neutralVariantPalette:Q.fromHueAndChroma(e.hue+15,12)})}}Ce.hues=[0,21,51,121,151,191,271,321,360],Ce.secondaryRotations=[45,95,45,20,45,90,45,45,45],Ce.tertiaryRotations=[120,120,20,45,20,15,20,120,120];class Pe extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.FIDELITY,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,e.chroma),secondaryPalette:Q.fromHueAndChroma(e.hue,Math.max(e.chroma-32,.5*e.chroma)),tertiaryPalette:Q.fromInt(G.fixIfDisliked(new be(e).complement).toInt()),neutralPalette:Q.fromHueAndChroma(e.hue,e.chroma/8),neutralVariantPalette:Q.fromHueAndChroma(e.hue,e.chroma/8+4)})}}class we extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.MONOCHROME,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,0),secondaryPalette:Q.fromHueAndChroma(e.hue,0),tertiaryPalette:Q.fromHueAndChroma(e.hue,0),neutralPalette:Q.fromHueAndChroma(e.hue,0),neutralVariantPalette:Q.fromHueAndChroma(e.hue,0)})}}class xe extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.NEUTRAL,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,12),secondaryPalette:Q.fromHueAndChroma(e.hue,8),tertiaryPalette:Q.fromHueAndChroma(e.hue,16),neutralPalette:Q.fromHueAndChroma(e.hue,2),neutralVariantPalette:Q.fromHueAndChroma(e.hue,2)})}}class ke extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.TONAL_SPOT,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,36),secondaryPalette:Q.fromHueAndChroma(e.hue,16),tertiaryPalette:Q.fromHueAndChroma(c(e.hue+60),24),neutralPalette:Q.fromHueAndChroma(e.hue,6),neutralVariantPalette:Q.fromHueAndChroma(e.hue,8)})}}class Se extends pe{constructor(e,t,r){super({sourceColorArgb:e.toInt(),variant:W.VIBRANT,contrastLevel:r,isDark:t,primaryPalette:Q.fromHueAndChroma(e.hue,200),secondaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Se.hues,Se.secondaryRotations),24),tertiaryPalette:Q.fromHueAndChroma(pe.getRotatedHue(e,Se.hues,Se.tertiaryRotations),32),neutralPalette:Q.fromHueAndChroma(e.hue,10),neutralVariantPalette:Q.fromHueAndChroma(e.hue,12)})}}Se.hues=[0,41,61,101,131,181,251,301,360],Se.secondaryRotations=[18,15,10,12,15,18,15,12,12],Se.tertiaryRotations=[35,30,20,25,30,35,30,25,25];const Me={desired:4,fallbackColorARGB:4282549748,filter:!0};function Oe(e,t){return e.score>t.score?-1:e.score<t.score?1:0}class _e{constructor(){}static score(e,t){const{desired:r,fallbackColorARGB:n,filter:o}={...Me,...t},a=[],i=new Array(360).fill(0);let c=0;for(const[t,r]of e.entries()){const e=$.fromInt(t);a.push(e),i[Math.floor(e.hue)]+=r,c+=r}const u=new Array(360).fill(0);for(let e=0;e<360;e++){const t=i[e]/c;for(let r=e-14;r<e+16;r++)u[s(r)]+=t}const h=new Array;for(const e of a){const t=u[s(Math.round(e.hue))];if(o&&(e.chroma<_e.CUTOFF_CHROMA||t<=_e.CUTOFF_EXCITED_PROPORTION))continue;const r=100*t*_e.WEIGHT_PROPORTION,n=e.chroma<_e.TARGET_CHROMA?_e.WEIGHT_CHROMA_BELOW:_e.WEIGHT_CHROMA_ABOVE,a=r+(e.chroma-_e.TARGET_CHROMA)*n;h.push({hct:e,score:a})}h.sort(Oe);const f=[];for(let e=90;e>=15;e--){f.length=0;for(const{hct:t}of h)if(f.find((r=>l(t.hue,r.hue)<e))||f.push(t),f.length>=r)break;if(f.length>=r)break}const d=[];0===f.length&&d.push(n);for(const e of f)d.push(e.toInt());return d}}function Ae(e){const t=b(e),r=v(e),n=C(e),o=[t.toString(16),r.toString(16),n.toString(16)];for(const[e,t]of o.entries())1===t.length&&(o[e]="0"+t);return"#"+o.join("")}function Ie(e){const t=3===(e=e.replace("#","")).length,r=6===e.length,n=8===e.length;if(!t&&!r&&!n)throw new Error("unexpected hex "+e);let o=0,a=0,i=0;return t?(o=Te(e.slice(0,1).repeat(2)),a=Te(e.slice(1,2).repeat(2)),i=Te(e.slice(2,3).repeat(2))):r?(o=Te(e.slice(0,2)),a=Te(e.slice(2,4)),i=Te(e.slice(4,6))):n&&(o=Te(e.slice(2,4)),a=Te(e.slice(4,6)),i=Te(e.slice(6,8))),(255<<24|(255&o)<<16|(255&a)<<8|255&i)>>>0}function Te(e){return parseInt(e,16)}async function De(e){const t=await new Promise(((t,r)=>{const n=document.createElement("canvas"),o=n.getContext("2d");if(!o)return void r(new Error("Could not get canvas context"));const a=()=>{n.width=e.width,n.height=e.height,o.drawImage(e,0,0);let r=[0,0,e.width,e.height];const a=e.dataset.area;a&&/^\d+(\s*,\s*\d+){3}$/.test(a)&&(r=a.split(/\s*,\s*/).map((e=>parseInt(e,10))));const[i,s,c,u]=r;t(o.getImageData(i,s,c,u).data)};e.complete?a():e.onload=a})),r=[];for(let e=0;e<t.length;e+=4){const n=t[e],o=t[e+1],a=t[e+2];if(t[e+3]<255)continue;const i=p(n,o,a);r.push(i)}const n=me.quantize(r,128);return _e.score(n)[0]}function Fe(e,t=[]){const r=ee.of(e);return{source:e,schemes:{light:ge.light(e),dark:ge.dark(e)},palettes:{primary:r.a1,secondary:r.a2,tertiary:r.a3,neutral:r.n1,neutralVariant:r.n2,error:r.error},customColors:t.map((t=>He(e,t)))}}async function Be(e,t=[]){return Fe(await De(e),t)}function He(e,t){let r=t.value;const n=r,o=e;t.blend&&(r=V.harmonize(n,o));const a=ee.of(r).a1;return{color:t,value:r,light:{color:a.tone(40),onColor:a.tone(100),colorContainer:a.tone(90),onColorContainer:a.tone(10)},dark:{color:a.tone(80),onColor:a.tone(20),colorContainer:a.tone(30),onColorContainer:a.tone(90)}}}function je(e,t){const r=t?.target||document.body;if(Ee(r,t?.dark?e.schemes.dark:e.schemes.light),t?.brightnessSuffix&&(Ee(r,e.schemes.dark,"-dark"),Ee(r,e.schemes.light,"-light")),t?.paletteTones){const n=t?.paletteTones??[];for(const[t,o]of Object.entries(e.palettes)){const e=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();for(const t of n){const n=`--md-ref-palette-${e}-${e}${t}`,a=Ae(o.tone(t));r.style.setProperty(n,a)}}}}function Ee(e,t,r=""){for(const[n,o]of Object.entries(t.toJSON())){const t=n.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),a=Ae(o);e.style.setProperty(`--md-sys-color-${t}${r}`,a)}}_e.TARGET_CHROMA=48,_e.WEIGHT_PROPORTION=.7,_e.WEIGHT_CHROMA_ABOVE=.3,_e.WEIGHT_CHROMA_BELOW=.1,_e.CUTOFF_CHROMA=5,_e.CUTOFF_EXCITED_PROPORTION=.01},450:(e,t,r)=>{"use strict";r.r(t),r.d(t,{CorePalette:()=>c,Scheme:()=>u,applyTheme:()=>s,themeFromImage:()=>h,themeFromSourceColor:()=>l});var n=r(794),o=Object.defineProperty,a=(e,t,r)=>(((e,t,r)=>{t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r})(e,"symbol"!=typeof t?t+"":t,r),r);const i=(e,t,r="",o)=>{for(const[a,i]of Object.entries(t.toJSON())){const t=a.replaceAll(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),s="rgb"===o?Object.values((0,n.rgbaFromArgb)(i)).slice(0,-1).join(" "):(0,n.hexFromArgb)(i);e.style.setProperty(`--md-sys-color-${t}${r}`,s)}},s=(e,t)=>{const r=(null==t?void 0:t.target)||document.body,o=(null==t?void 0:t.dark)?e.schemes.dark:e.schemes.light;if(null!=t&&t.brightnessSuffix?(i(r,e.schemes.dark,"-dark",null==t?void 0:t.colorFormat),i(r,e.schemes.light,"-light",null==t?void 0:t.colorFormat)):i(r,o,"",null==t?void 0:t.colorFormat),null!=t&&t.paletteTones){const o=(null==t?void 0:t.paletteTones)??[];for(const[a,i]of Object.entries(e.palettes)){const e=a.replaceAll(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();for(const a of o){const o=`--md-ref-palette-${e}${a}`,s="rgb"===(null==t?void 0:t.colorFormat)?Object.values((0,n.rgbaFromArgb)(i.tone(a))).slice(0,-1).join(" "):(0,n.hexFromArgb)(i.tone(a));r.style.setProperty(o,s)}}}};class c{constructor(e,t){a(this,"a1"),a(this,"a2"),a(this,"a3"),a(this,"n1"),a(this,"n2"),a(this,"error");const{hue:r,chroma:o}=n.Hct.fromInt(e);t?(this.a1=n.TonalPalette.fromHueAndChroma(r,o),this.a2=n.TonalPalette.fromHueAndChroma(r,o/3),this.a3=n.TonalPalette.fromHueAndChroma(r+60,o/2),this.n1=n.TonalPalette.fromHueAndChroma(r,Math.min(o/12,4)),this.n2=n.TonalPalette.fromHueAndChroma(r,Math.min(o/6,8))):(this.a1=n.TonalPalette.fromHueAndChroma(r,Math.max(48,o)),this.a2=n.TonalPalette.fromHueAndChroma(r,16),this.a3=n.TonalPalette.fromHueAndChroma(r+60,24),this.n1=n.TonalPalette.fromHueAndChroma(r,6),this.n2=n.TonalPalette.fromHueAndChroma(r,8)),this.error=n.TonalPalette.fromHueAndChroma(25,84)}static of(e){return new c(e,!1)}static contentOf(e){return new c(e,!0)}static fromColors(e){return c.createPaletteFromColors(!1,e)}static contentFromColors(e){return c.createPaletteFromColors(!0,e)}static createPaletteFromColors(e,t){const r=new c(t.primary,e);if(t.secondary){const n=new c(t.secondary,e);r.a2=n.a1}if(t.tertiary){const n=new c(t.tertiary,e);r.a3=n.a1}if(t.error){const n=new c(t.error,e);r.error=n.a1}if(t.neutral){const n=new c(t.neutral,e);r.n1=n.n1}if(t.neutralVariant){const n=new c(t.neutralVariant,e);r.n2=n.n2}return r}}class u{constructor(e){this.props=e}get primary(){return this.props.primary}get onPrimary(){return this.props.onPrimary}get primaryContainer(){return this.props.primaryContainer}get onPrimaryContainer(){return this.props.onPrimaryContainer}get secondary(){return this.props.secondary}get onSecondary(){return this.props.onSecondary}get secondaryContainer(){return this.props.secondaryContainer}get onSecondaryContainer(){return this.props.onSecondaryContainer}get tertiary(){return this.props.tertiary}get onTertiary(){return this.props.onTertiary}get tertiaryContainer(){return this.props.tertiaryContainer}get onTertiaryContainer(){return this.props.onTertiaryContainer}get error(){return this.props.error}get onError(){return this.props.onError}get errorContainer(){return this.props.errorContainer}get onErrorContainer(){return this.props.onErrorContainer}get background(){return this.props.background}get onBackground(){return this.props.onBackground}get surface(){return this.props.surface}get onSurface(){return this.props.onSurface}get surfaceVariant(){return this.props.surfaceVariant}get onSurfaceVariant(){return this.props.onSurfaceVariant}get outline(){return this.props.outline}get outlineVariant(){return this.props.outlineVariant}get shadow(){return this.props.shadow}get scrim(){return this.props.scrim}get inverseSurface(){return this.props.inverseSurface}get inverseOnSurface(){return this.props.inverseOnSurface}get inversePrimary(){return this.props.inversePrimary}get surfaceBright(){return this.props.surfaceBright}get surfaceContainer(){return this.props.surfaceContainer}get surfaceContainerHigh(){return this.props.surfaceContainerHigh}get surfaceContainerHighest(){return this.props.surfaceContainerHighest}get surfaceContainerLow(){return this.props.surfaceContainerLow}get surfaceContainerLowest(){return this.props.surfaceContainerLowest}get surfaceTint(){return this.props.surfaceTint}static light(e){return u.lightFromCorePalette(c.of(e))}static dark(e){return u.darkFromCorePalette(c.of(e))}static lightContent(e){return u.lightFromCorePalette(c.contentOf(e))}static darkContent(e){return u.darkFromCorePalette(c.contentOf(e))}static lightFromCorePalette(e){return new u({...n.Scheme.lightFromCorePalette(e).toJSON(),background:e.n1.tone(98),surface:e.n1.tone(98),surfaceBright:e.n1.tone(98),surfaceContainer:e.n1.tone(94),surfaceContainerHigh:e.n1.tone(92),surfaceContainerHighest:e.n1.tone(90),surfaceContainerLow:e.n1.tone(96),surfaceContainerLowest:e.n1.tone(100),surfaceDim:e.n1.tone(87),surfaceTint:e.a1.tone(40)})}static darkFromCorePalette(e){return new u({...n.Scheme.darkFromCorePalette(e).toJSON(),onErrorContainer:e.error.tone(90),background:e.n1.tone(6),surface:e.n1.tone(6),surfaceBright:e.n1.tone(24),surfaceContainer:e.n1.tone(12),surfaceContainerHigh:e.n1.tone(17),surfaceContainerHighest:e.n1.tone(22),surfaceContainerLow:e.n1.tone(10),surfaceContainerLowest:e.n1.tone(4),surfaceDim:e.n1.tone(6),surfaceTint:e.a1.tone(80)})}toJSON(){return this.props}}const l=(e,t=[])=>{const r=c.of(e);return{customColors:t.map((t=>(0,n.customColor)(e,t))),palettes:{error:r.error,neutral:r.n1,neutralVariant:r.n2,primary:r.a1,secondary:r.a2,tertiary:r.a3},schemes:{dark:u.dark(e),light:u.light(e)},source:e}},h=async(e,t=[])=>await(0,n.sourceColorFromImage)(e).then((e=>l(e,t)))}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={exports:{}};return r[e].call(a.exports,a,a.exports,o),a.exports}return o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,